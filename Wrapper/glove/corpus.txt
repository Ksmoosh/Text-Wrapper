jedną charakterystycznych cech pythona dynamiczne typowanie dla wielu programistów mających doświadczenie językach c java powód niepokojów napadowych bólów głowy komentarzy kiedyś zaczynałem c z kolei wielu początkujących deweloperów doświadczenia statycznie typowanych językach wielka zaleta wiedzą typować statycznie w artykule spróbuję zachęcić was wprowadzenia dynamicznie typowanym pythonie niektórych praktyk przypominających typowanie statyczne pokazać ułatwić artur patoka senior qa automation engineer firmie finastra tworzy oprogramowanie instytucji finansowych na dzień posługuje pythonem zajmuje pisaniem automatyzujących skryptów nastawieniem minimalizowanie nakładu ludzkiej manualnej pracy poza biurem zajmuje uczeniem programowania kiwi learning współzałożycielem wolne chwile spędza rowerze podróżach newsów temacie eksploracji kosmosu czym typowanie każdy język programowania mieć opisany system typów system typów dużym uproszczeniu zestaw reguł przypisują typ różnym strukturom zmiennym wyrażeniom funkcjom taki typ jednoznacznie określa jakiego rodzaju operacje zostać wykonane strukturze danego typu najprościej wytłumaczyć przykładzie tworzymy zmienne przypisujemy wartości interpreter obie typu str oznacza zmiennych możemy wykonywać wszystkie operacje dozwolone zmiennych typu str operację split zwróćmy uwagę podobnej operacji możemy wykonać zmiennej typu int interpreter momencie wykonywanie skryptu czasie interaktywnej sesji przypisuje zmiennej typ traktuje zmienną typu momentu wartość zmiennej zostanie zmieniona inną innego typu prostym sposobem podejrzenie metod atrybutów dostępnych danej struktury zmiennej konkretnego typu polecenie dir poniżej porównanie dostępnych operacji txt1 my_int po krótkiej analizie widać zmiennej typu str możemy wykonać operację upper zmienienie wszystkich małych znaków alfabetu wielkie a a możemy zrobić zmiennej typu liczbowego logicznie miałoby sensu cyfry wielkie małe litery jeśli momencie macie nadal wrażenie końca rozumiecie czym typy istnieją proponuję rzucić okiem wikipedię zrozumieć ciąg dalszy obszerne wyjaśnienia znaleźć artykule angielskiej wiki https en wikipedia org wiki type_system typowanie statyczne dynamiczne wiemy mniej więcej czym typy ogranicza operacje zmiennych ale właściwie praktyczne znaczenie czym różni python wspomnianego c kwestii typowania podstawową definicją typowania dynamicznego przypisywanie typów zmiennych trakcie egzekucji wykonywania programu skryptu dzieje przykładach powyżej pythonie przy samym uruchomieniu skryptu interpreter jakiego typu zmienne określa momencie przypisania pierwszej wartości a kilka linijek niżej samej zmiennej przypisana wartość innego typu nie problemu momentu zmienna innego typu zupełnie inaczej przypadku języków typowanych statycznie c nadawanie typów zmiennym odbywa czasie kompilacji programu zmienna zostać zadeklarowana zmienna konkretnego typu cały swój czas zmienna mogła przyjmować wartości typu oba podejścia zalety ograniczenia typowanie statyczne wiele zalet ułatwia optymalizację zapewnia większą możliwość wykrycia błędów kompilator uraczy błędem txt1 przypiszemy wartość trakcie kompilacji podczas interpreter pythona pokorą przyjmie zmianę momentu przypisania wartości liczbowej traktował txt1 liczbę wymaga zdecydowanie więcej kodu elastyczne wymaga dewelopera kontroli tworzonych zmiennych języki dynamicznie typowane kolei zwykle bardziej elastyczne pozwalają osiągnąć cel mniejszej ilości kodu brak potrzeby długich typów są wygodne nauki pierwszych dniach nauki pythona musimy wiedzieć istnieniu typów prostu działa słabe strony typowania dynamicznego wszystkim większa możliwość wprowadzenia błędów trudniejsze wykrywanie jak użyć zalet statystycznego typowania pythonie type annotation ratunek znowu zaczniemy przykładu spójrzmy taką prostą klasę widzimy poprawną definicję klasy dwóch metod pierwsza konstruktor ta metoda wywoływana podczas tworzenia obiektu klasy testclass ustawia jedyny atrybut klasy zmienną name druga metoda zwraca prostu zmienną name napisaną wielkimi literami przykład użycia klasy wynik działania metody raczej zaskoczeniem co naszym kodzie pomyłkę zainicjalizujemy obiekt klasy testclass name podamy liczbę absolutnie obiekt zostanie utworzony a błąd zobaczymy dopiero wywołując metodą show_name_uppercase jak takim pomóc pilnowaniem typów potrzebne rozszerzając naszą testową klasę type annotation podstawowa korzyść płynąca takiego podejścia zdecydowanie dokładniejsza pomoc naszego edytora moim przypadku pycharm nie pominąć podkreślenia kodzie po przesunięciu kursora miejsce lewym dolnym rogu zobaczymy szczegóły błędu tutaj widzimy oczekiwanym typem string a próbujemy użyć liczby całkowitej int warto wspomnieć ostrzeżenie edytora tak napisany kod nadal wykona dopóki zostanie zawołana metoda show_name_uppercase drugą wielką zaletą ogłaszania typów podpowiedzi edytora tak wyglądają podpowiedzi metod zmiennej adnotacji typu podpowiedź upper znajduje liście użyliśmy kolejnej metodzie tak kolei wyglądają podpowiedzi przypadku zmiennej typ ogłoszony edytor oczekuje zmienna name typu str podpowiada wszystkie znane metody dostępne zmiennych str drugi rodzaj ogłaszania typów określenie typu zwracanej wartości zwróćmy uwagę definicję konstruktora metody zapis none oznacza metoda zwraca zwraca none ci was nostalgią westchnęli wspomnienie c pierwszym akapicie znają typ zwracanej wartości void metoda zwracająca name wielkich literach kolei zapis str oznaczający zwróci znaków jeśli wynik działania metody przypiszemy zmiennej edytor wiedział jakiego typu zmienna trudno przecenić funkcjonalność przypadku większych projektów szczególnie pojawia wielokrotne dziedziczenie wystarczy spojrzeć kilka linijek wyżej zobaczyć dokładnie zwróci dana metoda określanie typów deklaracjami metod weźmy uwagę scenariusz używamy metody jakiegoś modułu określa typów wiemy metoda zwraca wartość typu float w takiej sytuacji możemy zdefiniować typ złożone typy moduł typing wbudowany pythona wersji pozwala precyzyjne określanie złożonych typów cały moduł pomocną dokumentację https docs python org library typing html skupimy przykładach typy liczbowe str należy importować modułu typing na przykładzie deklaracja typu zmiennej słownika klucze typu str a wartości listami w przypadku typów zastosować większe zagnieżdżenie załóżmy my_dict słownik klucze typu str a wartości listy liczb zmiennoprzecinkowych tak szczegółowe typowanie ochronić pomyłką sytuacji wymagana określona struktura danych typowanie klas rodziców znowu najłatwiej opisać sytuację przykładzie poświęćmy chwilę przeanalizowanie kodu poniżej tworzymy klasę animal reprezentuje dowolne zwierze z praktycznych względów tworzymy klasy dziedziczą klasie animal mammal insect zwróćmy uwagę klasa mammal wykonuje konstruktor klasy animal dodaje atrybut walks_on_2_feet jedną metodę uses_all_legs_to_move z kolei konstruktor klasy insect przyjmuje parametru is_scary wiemy insekty zasady są_scary jeśli utworzymy funkcję używała atrybutów dostępne klasie bazowej animal możemy ogłosić typem argumentu naszej funkcji animal i funkcja check_how_scary przyjmuje argument obiekt typu animal oznacza pogardzi obiektem typu animal obiektami klas dzieci mammal insect sprawdzanie typów statyczna analiza kodu istnieje wiele narzędzi wesprzeć używaniu type annotation na dobry początek podstawowym narzędziem pełni wspiera ogłaszanie typów edytor moim przypadku pycharm wszystkim polecam poza edytorem istnieją dedykowane narzędzia statycznej analizy kodu zależnie konfiguracji wytknąć wszelkie braki adnotacji typów jednym narzędzi mypy mypy skonfigurować pilnował wszystkich deklaracji zmiennych metod sprawdzał każda zmiennych określony typ mypy precyzyjnie skonfigurować sprawia użyteczne narzędzie użycia pre commicie osobiście miałem przyjemność pracować projekcie mypy odpalane jenkinsa każdym commicie gerrita naprawdę dobre pierwsze sprawdzenie założeniem projektowym ogłaszanie typów wszystkich zmiennych jenkinsowy job pilnował dzięki ludzki reviewer patrzył kod dopiero deweloper zastosował adnotację typów wszystkich zmiennych kod poprawnie przeszedł weryfikację warto dodać ogłaszane typy znaczny ułatwiają code review ogólnie czytanie kodu innych czasem adnotacja typu znaczy więcej tysiąc słów komentarzu minusy używania type annotation type annotation posiada wielu minusów na pierwszy natkniemy jesteśmy uwiązani pythona wersji bądź w wersjach ogłaszanie typów wprowadza narzut performancowy uruchamianie skryptów zostało naprawione wersji przypadku używania najnowszych dystrybucji powinien problem inny przypadek ogłaszanie typów zbędne proste krótkie skrypty kod wyraźny podpowiada jakiego typu zwracana zmienna jeśli piszemy prosty crawler zarządzania starymi plikami prawdopodobnie zamkniemy stu liniach będziemy mieli wiele użytku ogłaszania typów zmiennych jeśli projekt urośnie będziemy dzielić innymi udostępniać open source warto pomyśleć adnotacji typów więcej informacji dowiedzieć więcej temat adnotacji typów wykorzystania praktyce polecam wszystkim dokumentację pythona jest wiele przykładów opisane szczegółowo tym porywa techniczny język dokumentacji pythona odsyłam dwóch artykułów https realpython com python type checking https medium com shamir stav_83310 the other great benefit of python type annotations w pracy pory pracowałem projektach niektóre pisane pełną adnotacją typów a niektórych obowiązkowa w momencie projekt rozrastał dynamicznie szybkim tempie pojawiały moduły pisane różne osoby adnotacja typów wymuszona testem pre commit jenkinsie pomocą mypy wielką pomocą utrzymaniu porządku kodzie mechanizm wyjątków javy zna pozór jakiejś wielkiej filozofii zostało rzucone prędzej później zostaje złapane choćby standardowy handler wątku co przypadku bloku try catch finally pojawi wyjątek niezłapany klauzulę catch a dodatek zostanie rzucony kolejny wyjątek finally obsłużone zostaną oba jeden jeśli znasz rozumiesz odpowiedź pytanie możesz razu przejść sekcji jeśli zachęcam dalszego czytania najpierw trochę podstaw działania jvm niezbędnych zrozumienia zagadnienia michał zimnicki java tech lead alten polska java technical leader wieloletnim doświadczeniem programowaniu języku java projektowaniu systemów rozproszonych specjalność szeroko pojęty performance przygodę programowaniem zaczynał pascala będąc pierwszej klasie gimnazjum problem przeraża uczestniczył tworzeniu rozwoju systemów transportu gotówki sprzedaży owoców lokalizacji obsługi bankowej a reklamowania kremu zmarszczki gdy najdzie wena lubi zrobić prezentacje jakiś cięższy temat podstawy jvm wirtualna maszyna javy maszyną wykonującą operacje stosie tyle stosy stos wywołań każdym razem wywoływana jakakolwiek metoda stos wrzucana ramka składająca uproszczeniu kopii wartości parametrów wywołania przestrzeni zmienne lokalne stosu argumentów dodatkowych danych ramki każdy wątek swój osobny stos wywołań stos argumentów bitowa kolejka lifo którą wrzucane argumenty potrzebne wykonywania instrukcji dla przykładu dodawania operacją dwuargumentową zatem dodać najpierw stos wrzucane wartości a potem wykonywana operacja dodawania pobiera górne wartości stosu sumuje a wynik wrzuca górę dla uproszczenia dalszej części artykułu będę nazywał prostu stosem istotnym plik klasy oprócz kodu bajtowego metod zawiera masę dodatkowych informacji potrzebnych prawidłowego wykonania rys przykładowa klasa rys kod bajtowy javy klasy rys w pokazanym fragmencie interesującą częścią tabela wyjątków exception table związana blokiem try składa numeru instrukcji początkowej from numeru instrukcji końcowej klasy wyjątku type miejsca należy przejść przypadku wystąpienia danej klasy wyjątku target wartym uwagi fakt blok try wyraźnej reprezentacji kodzie bajtowym metody widać jasno wejście bloku try związane operacją punktu widzenia wydajności udowadnia samo użycie try darmowe dodatkowo widzimy tabele definiującą operacje odpowiadają któremu numerowi linii pliku java jest potrzebne zbudować stack trace dający bezcenne informacje dokładnym miejscu wystąpienia wyjątku czytelnej programisty postaci rozczytanie tabeli pierwszy rzut oka pierwsza wartość mówi numerze linii pliku java następna początek przedziału instrukcji linia zaczyna przedział kończy wartości następnego wpisu tabeli tak wartości odpowiadają system out println inside try linia wartości throw new threaddeath linia itd by znaleźć numer linii został rzucony wyjątek wystarczy przeszukać tabelę końca sprawdzając numer operacji większy druga wartość tabeli tyle suchej wiedzy wystarczy prześledzenia działa mechanizm wyjątków działanie załóżmy gdzieś została wywołana metoda trycatchfinally w wątku została uruchomiona tworzona ramka kopiowane wartości parametrów inicjalizowane dodatkowe pola następnie ramka wrzucana stos wywołań wskaźnik wykonywanej instrukcji przenoszony pierwszą instrukcję naszej metodzie instrukcja wykonywana wskaźnik przechodzi następnej wystąpienia jednej dwóch sytuacji napotkania operacji return wystąpienia bądź rzucenia wyjątku w pierwszym przypadku ramka usuwana stosu wywołań a zwracana wartość metody istnieje wrzucana stos argumentów ramki poprzedniej odpowiada metodzie została wywołana trycatchfinally proces kontynuowany co wyjątek zostanie rzucony wtedy pomocą przychodzi tabela wyjątków iterując kolejnych wierszach tabeli porównywana wartość wskaźnika obecnie wykonywanej instrukcji zakresem zdefiniowanym rekordzie dodatkowo porównywana klasa wyjątku tą wierszu pochodną następuje przesunięcie wskaźnika instrukcji miejsca rekordu wykonywanie operacji dalej stało wyjątek wszakże został złapany innymi słowy zostanie rzucony wyjątek maszyna patrzy został wyrzucony linii objęta mechanizmem następnie sprawdza typu przewidziany jakiś kod należy wykonać jeśli przeskakuje początek zaczyna wykonywać co przypadku wyjątek zostanie dopasowany rekordów tabeli ramka zostaje usunięta proces zostaje ponawiany następnej ramki stosie wywołań dzieje wyjątek zostanie złapany dojdziemy końca stosu wtedy uruchamiany handler niezłapanych wyjątków a wykona wątek kończony no dobra tłumaczy działanie try catch finally a finally sprytne użycie samego mechanizmu kompilator ale kolei specyfikacja mówi finally wykona możliwe kompilator faktycznie kopiuje treść bloku finally każdej części try catch obrazuje przykład poniżej rys kod przykładowej klasy rys kod bajtowy javy metody rys tak normalnym działaniu blok finally zachowuje prostu zwyczajną częścią metody wykonanie wiąże spadkiem wydajności jako kopiowany bloków catch wyjątek zostanie złapany kod finally wykona normalnie co wyjątek zostanie złapany wyjątek zostanie rzucony bloku catch właśnie ostatni blok zaznaczony zielono wpisy tabeli wyjątków rys tabela wyjątków metody rys mówią dokładnie bloku try dowolnego catch zostanie rzucony wyjątek obsługiwany mechanizmy przejdź ostatniego finally jak widzimy zawiera oprócz funkcjonalności napisanej developera dodatkowe instrukcje potrzebne tymczasowego przetrzymania rzuconego wyjątku wszakże skierował jakiś niezłapany a następnie sukcesywnym wykonaniu wnętrza bloku ponowne rzucenie wróćmy pytania początku artykułu stanie bloku finally zostanie rzucony wyjątek najpierw przeszukana zostanie tablica wyjątków zostanie znaleziony ramka zostanie zwinięta wszelkie dane znajdujące stosie argumentów zmienne lokalne itd zostaną usunięte kontrola przejdzie następnej ramki stosie wywołań proces zostanie ponowiony itd co akurat rzucony zostanie naszego dodatkowego bloku pamiętamy czasowo przetrzymany niezłapany wyjątek ponownego rzucenia a zgodnie logiką wcześniej opisaną informacja zostanie bezpowrotnie utracona wraz usunięciem ramki mechanizm obsługi wyjątków zajmował został rzucony zauważcie punktu widzenia wirtualnej maszyny istnieje rozgraniczenie rodzaje wyjątków specjalne traktowanie błędów errors czym warto pamiętać czy koniec jeśli chodzi mechanizm java wprowadziła takiego stłumiony wyjątek suppressed exception i mowa stłumiony wyjątek specyfikacja języka java definiuje mechanizm try with resources znacząco upraszcza korzystanie bibliotek inicjalizacji pozostawiać zasoby nieokreślonym stanie dla definiować blok finally zasoby odpowiednio zamykane powodowało produkcję identycznego kodu a dodatkowe zagnieżdżenia bloków try finally finally z pomocą przyszło try with resources wyjściu bloku try catch uruchamia implementacje metody close interfejsu autocloseable niejako ukrytym bloku finally jak javą bywa możemy spodziewać jakiejś magii kompilatora miejsce zmian poziomie wirtualnej maszyny najlepiej zobrazuje przykład przedstawiający metodę napisaną javie a następnie poddaną procesowi kompilacji dekompilacji rys kod przykładowej metody wykorzystującej mechanizm try with resources rys kod metody rys poddany procesowi kompilacji dekompilacji jak widzimy efekt finalny znacząco różni faktycznie deweloper zakodził spróbujmy rozczytać właściwie dzieje pierwszą rzeczą rzuca oczy dodatkowo zagnieżdżony blok try catch finally ale zanim przejdziemy zaczniemy góry pierwsze linijki zawierają kod zawarliśmy inicjalizacji bloku raczej logiczne gdzieś wykonać zastanawia deklaracja zmiennej var2 stanowić tymczasowy kubełek dodatkowy wyjątek zostać rzucony trakcie wykonywania naszych operacji deklarowany blokiem try abyśmy mieli dostęp następujących blokach catch finally przejdźmy dalej faktycznego wywołania naszego kodu jeśli zostanie rzucony jakikolwiek wyjątek wykonywaniu trafiamy jedynego bloku catch cała logika opiera zapisaniu naszej lokalnej zmiennej var2 rzuceniu ponownie gdy sterowanie przejdzie dalej bloku finally zanim wykona metoda close nastąpi sprawdzenie normalne wykonanie poszło jakiś wyjątek został rzucony sprawdzając istnienie zmiennej var2 zgodnie prawem murphiego jeżeli udać uda musimy zabezpieczyć sytuacją metoda close rzuci wyjątkiem powstaje problem rzucenia wyjątkiem przypadku jakiś rzucony został w takiej sytuacji wyjątek close usuwany wraz ramką przypadku opisywanym wcześniej a podpinany suppressed następne kroki wykonania same opisywanym wyżej mechanizmie ktoś mógłby zapytać odpowiedź prosta powyższym podejściu ginie wszystkie informacje wyjątkach pozostają zachowane a przezroczyste dewelopera dlaczego wprowadzić czegoś podobnego klasycznego bloku try catch finally tutaj sprawa taka oczywista mimo wymagałoby zmiany poziomie kompilatora wprowadzało nieścisłości ten kod skompilowany javę działałby inaczej zbudowany pomocą kompilatora javy a mogłoby prowadzić problemów migracją mówiąc pułapce nieświadomych programistów koszt obliczeniowy wyjątków z punktu widzenia wydajności przejście normalna rzucania wyjątków kosztuje wejście wyjście bloku try związane operacją wirtualnej maszyny sytuacja zmienia momencie pojawienia wyjątku przeszukanie tablicy jakoś specjalnie kosztowne znajduje zwykle kilka rekordów koszt skoku odpowiedniej instrukcji pomijalny czy możemy rzucać wyjątkami woli przejmując narzutem obliczeniowym i sam mechanizm kosztuje zbyt wiele wyjątek należy stworzyć kosztuje prześledźmy znikają cykle procesora za każdym razem tworzymy wyjątek stosu wywołań stack trace zostać wypełniony zrobić wirtualna maszyna przejść każdej ramce znajdującej stosie wywołań pobrać wskaźnik obecnie wywoływaną instrukcję dopasować linijkę kodu java instrukcji pomocą zbudować niemutowany rekord tabeli stosu wywołań jest sporo roboty ilość bezpośrednio zależna rozmiaru stosu wywołań ile znaczy sporo aleksey shipilëv przeprowadził dokładne pomiary którymi polecam zapoznać literatura należy najlżejszych moim zdaniem warto wynika rzucenie nowo utworzonym wyjątkiem między a razy wolniejsze wybranie pomocą if else z powodu powstały rozwiązania re używanie obiektu wyjątku znacząco redukują problem rozwiązują całości co dają dane powszechnie powtarza wyjątki powinny używane sytuacjach wyjątkowych czasami ciężko określić sytuacja naprawdę wyjątkowa teraz pewną receptę dana sytuacja występuje częściej przypadków sytuacją wyjątkową i oto dobrnęliśmy końca dla wytrwali zdradzę dzięki wiedzy przedstawionej artykule udało zagiąć niejednego weryfikatora technicznego efektywnie wynegocjować większą pensję więc zastanawiacie czego wiedza przydać chociaż adnotacje w przypadku obiektów kopiowane referencje specyfikacja jvm definiuje stos bitowy mniej radzić bitowymi adresami pamięci większość obecnych implementacji używa bitowego stosu mimo metoda deklaruje przyjmuje parametrów kopiowana wartość referencji this ciągle pozostaje metoda wirtualną taka operacja zaszłaby przypadku metodą statyczną tak naprawdę rejestr trzymający index obecnie wywoływanej operacji oprócz wyjątkowych sytuacji aplikacja byłaby odratowania od javy wcześniej używał niezbyt eleganckiej operacji no chyba mieliśmy zagnieżdżony blok finally innym bloku try catch gdyby nikt jvm korzystał podstawą wielu instrukcji począwszy if else można wyłączyć flagą jvm wysoce niezalecane efektywnie tracone informacje niezbędne próbie debugowania shipilev net jakiś czas just geek it opisałem migracje systemów informatycznych opartych net czysto technicznego punktu widzenia dzisiaj opiszę proces punktu widzenia biznesu technologii mam nadzieję was ciekawe piotr czech konsultant firmie vlog wspiera rozwój oprogramowania klientów budował systemy oparte rodo mobilne systemy telemetryczne zbierające przetwarzający dane kierowcach celu obniżenia ubezpieczeń między zadaniami poprawianie bugów entuzjasta podejść architektonicznych systemach budowania wydajnych rozwiązań opartych platformę net poprzez eksplorację nowych technik uczenie innych gonienie przykładają kodu cel migracji celem całej migracji podniesienie bezpieczeństwa systemów informatycznych danych przetwarza klient jednym aspektów podniesienie wersji usług korzysta baz danych rozwiązania wykorzystywane stronie interfejsu użytkownika trzeba zapewnić ciągłość wsparcia produktów korzysta zweryfikować systemy kątem bezpieczeństwa mysz prześlizgnęła sama migracja spowodowała cała praca wytwórcza musiała zostać wstrzymana tygodni patrząc pryzmat całego działu it koszty takiego przedsięwzięcia ogromne zatem mieć powód zrobić w związku obowiązującym rodo faktem należymy grupy znajduje instytucja finansowa bezwzględnie zapewnić bezpieczeństwo systemów wyzwania technologiczne wyzwaniem integracja systemów między sobą zmiana jednego systemu wpływała systemy korzystały przy okazji nastąpiła eliminacja rozwiązań wspieranych klienta przepisanie konfiguracji części systemach odpowiadają logowanie zdarzeń inicjalizacji samego systemu innym aspektem migracji ulepszenie automatyzacji procesów dostarczania rozwiązań sprawdzania kątem bezpieczeństwa wydajności standardów tworzenia obowiązujących firmie dzięki powstał system automatycznie dostarcza paczki nuget owe lokalnych firmowych repozytoriów razem wsparciem wszelkiego rodzaju serwerów nuget owych automatycznie tworzy wdraża usługi windows owe obecną chwilę istnieje taka możliwość strony rozwiązań opartych silnik net core podczas ciągłej integracji ang continuous integration sprawdza kod kątem luk bezpieczeństwa standardów tworzenia kodu wydajności pomocą analizatorów upraszcza zarządzanie solucjami został przygotowany panel sterowania zdefiniowane wersje paczek flagi sterowania procesami ustawienia stricte przygotowane dynamiczne zarządzanie solucjami potrzeby uruchamiania visual studio maszynie znajduje silnik net core wykonać potrzebne zmiany wykorzystuje format tworzenia współdzielonych bibliotek oparciu standard architektury net core sdk dzięki czemu integracja projektami tworzymy firmie szybka bezbolesna samo aktualizacja zależności wielu projektach w firmie działają systemy należących mojego zespołu szkielet takiego systemu opisałem artykule migracja projektów net praktyce moje subiektywne spostrzeżenia związane procesem migracji częsta komunikacja uderzanie problemu chcesz wysłać email a adresat siedzi metrów ciebie podejdź zagadaj nieważne należy innego zespołu dzięki usuwamy bariery dochodzi pyskówek przerzucania winy drugą stronę barykady ewentualnie zastosować wojskową zasadę pisania maili znaną skrótem bluf ang bottom line up front używasz scrum a rozszerz daily scrum międzyzespołowe daily scrum poza zwykłymi ds ami wyjątkowo ds y między zespołowe wyglądają samo zespołowe celem wymiana wiedzy problemów dalszej działania dzięki czemu departament wiemy jesteśmy zmierzamy wykonaj minimum pracy zrób najlepiej migrujesz projekt dobrze pamiętaj wykonywać refaktoringu kodu takiej potrzeby stracisz czas jest rzecz posprzątaj okolice zmieniasz daną część systemu oznacza tyle zmieniasz konfiguracje sprawdź przypadkiem kapitule zdefiniowanych aktualnych wzorców postępowania dzięki będziesz musiał wracać projektu sprzątanie kimś nadwyraz denerwujące między zespołami mieć różne zdania zespół jako zespół podjęliśmy decyzję idziemy którą stworzyłem wprowadzimy nowy system zarządzania projektami zespół zaufał dzięki takiej decyzji zmigrowaliśmy wszystkie systemy podległe musieliśmy aktualnych standardów firmie profit szkielet systemów wszędzie zespół możemy wykonywać masowe aktualizacje naszych projektów obawy pójdzie dzięki przewidywalne zachowanie każdej usługi teoria sterowania problem zespole ważniejszy między zespołowy każdy zespół zadania wykonania któryś członek zespołu problem najpierw pomagamy nieważne inni proszą twój czas pomagasz innym swoją zespołową pracę masz skończoną nie obrażaj były dni dostawałem informacje komuś podoba decyzja którą podjąłem nie oceniam słusznie ważne zrażać ilość możliwych pójść ogromna a jesteśmy przecież ludźmi samo wprowadzanie standardów powoduje inni muszą oduczyć swoich nawyków a proste przyjemne p biurokracje formalizmy ten punkt mocno wiążę pierwszym punktem wszyscy muszą wiedzieć nie potrzeby wprowadzać szumu informacyjnego należycie wykonać swoją pracę bazując wiedzy osób najlepiej znających dany temat jeśli wykonujesz jakąś czynność dwukrotnie zautomatyzuj menedżer usłyszy wprowadziłem kolejny automat zalewa zimny pot znaczy kolejny automagiczny system robi czym inni programiści pojęcia działa z czasem podejście opłaca ilość zaoszczędzonego czasu nieproporcjonalnie większa przeszukiwanie dokumentacji a zrobić klepanie n same komendy jak przychodziłem klienta pierwszy ilość niepisanych zasad przytłaczająca wyglądałam dziecko mgle definiujesz zestaw reguł samym automacie osoba użyje znać systemu kliknąć buduj a magicznie wdrożył cały system zaczął pracę z czasem nauczy działa nie wykonuj ustaleń znajdziesz wydajniejszy korzystniejszy wykonanie pracy każdy omylny podejmuje decyzje według posiadanej wiedzy informacji nie prawdy objawionej widzisz decyzja kogoś góry nietrafna traktujesz opinie więcej czasu stracisz przekonywanie pracę nieefektywnym podejściu faktyczne dowiezienie rozwiązania nie proś zgodę wybaczenie ten punkt mocno wiążę poprzednim praca zostać wykonana politykę zatem zostaw ludziom chcą bawić pytanie bardziej szkodliwe firmy słuchanie zadawanie pytań szukanie przychylności osoby wykonanie pracy najlepiej potrafisz zawracania kijem wisły pierwszy wygrywa ktoś rozwiązał problem zbudował rozwiązanie rozwiązuje część twoich problemów dostosuj niżeli wynajduj koło nowo zawracaj kijem wisłę masz pewność osoby przeciwko tobie część niepewna jesteś pewny masz racje pokazuj edukuj ewangelizuj eksperymentuj tak naprawdę cały system pokazałem klienta moim autorskim rozwiązaniem testami swoich systemach produkcyjnie wprowadziłem patrząc pryzmat tygodni pracy stoma systemami dalej mogę powiedzieć udany eksperyment nie bądź wąskim gardłem dlaczego trochę systemów nie byłem stanie przekazać wystarczająco szybko całej potrzebnej wiedzy wszystkim zespołom szybciej napisać artykuł tłumaczyć każdemu osobna innym aspektem ktoś przeczytał pain driven development nie lubię wykonywać monotonnej pracy automatyzuje czasami specyfika zadania wymaga grzebania szambie im bardziej ciebie wywiera wpływ bardziej wracasz korzeni podstaw programowania dobrych praktyk zaciskasz zęby pchasz wózek siebie momentu przestaniesz czuć ból a błogi spokój ukojenie staram wykonywać pracę nikt zrobić wiem przyniesie największy wkład rozwój firmy każdej osoby pracuje nie przywiązuj swojej roli obowiązków osobiście uważam idiotyzm przywiązywanie swojej roli obowiązków oznaczałoby ograniczam kiedy kimś innym programistą przejmuję zadania lidera naszego zespołu testerów analityków zespół działa całość różnicy kogoś brakuje reszta zespołu przejmuje obowiązki dlatego nierzadko zdarza analitycy przyjmują rolę testerów programiści analitycy rolę lidera a testerzy wspomagają analityków swojej pracy wykonuj egzekucje maklerzy wall street każdą inwestycje nazywają egzekucją prawie natomiast nazwać sprawiedliwością pizona oznacza tyle odwrotu podjętej decyzji kiedy decyzja została podjęta sensu rozwodzić martwić stanie iść przodu czas pokaże dana decyzja wpłynie sytuację czarnych scenariuszy wydarzy przejmować atakuj problem a ludzi deadliny powodują nerwy a nerwy powodują wyżywamy innych wyobrażamy sytuacji prawdopodobnie wydarzą paradoksalnie więcej stresu bardziej jesteśmy odporniejsi czasem wygrana przegrana robi większej różnicy kolejny epizod naszym dlatego warto wyżywać współpracownikach powodu narastających problemów problemy wkrótce znikną a ludźmi będziesz widywać codziennie jasno ustalaj podział prac poinformuj fakcie zmieniasz część systemu przynależy twojego zespołu pobieżnie działa poinformuj właścicieli fakcie zostaw kod zaakceptowali ich odpowiedzialnością wprowadzenie poprawki blokuje twój proces integracji usługą zdarzyła sytuacja zespół korzystający naszego rozwiązania poinformował wykonaniu pełnej migracji dowiedzieliśmy dni końcem ostatniego szóstego sprintu moment oddania systemów testów uat migracja wycinka systemu przypisana tamtego zespołu względu odpowiedzialność system należała dwóch zespołów a system uznawany całość podzielenia części migracja systemu wykonana sprinty wcześniej uśmiechaj szukaj pozytywów patrząc pryzmat całego przejmować nieważne nisko upadniesz warto zreflektować poszukać dana sytuacja nauczyła jak drzwiami oknem a oknem wykorzystaj buldożer moje subiektywne spostrzeżenia chodzi net samą migrację stwórz listę używanych technologii paczek nuget owych rozwiązanie microsoft build centralpackageversions pozwala zdefiniowanie listy paczek wykorzystujemy projektach zmiana pliku packages props podmienia wersje wszystkich projektach korzystających tak buduj współdzielone biblioteki zmiany najmniej inwazyjne wprowadzały piekła dll ek chodzi budować współdzielone biblioteki wraz wsteczną kompatybilnością najlepiej utrzymywać niezmienioną wartość assemblyversion eliminuje potrzebę przekierowywania paczek wersje biblioteki plikach app config web config powoduje mniej nerwów zmianach projektach jak migrujesz aplikacje winforms wpf xbap nowy format przygotuj napisanie własnego systemu wdrażania aplikacji co mówić obecną chwilę wszystkie rozwiązania wspiera pełni silnik net core chcesz migrować zwykłymi bibliotekami przygotuj napisanie swoich własnych rozwiązania wdrożenia takiej aplikacji ostrożnie redukowaniem długu technologicznego upiększaniem kodu wszystkiego rodzaju automaty upiększania kodu fajną rzeczą umiarem osobiście zdarza zagalopuje zmienię inni cierpią nuget owe repozytoria oparte foldery zamiast serwerów zbyt duże uprawnienia zło czystej postaci pewnego dnia podczas zwykłej pracy deweloperów zgłasza działa nuget org oho znowu azure padł myślę zaraz zgłasza drugi samym problemem no klapa pracą myślę okazało deweloperów wszedł dysk znajdują paczki nuget owe otworzył jedną windows uznał zablokuje paczkę wszystkie podległe co nuget zablokował procesy budujące maszyny developerskie skrypty budujące dopiskiem all system odroczoną karą czekasz godziny opublikowanie całego systemu przetestować mały wycinek rozwiązania ktoś nagle wrzuca drobną zmianę wysypuje cały proces najlepiej zdarzy piątek wyjściem pracy najlepiej publikować system partiami wysypie dana część systemu ponowna publikacja danego wycinka zajmuje mniej minut rollback jednego podsystemu mniej kosztowny rollback całego rozwiązania część wskazówek wydawać wyraz niestosowna niekorporacyjna innego rodzaju niepoprawna politycznie patrząc pryzmat jakimi osobami wolę otaczać zespoły członkowie boją mówić problemach stawiają swoim bawią dzięki rozwija nudno najważniejsze nikt daje wejść głowę a tymczasem następnego elixir przedstawiany następca ruby ego m in lepiej obsługuje współbieżność z drugiej strony rynku zbyt mało developerów znających elixira technologia stała częściej wykorzystywana biznes mimo zarówno ruby elixir cieszą sporym zainteresowaniem postanowiliśmy poprosić senior developerów opowiedzieli swoich wrażeniach używania dwóch języków razem netguru przygotowaliśmy pytania odpowiedzieli bartosz pranczke ror department manager netguru firmie oferującej usługi zakresu doradztwa tworzenia oprogramowania product designu odpowiada zarządzanie działem ruby rails elixir pracując jakość dostarczanych klientom usług szła parze profesjonalnym rozwojem komfortem pracy developerów paweł ruby developer siedmioletnim doświadczeniem komercyjnym obecnie team leader boostcom zespole odpowiedzialnym przetwarzanie danych w elixirze pisze głównie godzinach oprócz gra curling michał buszkiewicz programista aplikacji internetowych ruby elixir prograils com szczególnym zamiłowaniem zaglądania mało znane zakamarki stosowanych języków przekazywania wiedzy chętnym wejścia programowania po godzinach odreagowuje fotografowaniem graniem gitarze pytanie czym ruby różni elixira odpowiada bartosz pranczke engineering manager netguru główną różnicą paradygmaty programowania języki wspierają ruby język obiektowy elixir natomiast język funkcyjny jest fundamentalna różnica wymaga innego sposobu myślenia podczas programowania kolejną istotną różnicą uruchomieniowe elixir wykonywany erlang vm pozwala zupełnie model wykonywania programu wpływa pisze programy wykorzystujące więcej procesor naraz odpowiada paweł team leader boostcom ruby elixir zupełnie różne języki pierwszy ogólnego przeznaczenia nastawieniem programowanie obiektowe elixir natomiast zbudowany maszynie wirtualnej erlanga wszystkim actor model współbieżność odpowiada michał buszkiewicz ruby rails developer prograils com są języki dwóch różnych aczkolwiek przenikających najodpowiedniejszą odpowiedzią byłoby wszystkim fundamentalna różnica zaczyna samej idei przyświecającej twórcom przypadku ruby każdym kroku podkreśla zoptymalizowany kątem radości programowania akceptuje fakt pewne zastosowane rozwiązania stawać szranki językami czołówki rankingów wydajności elixir natomiast swego rodzaju nadbudowa język erlang dziedziczy nastawienie programowanie aplikacji wysokiej niezawodności długotrwale przetwarzających dane wielowątkowy paradygmaty języków funkcyjny elixir obiektowy ruby natury całkiem odmienne pewnym sensie służą realizacji wspomnianych nadrzędnych idei którymi podążają ruby ułatwia osiągnięcie wysokiej produktywności programowania dzięki swojej niepodrabialnej interpretacji programowania obiektowego elixir zapewnia platformę tworzenia niezawodnych aplikacji promując paradygmat funkcyjny mechanizmy współbieżności oparte modelu aktorów pytanie co ruby elixir sobą wspólnego odpowiada bartosz pranczke engineering manager netguru nieco mniej technichnicznie odpowiadając języki trochę kuzyni jeśli zadamy pytanie mógłby wyglądać ruby wykorzystuje maszynę wirtualną erlanga wraz wszystkimi możliwościami wyszedłby pewnie elixir wiele narzędzi znanych rubiego bezpośredni odpowiednik elixira pry ruby iex pry elixirze bundler mix itd autorem elixira josé valim aktywnie działał rozwoju ekosystemu rubiego spodziewać większość dobrego ruby inspiracją tworzeniu języka narzędzi elixirze odpowiada paweł team leader boostcom przede wszystkim składnię od początku składnia elixira miała przypominać ruby uznawana wielu przyjazna programisty jose valim twórca elixira wiele programistą ruby poza oba języki cieszą zainteresowaniem podobnych w obu wypadkach koncentrację web developmencie zdecydowaną dominację jednego frameworka kwestii odpowiada michał buszkiewicz ruby rails developer prograils com czasem tłumaczę mówiąc elixir język gramatyką erlanga ortografią ruby duże uproszczenie uwagi wieloletnie związki twórców języka elixir społecznością ruby pokusić podobieństwo najbardziej zachęca programistów ruby zainteresowania językiem elixir pewnością ułatwia stawianie pierwszych kroków przyzwyczajenia dotyczące architektury aplikacji należy odłożyć bok powierzchowne podobieństwo składni nazewnictwa bibliotece standardowej pomaga czuć bardziej domu na pewno oba języki charakteryzuje wysoka elastyczność dzięki rozbudowanym mechanizmom metaprogramowania autorzy bibliotek aplikacji chętnie korzystają tworzyć mini języki dsl domain specific languages służące deklaratywnemu czytelnemu opisowi zachowania pewnego elementu aplikacji pytanie w czym ruby lepszy elixira w jakich przypadkach sprawdzi lepiej odpowiada bartosz pranczke engineering manager netguru przewagą rubiego wielkość ekosystemu bez problemu znajdziemy biblioteki wspomogą rozwiązaniu najczęstszych problemów znacznie bardziej egzotycznych no wszystkim ruby rails dalej pewnie framework szybciej więcej gotowych klocków utartych szlaków zbudujemy większość typowych aplikacji webowych odpowiada paweł team leader boostcom jeśli ktoś przyzwyczajony programowania obiektowego bazującego klasach ruby naturalnym wyborem z pewnością mocną przewagą znacznie większy ekosystem przyznać elixir zapełnia różnicę szybko ruby wykorzystałbym wszelkiej maści skryptów deploymenty backupy wiele narzędzi ekosystemu ruby cechuje niezwykłą wręcz stabilnością sidekiq warto rozważyć istotny czynnik odpowiada michał buszkiewicz ruby rails developer prograils com chcąc porównywać same języki trudno użyć całkiem obiektywnych kryteriów skupię subiektywnych moim odczuciu języka wcielenie jakiejś koncepcji najczęściej charakterze proceduralnym a efekt czytelniejszy bardziej zrozumiały ruby biblioteka standardowa zastosowane konwencje nazewnicze powodują czytając napisany kod przetwarzamy myślowo niczym język naturalny to wraz elastycznością osiągniętą dzięki rozbudowanym możliwościom metaprogramowania dużej mierze przyczyniło sukcesu czerpiących zalet bibliotek ruby rails czele ostatecznie oceniając ruby język cały ekosystem ruby dojrzały szeroko zaadaptowany praktyczne zastosowania języka aplikacjami internetowymi rozpowszechnione języku python istotną zaletą bywa fakt wiele serwisów wystawiających api udostępnia konsumujące biblioteki ruby znaleźć gotową bibliotekę elixir trzeba przyznać elixira dawna pustynią wiele problemów sprawdzone de facto standardowe rozwiązania pytanie do czego lepiej wykorzystać elixira odpowiada bartosz pranczke engineering manager netguru elixir obiektywną przewagę wszędzie potrzebujemy ponadprzeciętnej niezawodności wydajności erlang technologią stosowaną obsługi systemów telekomunikacyjnych działają nieprzerwanie lata jest sprawdzone boju rozwiązanie obsługi tysięcy połączeń czasie odpowiada paweł team leader boostcom z uwagi koncentrację współbieżności elixir nada wymagana klasycznym przykładem aplikacje korzystające persystentnych połączeń web socketów ruby radzi najwyżej a właściwie należałoby powiedzieć słabo elixir natomiast potrafi większego nakładu pracy utrzymać dziesiątki setki tysięcy połączeń elixir sprawdzi pisaniu własnych narzędzi korzystających współbieżności przykład scraperów ma przejęty erlanga fantastyczny system supervisorów pomagają zarządzać pulą procesów wykonujących jakąś pracę często wymienianą cechą elixira a właściwie phoenixa zwraca odpowiedzi mikrosekundach to prawda dla railsów kompletnie nieosiągalne jeśli dana aplikacja potrzebuje czasów warto rzucić okiem elixira odpowiada michał buszkiewicz ruby rails developer prograils com jeśli myślenie naszej aplikacji zaczyna wykraczać zamknięte ramy cyklu odpowiedź http powinniśmy poważnie zainteresować zaoferować elixir mechanizmy programowania współbieżnego ruby upośledzone wiem stanie znaleźć słowo tam liczy wysoka przepustowość czas odpowiedzi elixir zdecydowanie lepszym rozwiązaniem to oczywiście kwestia początku istotna przewidujemy aplikacja przyszłości wymagać wysokiej skalowalności warto rozważyć zastosowanie elixir promując paradygmat funkcyjny wymusza programiście utrzymywanie pewnego rygoru czystości kodu prowadzi powstaje mniejszym tempie praktycznie dzięki lepiej przemyślany jeżeli utrzymywanie takiego rygoru jesteśmy stanie pozwolić pewnością wybór języka zaprocentuje pytanie jakie napotykasz największe problemy związane wykorzystaniem ruby ego odpowiada bartosz pranczke engineering manager netguru najczęściej wymienianym problemem rubiego wydajność o obiektywnie powiedzieć rozwiązania bardziej wydajne ciężej określeniem faktycznie problem aplikacji dobrym kontrprzykładem platforma shopify napisana ror obsługuje czasie black friday tysięcy zamówień minutę pewnie kilkaset razy więcej samych zapytań problemem najczęściej spotykam fakt najbardziej zalecane twórców ror podejście rails way powodować problemy rosnącej aplikacji nie dobre podejście czasami powoduje aplikacje pisane nieco mniej doświadczonych programistów podążają rails way kończą trudne utrzymania odpowiada paweł team leader boostcom większość pewnie najchętniej zacytowała popularną opinię ruby wolny to prawda webowym naprawdę większego znaczenia obecnie największe problemy utrzymanie dużych projektów jeśli rozwijamy nieostrożnie wpaść pułapkę doprowadzającą posiadania niezrozumiałego kodu wykładał mało oczekiwanych momentach niestety wiele standardowych metod robienia rzeczy ruby pomaga pisaniu projektów odpornych starzenie a bywa oporne adoptowaniu nowych lepiej przemyślanych rozwiązań wciąż powstają odpowiada michał buszkiewicz ruby rails developer prograils com przewrotnie stwierdzę największym problemem języka największe zalety rękach kiepskich programistów przykładowo ruby każdą istniejącą klasę możemy otworzyć modyfikacji dopisać nową metodę zmodyfikować istniejącą monkey patching to bywa przydatne sytuacjach jakiegoś powodu musimy lekko zmodyfikować zachowanie któregoś używanych gemów wykonanie programistę końca robi bywa nieoczekiwanych rezultatów skrajnej frustracji bolączką ruby programowanie współbieżne racji obecnego mechanizmu global interpreter lock wielowątkowość staje niemal bezużyteczna obchodzi stosując potrzeby osobne procesy poziomie systemu operacyjnego mechanizmem kosztownym mało wydajnym niedawno miałem czynienia koniecznością zrównoleglenia skomplikowanego skryptu ruby wyrwałem trochę włosów głowy odkrywając drodze kilka powodujących błędy segmentation fault bugów rubym stosowanych gemach zdecydowanie polecam pytanie jakie napotykasz największe problemy związane wykorzystaniem elixira odpowiada bartosz pranczke engineering manager netguru elixir nadal technologia niszowa powoduje stosunkowo mały ekosystem znacznie częściej samemu pisać rozwiązania innych technologiach dostępne postaci bibliotek problemem prostu fakt większość programistów uczy programować językach obiektowych czasem przekłada pewne problemy zmianie paradygmatu nie pomaga fakt uczelniach zwykle jedynym językiem funkcyjnym uczy prolog jest język kogoś początkującym etapie kariery raczej wydaje ciekawy rozwiązaniem realne problemy może ogólnie nastawiać języków funkcyjnych odpowiada paweł team leader boostcom głównym problemem widzę próba pisania elixirze takim nowym lepszym ruby ponieważ języki cechują zupełnie paradygmaty wyjść taki kod wydajny odporny błędy jest pewna pułapka którą język nieświadomie zastawił poprzez posiadanie podobnej składni największym moim zdaniem problemem posługiwać elixirem należałoby najpierw zapomnieć ruby nauczyć erlanga prostym zadaniem odpowiada michał buszkiewicz ruby rails developer prograils com elixir moim odczuciu trudniejszy debugowaniu ruby dostępne dzień dzisiejszy narzędzia stosunku dzień używamy ruby ograniczone niezbyt intuicyjne sprawę utrudnia dodatkowo mechanizm makr jednocześnie czyni język niesamowicie elastycznym a zarazem kompletnym wrzodem chodzi analizę występujących problemów osobiście odczuwam problemu przeskakiwaniem między paradygmatem obiektowym a funkcyjnym obu poruszam swobodnie staram naprawdę stosować podobne dobre praktyki myślenia dała prezentacja solid elixir georgina mcfadyen elixirconf eu paradoksalnie pewną irytację sprawia czasem ortograficzne podobieństwo języków czai mnóstwo fałszywych przyjaciół pytanie czy dostrzegasz różnice utrzymania dużej aplikacji ruby m a elixirze jakie odpowiada bartosz pranczke engineering manager netguru ciężko mówić obiektywnych różnicach utrzymania dużej aplikacji zasługa programistów pracujących a technologii obie technologie wspierają wszystkie potrzebne mechanizmy móc zarządzać dużą aplikacją obie wymuszają stosowania odpowiada michał buszkiewicz ruby rails developer prograils com zgodzę opinią naprawdę utrzymania napisanej aplikacji ruby taka utrzymania napisanej aplikacji którą stoi elixir promowane charakter języków praktyki programistyczne tendencję prowadzenia rozwiązań różnym charakterze aplikacje ruby rails rosną czasem ogromnych rozmiarów monolity stając kolosami glinianych nogach charakter języka elixir powoduje szybciej zaczynamy myśleć architekturach opartych mikroserwisach grunt przemyślany projekt pytanie jak oceniasz społeczność ruby ego elixira czy uważasz któraś bardziej przyjazna pomocna odpowiada bartosz pranczke engineering manager netguru w dużym stopniu społeczności przenikają myślę duża część programistów elixira programowała dalej programuje ruby w przypadku obu technologii twórcy należą sympatycznych osób wpływa poziom kultury społeczności powiązanych tymi technologiami odpowiada paweł team leader boostcom obie społeczności fantastyczne główna różnica taka społeczność ruby większa a wzrostem liczby ludzi idzie pojawianie toksycznych jednostek ludzie potrafią zapytać pomoc itp mniejsze społeczności odbierać przyjaźniejsze fanem obu odpowiada michał buszkiewicz ruby rails developer prograils com społeczność ruby istnieje wiele dłużej traktować zarówno zaletę wadę czasem wręcz zbyt znaleźć nieaktualną odpowiedź jakieś pytanie pochodzącą załóżmy w społeczności ruby wydaje znaczny udział osób nieposiadających wykształcenia informatycznego posiedli fach samodzielnie pomocą kursów licznych społeczności warsztatów studia dać atut postaci szerszego spojrzenia informatykę programowanie zwolennikiem otwartości zawodu znam wielu programistów przechodzących innych branż elixir posiada prawdopodobnie wyższy próg wejścia względu bardziej wymagający paradygmat niemniej da ostatnio zaobserwować inicjatywy mające celu upowszechnianie pytanie a zadajemy pytanie powinno brzmieć czy czas web developerzy znali zarówno ruby ego elixira odpowiada bartosz pranczke engineering manager netguru na rynku dostępne ciekawych technologii na pewno warto aktywnie rozszerzać wachlarz swoich umiejętności np znajomość elixira koncepcji programowania funkcyjnego wpłynie jakiej jakości kod piszemy ruby nauczy pomocne maksymalne ograniczenie zmienności obiektów ang immutable objects vice versa odpowiada paweł team leader boostcom to dopiero zadane pytanie oczywiście dobry czas nauczyć kolejnego języka nie wyobrażam sytuacji miało zaszkodzić nowy język trochę punkt widzenia pozwala spojrzeć pewne rzeczy innej perspektywy na przykład społeczność tworząca obecnie serię narzędzi dry rb czerpie c javy ruby odcinał poznanie elixira zdecydowanie zmieniło patrzenia kod tworzenia aplikacji zaczęło brakować pattern matchingu stworzyłem bibliotekę ruby inaczej spojrzałem pewne aspekty tworzenia aplikacji webowych szczególnie organizacji kodu odpowiada michał buszkiewicz ruby rails developer prograils com jeśli spojrzymy gigantów it znajdziemy serwisu napisanego wyłącznie użyciem jednego języka programowania przykłady choćby czas web developerzy uczyli nowych koncepcji paradygmatów okazuje wyjątkowo ponadczasowe znajomość niesamowicie ułatwia naukę nowych języków w przeciągu ostatnich dropbox urósł miana jednej najbardziej popularnych aplikacji desktopowych liczy milionów użytkowników zatrudnia osób zapewnia wirtualną przestrzeń dyskową pozwalającą wysyłanie pobieranie danych składa miliona linii kodu dziennie przetwarza miliardów plików wspiera języków programowania a kompatybilna takimi platformami windows macos niektóre dystrybucje linux pomysł dropboxa narodził letni drew houston chcąc popracować swoich planów biznes podczas godzinnej jazdy autobusem zdał sprawę zapomniał usb wszystkimi potrzebnymi plikami domu tym sposobem wpadł pomysł utworzenia zdalnej przestrzeni dyskowej użytkownicy mogliby korzystać każdego miejsca w przeciągu zaledwie dwóch tygodni houston zbudowany prototyp wybraną nazwę projektu dwa miesiące później y combinator znany sponsor nowych startupów wyraził zainteresowanie pomysłem houstona mimo momencie houston zaczął pracę dropboxem rynku istniało wiele innych firm oferujących podobną usługę dropboxowi udało wybić wszystkie zdobyć tysięcy użytkowników przeciągu zaledwie dni jego sekretem presja marketing niezwykła prostota interfejsu a zastosowanie zwanych growth hacks niemalże bezkosztowych sposobów pozyskanie klientów przykład możliwość polecania aplikacji znajomym po migracja pythona aplikacja dropboxa początkowo działała większości pythonie gdy czasem użytku zostały włączone typescript html rust objective c c setup py stał niezwykle obszerny poplątany ciężki utrzymaniu funkcjonalność dropboxa mogła zostać ulepszona pomocą pythona niósł sobą wiele gwałtownych innowacji wprowadził między innymi adnotacje typów pozwalające korzystać zaawansowanych narzędzi statycznej analizy kodu mypy asyncio bibliotekę pozwalającą pisać asynchroniczny współbieżny kod użyciu składni async await początek wielkiej wędrówki migracja pythona zaczęła podczas corocznego hack week zespół dropboxersów podjął wyzwania mającego celu zdeterminowanie trudna byłaby migracja pythona zespołowi udało wykonać proof of concept logowanie synchronizacja plików odbywały pomocą kodu napisanego python niestety wiele funkcji przestało działać doprowadziło porzucenia projektu następnego podczas hack week kolejny zespół podjął kroki przeprowadzeniu migracji stworzyli m in zautomatyzowane testy mające celu zapobiegać regresowi wywołanego migracją pythona przypadku projekt zostać przyszłości kontynuowany w stało jasne zaadoptowanie nowszej wersji pythona stanowiło istotny krok drodze aktualizacji wielu narzędzi programistycznych rozpoczęto zatem wielomiesięczne przedsięwzięcie jakim migracja pythona pythona aby wdrożyć pythona zespół dropboxa zdecydował nową architekturę zamiast powierzać proces ręce freezer skrypt mieli planach zbudowanie punktów wejściowych pomocą narzędzi specyficznych każdej platformy n p visual studio windows dzięki czemu poszczególne punkty wejściowe byłyby kompatybilne każdą platformą dodatkowo zespół dropboxa miałby możliwość wybrania języka programowania narzędzi oznaczało byliby stanie użytkować ides każdej platformy samym wciąż mając możliwość napisania większości aplikacji pythonie ponadto dzięki zwiększonej modulacji architektury dropboxa python python mogły zostać zastosowane jednocześnie stworzyło okazję stopniowe zastąpienie pythona pythonem pierwsze kroki ze względu niekompatybilność bbfreeze pywin32 pythonem pierwszych kroków podjętych zespół całkowite zaprzestanie używania freezer skryptów najpierw musieli użyć zapoczątkować wątki pythona nowej bibliotece libdropbox_bootstrap zamiast korzystania dedykowanego formatu kodu każdego freezer skryptów zostały zastąpione pojedynczym formatem kodu bajtowego następnie wdrożono punkty wejściowe każdej platformy dropbox exe dropbox app dropboxd zostały zbudowane pomocą standardowych toolchainów visual studio xcode make ze względu rozmiar aplikacji dropbox skalę użytkowania proces przejścia pythona pythona musiał odbywać stopniowo aby dokonać dropbox musiał mieć możliwość budowania aplikacji dwóch wersjach pythona równocześnie wiązało m in jednoczesnym przesyłaniem pakietów pythona pythona zawierających bytecode rozszerzenia a wprowadzeniem hybrydy składni obu wersji języka dzięki designowi wprowadzonemu poprzednim kroku wybranie danej wersji języka mogło kontrolowane punktach wejściowych dropbox app utworzono libdropbox_bootstrap ponieważ wybór należało dokonać wczytaniem pythona zespół dropboxa upewnił możliwe byłoby wpływanie pomocą zarówno argumentów wiersza poleceń ustawień odczytanych dysku nowa wersja wchodzi rynek gdy mieli wystarczającą pewność python działa należy zespół dropboxa zaczął wprowadzać rynek najpierw zmiany wdrożono pracowników dropboxa pozwoliło zespołowi zidentyfikowanie poprawienie znacznej części problemów leżących podstaw całego projektu następnie udostępniono zmiany niewielkiej części populacji beta końcu zwiększono zasięg kanał stable w przeciągu miesięcy rozpoczęcia procesu wdrażania nowej wersji aplikacji wszystkie instalacje dropboxa działały pythonie podsumowując proces migracji pythona pythona został rozłożony kilka etapów proces trwał zaczynając wyzwanie podjęte drużynę dropboxersów trakcie corocznego hack week było skomplikowane przedsięwzięcie wielką skalę wymagające integracji obu wersji języka mające celu zwiększenie produktywności developerów uporządkowanie kodu wprowadzenie aktualizacji ważnych zależności a umożliwienie kompatybilności nowymi wersjami toolchains migracja pythona zatem istotnym krokiem utrzymaniu jakości usług dropboxa wysokim poziomie przez ostatnie kilka obszarze aplikacji internetowych możemy zaobserwować spore zróżnicowanie tle narzędzi technologii wprowadzić pewien dysonans zwłaszcza nowych deweloperów wybrać rozwiązania dojrzałe sprawdzone podążać najnowszymi trendami przed takim problemem staje prawie nowy programista back end słyszał php node js spotyka programistów php długoletnim stażem znużonych ciągłym klepaniem kodu samym starym języku pomaga decyzji wyborze rozwiązania robert rachlewicz projektant php unity group absolwent akademii górniczo hutniczej programista letnim doświadczeniem unity group zajmuje backendem spryker specjalizuje projektach e commerce owych miłośnik czystego kodu siatkówki dobrej muzyki na rozwiązanie zdecydować co wybrać tracić czasu nie istnieje jednoznaczna odpowiedź najlepiej wybrać technologię pozwoli pokryć najwięcej potrzeb projektu co przypadku obie technologie stanie zrobić tu zaczyna problem szukamy informacji przeglądamy fora internetowe statystyki czytamy komentarze pytamy znajomych analizujemy udało zebrać w naszym bogatym zasobniku wiedzy jakim internet możemy znaleźć cennych informacji dużą ilość krytyki w krótkim artykule zbierzemy kilka ważnych uwag zastanowimy najistotniejsze doborze odpowiedniej technologii partnerzy przeszłości do początku php javascript traktowano uzupełniających partnerów wspólnie rządzili internetem partnerstwo opierało prostych zasadach javascript obsługiwał kilka szczegółów przeglądarce php zarządzał zadaniami stronie serwera jedyny kolegował bazą danych zazdrość javascript czym zajmuje odpowiada partner doprowadziła powstania node js dzięki któremu wykorzystywany obsługi backend owej od tamtej chwili partnerstwo przestało istotne zrodziło pewnym rodzaju wyścig pozycję lidera względem tworzenia aplikacji od tamtego momentu różnego rodzaju portalach tematycznych forach internetowych grupach facebookowych możemy znaleźć opinie programistów przeważnie niekorzyść php część opinii uzasadniona część porównajmy kilka informacji móc wyciągnąć wnioski czas płynie cyferki zmieniają na początek porównamy kilka podstawowych informacji między obiema technologiami sprawdzając popularność konkurencyjność dane pochodzą obie platformy rozwijane praktycznie wydawane kolejne wersje pełnoletni php aktualnie wydany wersji racji swój wiek posiada więcej open source owych projektów node js długoletnia pełna różnych przykładów dokumentacja php obaj konkurenci posiadają własne wsparcie repozytorium zależności młodszy node js wygrywa ilości dostępnych paczek modułów pobrania odzwierciedlenie faktu widać liczbie gwiazdek serwisie github node js posiada znacznie więcej przeciwnik pod względem wydawniczym twórcy php każdego wydają kolejną wersję zapewniając jednocześnie wsparcie poprzedniej wersji kolejny rok twórcy node js wydają kolejne wersję rok wspierając poprzednie maksymalnie w przypadku licencji znajdziemy dużych różnic zarówno php node js posiadają licencje otwartego oprogramowania należy wspomnieć jednej ważnej informacji porównujemy najnowsze stabilne dostępne wersje kolosalna przewaga ilości modułów dostępnych node js wynika rewolucji jaka powstała dniu wydania była wiele lepsza alternatywa php wersji prostu wolny a szybkością rozwojem działo ciekawego były czasy czekano wydanie php wersji czego doszło potencjalnie znalazło miejsce node js rozpoczęto tworzenie rozwiązań miały zaspokoić potrzeby funkcjonalne zastąpić stare nieefektywne rozwiązania ten czas trwał wydania wersji php poprawiono znacznie wydajność niektóre składowe php zostały zrefaktoryzowane zaimplementowane nowo pierwsze benchmarki php vs node js przedstawiają przewagę php konkurentem polecam porównanie tamtego okresu znaleźć adresem kto odpowiada posiadając podstawową wiedzę historyczną uwzględniając wszelkie dokonane optymalizacje najnowszej wersji php dalej jesteśmy stanie odpowiedzieć pytanie technologii najlepiej pasować naszych potrzeb tak naprawdę każda platform lepsze gorsze cechy specyfiką node js wykorzystywanie pętli zdarzeń javascript tworzenia niezablokowanych aplikacji wejścia wyjścia obsługują wiele jednoczesnych zdarzeń przetwarzanie asynchroniczne javascript pozwala tworzyć wysoce skalowalne rozwiązania stronie serwera maksymalizując wykorzystanie procesora pamięci ta funkcjonalność sprawia node js najlepiej nadaje aplikacji asynchronicznych aplikacji rta aplikacje czasu rzeczywistego spa aplikacje jednostronicowe należy brać uwagę używając node js stronie backend owej cały kod piszemy javascript aplikacja frontowa użyciu odpowiednich frameworków react angular stworzona całkowicie javascript pisanie backendu frontu samym języku znacznie ułatwia prowadzenie projektu prostych przyczyn programista backend programista frontend posługują tymi samymi strukturami danych funkcjami konwencjami językowymi kolejną ważną cechą brak narzucania konwencji node js pozwala programistą wybrać najlepszą architekturę wzorce moduły node js posiada wady działa trybie jednowątkowym opartym zdarzeniach aplikacja przestanie odpowiadać znacznie zwolni przypadku operacji intensywnie wykorzystujących procesor przetwarzania dużych plików dużych ilości danych edycji obrazów ekosystem modułów wciąż niedojrzały trudno ocenić jakość wybranego modułu instalacją aplikacji dzięki publikowania własnych pakietów połączeniu brakiem niezawodnego mechanizmy zatwierdzania modułu oznaczać powinieneś bardziej zwracać uwagę podczas wybierania modułów weryfikować ostatnie aktywności poprawki błędów aktualizacje im młodszy moduł większy potencjał błędy zawarte php wysoce przenośnym rozwiązaniem tworzenia aplikacji uruchomimy praktycznie każdym serwerem linux em posiada dobre wsparcie windows mac os zaprojektowany został głównie pracy sieci zawiera wszystkie potrzebne funkcje zarządzania różnymi bazami danych systemami buforowania pamięci podręcznej takimi memcache redis dzięki kompleksowemu rozwiązaniu stronie php potrzeby zajmowania javascriptem przeglądarce wszystkie elementy strony otrzymamy wygenerowane poziomu serwera jest wada renderowanie odbywa stronie serwera przypadku wzmożonego ruchu doprowadzić znacznego spowolnienia działania strony nie duże ograniczenie użyciu varnish cache możemy znacznie odciążyć serwer regularne serwera dotyczące generowania renderowania stron dobrym rozwiązaniem aplikacji jednostronicowych bogatą funkcjonalnością php posiada utrzymany ekosystem modułów sprawdza rozwiązaniach integracyjnych oparciu kolejki rabbitmq supervisor przestarzały klasyczny model klient serwer każde inicjuje aplikacje a idzie każdym razem połączenie bazą danych pobranie parametrów konfiguracyjnych renderowanie html przez aplikacje oparciu php wolniejsze względem node js złoty istnieje polski rynek pracy wykazuje duże zapotrzebowanie specjalistów branży it z własnych obserwacji wiem znacznie przyjdzie znaleźć specjalistę php specjalistę node js php posiada niski próg wejścia oznacza rynku pracy znajdziemy więcej specjalistów php w przypadku node js próg wyższy wykorzystywania javascript nie specjalista front end wstanie pisać kod stronie back end musimy uwzględnić różnice kosztach zatrudnienia specjalisty przypadku node js koszty większe wynika rosnącego zapotrzebowania ekspertów jak zdążyłeś zauważyć zarówno node js php posiadają dobre złe strony musimy przyjąć istnieje złoty rozwiąże wszystkie problemy znajomość zakresu wymagań funkcjonalnych technicznych podstawowym kryterium określenia architektury naszego projektu dobrze zaprojektowana przemyślana architektura pozwoli odpowiedzieć kluczowych elementów traktujemy wąskie gardło naszej aplikacji po analizie powinniśmy stanie dopasować technologię naszych potrzeb zacznijmy początku czym właściwie python jego twórca guido van rossum definiuje zaawansowany język programowania filozofia designu polega czytelności kodu syntaksie pozwalającym programistom wyrazić dane koncepcje niewielkiej ilości linijek kodu leandro tk software engineer quintoandar inżynier oprogramowania redaktor the renaissance developer autor tekstów programowaniu medium freecodecamp w artykule tk opowiada swoim doświadczeniu pythonem przedstawia strukturę działanie niezwykle przystępny osób początkujących polecamy każdemu zastanawia podjęciem nauki języka poniższy tekst został przetłumaczony zgodą autora pierwszym powodem zacząłem uczyć pythona fakt rzeczywistości piękny język programowania do nauki zachęcało pozwalał kodować wyrażać myśli kolejnym powodem pythona możemy użyć wieloraki nauki danych tworzenia stron internetowych samouczenie maszyn dodatkowo ogromne serwisy quora pinterest spotify używają pythona nadzieję przekonało ciebie poznania języka co warto wiedzieć początku podstawy variables o zmiennych myśleć słowach przechowują jakąś wartość w pythonie zdefiniować zmienną ustawić wartość wyobraź chcesz przechować liczbę zmiennej nazwie zróbmy prawda proste właśnie przypisałeś wartość zmiennej możesz przypisać jakąkolwiek inną wartość jakiejkolwiek innej zmiennej jak widać powyższej tabeli zmienna two przechowuje liczbę a some_number przechowuje poza liczbami możemy użyć booleans true false strings float wiele innych typów danych control flow conditional statements if wyrażeniem używanym ocenienia dany statement prawdą fałszem jeśli prawda zostanie wykonane zostało zawarte statement if na przykład ponieważ większe metoda print zostanie wykonana jeśli wyrażenie if fałszywe zamian zostanie wykonany statement else ponieważ większe kod zawarty statement else został wykonany możesz użyć elif statement looping iterator w pythonie możemy iterować różny w artykule będę mówił dwóch sposobach while for while looping stwierdzenie prawdą kod bloku zostanie wykonany wywoła numery while loop potrzebuje loop condition jeśli pozostanie prawdziwe dalej iterowało w przykładzie num równa loop condition false kolejny kawałek kodu lepiej zrozumieć myśli loop condition true nadal iterować momentu przestawimy false jeśli chodzi for looping musisz zaaplikować zmienną num bloku a for statement przeiteruje ten kod wydrukuje samo while code proste prawda zakres zaczyna elementu dziesiąty element list collection array data structure wyobraź chcesz przechować liczbę zmiennej ale chcesz przechować i czy jakiś przechować wszystkie liczby chcesz milionach zmiennych zgadłeś rozwiązanie listto zbiór zostać użyty przechowywania listy wartości przykład wybrane liczby użyjmy zatem jak widzisz naprawdę proste stworzyliśmy szereg zapisaliśmy przechowania my_integer być zapytasz jak mogę otrzymać jakąś wartość szeregu jest dobre pytanie list zawiera koncepcję zwaną indeksem pierwszy element otrzymuje index zero drugi otrzymuje itd aby uściślić możemy przedstawić szereg element indeksem pozwól narysuję używając syntaksu pythona równie zrozumienia wyobraź chcesz przechowywać liczb a strings przykład listę imion twoich krewnych moja wyglądałaby działa liczby nieźle prawda właśnie nauczyliśmy działają indeksy lists za chwilę pokażę możemy dodać element struktury danych lists najbardziej powszechna metoda dodawania nowych wartości listsnazywa append zobaczmy działa append prosty po prostu musisz zaaplikować element the effective engineer parametr append no wystarczy lists pogadajmy kolejnej strukturze danych dictionary key value data structure teraz wiemy listssą indeksowane liczbami ale chcemy użyć liczby indeks niektóre struktury danych chcemy użyć numeryczne string poświęćmy trochę czasu strukturze danych dictionary zbiorem par key value wygląda klucz indeksem wskazującym wartość jak możemy uzyskać dostęp dictionary value zgadłeś używając key spróbujmy stworzyłem dictionary samym moje imię nickname narodowość te atrybuty dictionary tak uczyliśmy uzyskać dostęp list pomocą indeksu możemy użyć indeksu uzyskać dostęp wartości przechowywanej dictionary w przykładzie wydrukowałem frazę używając wszystkich wartości przechowanych dictionary całkiem proste prawda kolejną fajną rzeczą dictionary możemy użyć wszystkiego chcemy wartość w stworzonym przeze dictionary chcę dodać klucz wiek prawdziwy wiek postaci liczby tu parę key wiek value używając string key liczbę value tak zrobiliśmy lists nauczmy dodawać elementy dictionary klucz wskazujący wartość dużą częścią czym dictionary sprawdza mowa dodawaniu elementów potrzebujemy przypisać wartość klucza dictionary nic skomplikowanego prawda iteration looping through data structures jak nauczyliśmy podstawach pythona iteracja list prosta my developerzy pythona powszechnie używamy for looping dla każdej książki półce wywołujemy metodę print całkiem proste intuicyjne zwyczajnie python dla hash data structure możemy użyć for loop zaaplikujemy key to przykład użyć dla każdego key dictionary możemy użyć print key przypisanej value kolejny zrobić użycie metody iteritems mimo nazwaliśmy powyższe parametry key value potrzebne możemy nazwać chcemy spójrzmy można zobaczyć użyliśmy atrybutów parametr dictionary key działa powinno super klasy obiekty trochę teorii obiekty reprezentacja realnych obiektów samochody psy rowery dzielą główne cechy dane zachowanie samochody dane przykład liczba kół drzwi ilość miejsc siedzących wykazują zachowanie przyspieszyć zatrzymać pokazać paliwa zostało wiele innych w programowaniu object oriented dane identyfikujemy atrybuty a zachowanie metody dane atrybuty zachowanie metody klasa natomiast planem według obiekty tworzone w prawdziwym istnieje wiele obiektów takim samym typie przykład samochody wszystkie podobną konstrukcję wszystkie silnik koła drzwi itd mało identyczne python object oriented programming mode on python język programowania object oriented posiada koncepcje klasę obiekt klasa planem modelem obiektu pomaga zdefiniować atrybuty zachowania mówiliśmy sekcji poświęconej teorii na przykład klasa pojazdów własne atrybuty definiują obiekty pojazdami ilość kół pojemność zbiornika ilość miejsc siedzących maksymalna prędkość przykładowe atrybuty pojazdu mając uwadze spójrzmy syntaks pythona klas klasy definiujemy pomocą class statement tyle proste prawda obiekty elementy klas element kreujemy poprzez nazwanie klas w przykładzie car obiektem klasy vehicle pamiętajmy klasa pojazdów cztery atrybuty ilość kół pojemność zbiornika ilość miejsc siedzących maksymalna prędkość wszystkie atrybuty ustawiliśmy tworząc obiekt pojazd definiujemy naszą klasę otrzymania danych zapoczątkuje używamy metody init nazywaną metodą constructor pozwala zdefiniowanie atrybutów trakcie kreowania obiektów wyobraź podoba tesla model s chcemy stworzyć rodzaju obiekt ma cztery koła działa energię elektryczną pięć miejsc siedzących maksymalną prędkość km h mph stwórzmy zatem obiekt cztery koła elektryczny typ zbiornika pięć siedzeń maksymalna prędkość km h wszystkie atrybuty ustawione ale możemy uzyskać dostęp wartości za pomocą metody znanej zachowanie obiektu zastosujmy powyżej widzicie implementację dwóch metod number_of_wheels set_number_of_wheels nazywamy getter setter pierwszemu zostaje przypisana wartość atrybutu a drugi ustanawia nową wartość atrybutu w pythonie możemy dokonać używając property decorators zdefiniować getters setters przyjrzyjmy tych metod możemy użyć atrybutów jest trochę metody definiujące te metody działają atrybuty na przykład ustawiamy nową liczbę kół ustawiamy wartość number_of_wheels jest napisanie kodu pythonic getter setter możemy użyć metod innych rzeczy przykład metoda make_noise spójrzmy kiedy stosujemy tą metodę produkuje string vrrrruuuum encapsulation hiding information enkapsulacja mechanizm zastrzega bezpośredni dostęp danych metod obiektów jednakże samym ułatwia wykonywanie działań danych metody obiektów cała wewnętrzna reprezentacja obiektu ukryta jedynie obiekt komunikować wewnętrznymi danymi jednak najpierw musimy zrozumieć działają public non public instance variables metody public instance variables dla klasy pythona możemy zainicjować public instance variables zakresie metody constructor przyjrzyjmy w zakresie metody constructor tu możemy zaaplikować wartość first_name argument public instance variable w zakresie klasy w przypadku musimy aplikować first_name argumentu a wszystkie obiekty instancji miały class attribute nauczyliśmy możemy użyć public instance variables class attributes kolejną interesującą rzeczą części public możemy zarządzać wartościami zmiennych co myśli nasz object stanie zarządzać wartością zmiennej get set wartości zmiennych pamiętając klasie person chcemy ustawić kolejną wartość zmiennej first_name jedyne musieliśmy zrobić przestawić wartość kaio first_name instance variable doprowadzi zaktualizowania wartości możemy zrobić public variable non public instance variable nie używamy takiego pojęcia prywatny atrybut naprawdę prywatny pythonie niepotrzebnego nadmiaru pracy pep8 tak public instance variable non public instance variable możemy zdefiniować zakresie metody constructor klasy co różnicy syntaksie non public instance variables używaj podkreślnika variable name private instance variables uzyskać dostępu prócz obiektu istnieją pythonie jednakże istnieje konwencja którą stosuje większość kodu python nazwa poprzedzona podkreślnikiem e g powinna traktowana niepubliczna część api względu funkcja metoda członek danych python software foundation tu przykład zauważyłeś zmienną email tak definiujemy non public variable możemy uzyskać dostęp zaktualizować non public variables konwencją powinny traktowane niepubliczna część api stosujemy metodę pozwala działać definicji klasy implementujemy metody email and update_email lepiej zrozumieć za pomocą metod możemy zaktualizować uzyskać dostęp non public variables spójrzmy zainicjowaliśmy nowy obiekt first_name tk email tk mail com wydrukowaliśmy email poprzez uzyskanie dostępu non public variable próbowaliśmy ustawić nowy email naszej klasie musimy traktować non public variable non public część api zaktualizowaliśmy non public variable pomocą instance method sukces możemy zaktualizować naszej klasy metoda pomocniczą helper method public method z public methods możemy użyć spoza naszych klas przetestujmy super możemy używać najmniejszego problemu non public method jednakże non public methods jesteśmy stanie zrobić zaimplementujmy tą samą klasę person wraz show_age non public method używając podkreślnik a spróbujemy nazwać non public method naszym obiektem możemy uzyskać dostęp zaktualizować non public methods konwencją powinny traktowane niepubliczna część api tutaj przykład użyć mamy non public method show_age public method show_age użyte obiekt spoza naszej klasy a zostać użyty zakresie definicji klasy wewnątrz metody show_age jednakże powtórzę konwencja encapsulation summary z encapsulation możemy zapewnić wewnętrzna reprezentacja obiektu ukryta zewnętrznym inheritance zachowania charakterystyka niektóre obiekty dzielą pewne rzeczy zachowanie cechy na przykład odziedziczyłem pewne cechy zachowanie moim ojcu z cech odziedziczyłem oczy włosy a zachowań brak cierpliwości introwersje w programowaniu zorientowanym wokół obiektu klasy odziedziczyć wspólne cechy dane zachowania metody innej klasy spójrzmy kolejny przykład zastosujmy pythonie wyobraź samochód numer kół pojemność maksymalna prędkość atrybuty samochodu można powiedzieć klasa electriccar dziedziczy same atrybuty klasa zwyczajnego car nasza klasa car w pythonie aplikujemy parent class child class parametr klasa electriccar odziedziczyć klasę naszego car to proste nie musimy stosować innej metody klasa odziedziczoną klasie car udowodnijmy pięknie to nauczyliśmy wiele rzeczy podstawach pythona jak działają zmienne pythona jak działa conditional statement pythona jak działa looping while for pythona jak działa lista collection array dictionary key value collection jak możemy iterować data structures objects classes atrybuty dane obiektów metody zachowanie obiektów używanie python getters and setters property decorator enkapsulacja ukrywanie informacji dziedziczenie zachowania cechy jeśli chciałbyś nauczyć więcej wypróbuj one month python bootcamp natomiast chciałbyś poczytać trochę więcej mojej podróży zgłębiałem tajniki programowania zapraszam czytania moich publikacji the renaissance developer miłej zabawy uczcie dalej mój twitter github jednym podstawowych najczęściej wystepujących problemów współczesnego programowania czynność przekazania projektu innemu programiście odkąd zaczęto używać technologii zapisywania zależności pomiędzy wykorzystywanymi projekcie bibliotekami composer php maven ant javy a wersjonowania kodu program przestał głównym wszelkiego zła paweł kamiński absolwent politechniki białostockiej programista letnim doświadczeniem zawodowym zajmuje frontendem sass react backendem laravel pracował projektach różnej skali ugruntowanych serwisach aplikacjach tworzonych start upach jest nauczycielem przedmiotów zawodowych technikum informatycznym w stawia stały rozwój poza programowaniem hobby uznać retro informatyce gry czasopisma pionierach komputeryzacji naszym kraju na pierwsze miejsce wysunęło uruchomieniowe system operacyjny przypadku php wersja interpretera bazy danych innych usług oznacza przekazując kod innemu programiście możemy pewni działał identyczny naszym komputerze czasem dokładnej analizy porównawczej brak jednej biblioteki zdecydowanie opóźnić uniemożliwić szybkie rozpoczęcie pracy nowym projekcie osobiście podobny problem napotkałem kilka tygodni otrzymałem analizy projekt został napisany laravelu domyślnie serwera oparte interpreter php wersji pozwalało uruchomienie przekazanego kodu problemem okazał brak rozszerzenia mcrypt wersji php zostało całkowicie usunięte co prawda rozszerzenie zostało przeniesienione biblioteki pecl odrobienie wysiłku byłoby pokusić instalację postanowiłem najlepiej odwzierciedlić produkcyjne użyję konteneryzacji całkowicie uniezależnie mojego opartego php i wpisie spróbujemy stworzyć kontenery aplikacji laravelowej użyciu dockera czym docker jest technologia umożliwiająca umieszczenie kontenerach poszczególnych elementów aplikacji serwer aplikacyjny nginx apache interpretera php bazy danych kontenery następnie uruchamiane dzięki dokładnej specyfikacji wymienionych wyżej składowych systemu wszędzie każdym systemie operacyjnym uruchamiane prezentowane oznacza praktyce stworzymy kontener php wersji pewność użytkownik posiadał tą wersję jeśli dodamy wszelkie ustawienia konfiguracyjne biblioteki narzędzia skrypty automatyzację otrzymujemy potężne narzędzie zapewnia zdefiniowany kontener wgrana aplikacja wszędzie uruchomiona samym w celu instalacji samego dockera należy pobrać pomocą jednego linków wersja windows wersja osx pora stworzyć pierwszy projekt do przechowywania plików dockera możemy używać samego folderu projekt zastosować folder od samego umiejscowienia plików zależą będziemy musieli podać podczas konfigurowania kontenerów w przykładzie poniżej wszystkie użytych plików umieszczone zostały razem aplikacją aplikacja umiejscowiona została folderze standardowa aplikacja laravelowa głównym folderze dyspozycji katalogi app boostrap public vendor pliki konfiguracyjne umiejscowione głównym katalogu które zaprezentowanych wyżej plików odpowiadają konfigurację dockera są app docker docker compose yml vhost conf web docker najważniejszym centralnym oczywiście docker compose yml w będziemy definiować wszystkie używane kontenery początek pliku zdefiniowanie wersji listy usług następnie definiujemy pierwszy kontener nazwie app będzie służył miejsce naszą aplikację laravelową kolejno pomocą dyrektywy context zdefiniowaliśmy kontekst aplikacji wybraliśmy aktualną domyślne umiejscowienie plików konfiguracyjnych kontenerów pomocą dockerfile defniujemy plik konfiguracyjny przechowywał informacje interpreterze php a wykona czynności przygotowawcze czym chwilę working_dir zdefiniowanie miejsca osadzona aplikacja wybraliśmy var najczęstsze miejsce wgrania naszej aplikacji warto zauważyć odnosi bezpośrednio kontenera wspólnego naszym lokalnym komputerem kolejnej dyrektywie volumes mapujemy naszą lokalną kontenerze dzięki kontenerze katalogu var widoczne same pliki katalogu lokalnego komputera pliki naszym katalogu widoczne katalogu var kontenera druga usług zdefiniowanie kontenera serwerem aplikacyjnym nginx ostatania usług db baza danych tu pierwszy rzut oka widoczne użycie nowej dyrektywy image dzięki możliwe wykorzystanie gotowych obrazów usług wypadku zdefiniowano użycie serwera bazodanowego mysql wersji pliki obrazu pobierane oficjalnego repozytorium dockera nazwy bazy homestead użytkownika homestead hasła secret hasła root a secret niezwykle ważnym podane loginy hasła pokrywały tymi aplikacji plik env laravela plik app config database mojej aplikacji opartej laravel co więcej ostatniej dyrektywie ports dokonujemy kolejnego mapowania domyślny port bazy danych kontenera zostanie zmapowany komputera lokalnego raz celu uniknięcia konfliktów uzyto mapowania dwóch portów w oto stworzyliśmy pierwszy plik docker compose yml całości prezentuje poniżej i drugie polecenie run uruchomienie instalatora rozszerzeń mcrypt mysql client czym instalacja są polecenia wykonywane bezpośrednio kontenerze naszym zwirtualizowanym systemie operacyjnym oczywiście plik konfiguracyjny znacznie obszerniejszy zależne ilości rozszerzeń wymaganych bibliotek w naszym przypadku prostej aplikacji laravelowej taka ilość rozszerzeń wystarczająca czas zajrzeć pliku konfiguracyjnego serwer aplikacyjny web docker pierwszej linii definiujemy wybraną wersję serwera aplikacyjnego nginx następnie kontenera dodajemy lokalny plik vhost conf umiejscawiamy katalogu etc nginx conf d default conf kontenera dzięki nadpisujemy lokalną konfigurację serwera naszą którą zdefiniujemy chwilę końcu ponownie ustawiamy katalog roboczy kontenera var ostatnie czynności wszystkim stworzenie pliku vhost conf plik zawiera wszelkie dane konfiguracyjne serwera nginx port nasłuchiwania plik indexem witryny root domyślny katalog serwera w opisywanym przypadku oczywiście podkatalog public aplikacji dzięki mapowaniu zdefiniowanemu wcześniej katalog var public kontenera usługi odpowiadał katalogowi lokalnemu komputera public folderowi laravela reszta ustawień domyślne ustawienia serwera nginx warto zauważyć użyty został alias link app stworzony kilka minut wcześniej na koniec musimy upewnić dane dostępowe bazy wpisane aplikacji pokrywają tymi zdefiniowanymi kontenerze db w przypadku aplikacji napisanej laravel zaglądamy pliku app config database php sprawdzamy tablicę kluczami pozostaje terminala bądź wiersza poleceń przejść katalogu aplikacją plikami konfiguracyjnymi uruchomić polecenie a możemy uruchomić przeglądarce adres powinien wyświetlić ekran powitalny aplikacji laravelowej jeśli chcemy wyłączyć kontenery wystarczy użyjemy polecenia docker compose stop poniżej przedstawiona została tabela najpopularniejszymi poleceniami dockera docker compose up uruchomienie kontenerów docker compose stop zatrzymanie kontenerów docker container ls wyświetlenie listy kontenerów docker system prune a usunięcie wszystkich danych włączając pobrane obrazy docker rm f container id usunięcie zbudowanego kontenera wszystkie przedstawione powyższym wpisie dostępne repozytorium są najmniej trzy znane cytaty odnośnie optymalizacji more computing sins are committed in the name of efficiency without necessarily achieving it than for any other single reason including blind stupidity william a wulf we should forget about small efficiencies say about of the time premature optimization is the root of all evil donald e knuth we follow two rules in the matter of optimization rule don t it rule for experts only don t it yet that is not until you have a perfectly clear and unoptimized solution m a jackson marcin lasota java developer transition technologies programowania uczył własną rękę zaczął technologii webowych a obecnie skupia javie ekosystemie czasu czasu wracając frontendu pierwsze kroki zaczął stawiać koniec trzeciego technikum informatycznego programowania prosta webówka programowanie spodobało tyle chciałem wiązać przyszłość po technikum zamierzałem dalej studiować informatykę analizie plusów minusów postanowił zrezygnować studiów zadowolony wyboru wszystkie trzy cytaty poprzedzają język programowania java najmniej dekady nadal aktualne mówią prawdę optymalizacji narobić szkód przynieść korzyści szczególnie mowa przedwczesnej optymalizacji nie warto poświęcać dobrego designu rzecz wydajności lepiej pisać dobre programy szybkie jeśli dobry program wystarczająco wydajny architektura pozwoli później zoptymalizować dobre programy przestrzegają zasady enkapsulacji danych pojedyncze decyzje zmienione wpływu pozostałą część systemu nie znaczy powinniśmy ignorować problemy wydajnościowe dopóki skończymy programu problemy implementacyjne naprawione późniejszą optymalizacją wszechobecne wady architektury ograniczające wydajność możliwe naprawy przepisywania całego systemu nowa najtrudniej wprowadzić zamianę komponentach zawierają interakcje pomiędzy komponentami a zewnętrznym api formaty przesyłania danych mogą narzucić znaczne ograniczenia wydajności części systemy zaprojektować największą starannością więc możemy całkiem przestać myśleć optymalizacji zawsze rozważać konsekwencje naszych wyborów tworząc typ mutowalny możemy wymuszać kliencie wiele zbędnych kopii defensywnych podobnie używając dziedziczenia publicznej klasie zamiast kompozycji zszywamy daną klasę nadklasą skutkować ograniczeniami podklasy tak samo używając api typu implementacji zamiast interfejsu wymuszamy jedną konkretną implementację przyszłości mogłaby napisana bardziej wydajna wersja jeśli system używany wewnętrznie możemy całkowicie przebudowywać kod takiego znaczenia utrudniać na szczęście zazwyczaj dobry design idzie parze dobrą wydajnością możliwością poprawę kiedy zaprojektowaliśmy czysty ustrukturyzowany kod czas rozważanie optymalizacji zaprojektowanym systemie wprowadzenia nigdy powinniśmy skupiać optymalizacji kosztem spaczonego designu w określeniu powinniśmy skupić naszą uwagę podczas optymalizowania systemu pomóc profilery te narzędzia dają informacje czas jakim każda metoda wykonuje wiele razy miało miejsce innym narzędziem warto wspomnieć framework benchmarków jmh możemy zmierzyć wydajność poszczególnych kawałków kodu warto skorzystać narzędzia porównać zoptymalizowany kod pewno wydajność lepsza wydaje konwencje nazewnicze javie ten temat dosyć rozwlekle opisany książce myślę rozdrabniać podam same konkrety w javie każdym innym języku powszechnie uznawane konwencje nazewnicze należy trzymać można powiedzieć dzielą grupy typograficzne gramatyczne nazwy pakietów modułów powinny zwięzłe składać wyłącznie małych liter zalecane opisowe skróty util zamiast utilities akronimy nazwa pakietu używany naszą organizacją powinna zaczynać odwróconej nazwy domeny com google klasy interfejsy włączając enumy adnotacje powinny zaczynać wielką literą dalej camelcase często dyskusji podlega problem akronimy powinny całe pisane wielkimi literami według pierwsza litera powinna pisana dużej szczególnie nazwie akronimy wolałbyś widzieć klasę nazwaną httpurl httpurl metody pola obowiązują same zasady tyle zaczynamy małą literą wyjątkiem zasady pola stałe static final niemutowalne powinny zapisane dużymi literami a poszczególne słowa oddzielone podłogą stałymi wartości enumów zmienne lokalne większą dowolność nazwy powinny opisowe oczywiście zaczynać małej litery nazwy parametru typu składają jednej dużej litery najczęściej używa t jakiegoś typu więcej kolejno t u v t1 t2 t3 e typu elementu kolekcji k v typu klucza wartości mapy x typu wyjątku r typu zwracanego funkcję podsumowując odnośnie konwencji gramatycznych konieczne typograficzne zazwyczaj nazwy klas instancjonowalnych rzeczownikiem liczbie pojedynczej thread priorityqueue chesspiece z kolei nazwy nieinstancjonowalnych klasy typu utility liczbie mnogiej collectors collections interfejsy zazwyczaj nazywane klasy collection comparator końcówkami able ible runnable iterable accessible metody wykonują jakieś akcje standardowo czasownikami append drawimage zwracają boolean zazwyczaj zaczynają is has rzeczownik isdigit isprobableprime isempty isenabled hassiblings zwracają jakąś daną zazwyczaj zaczynają get bezpośrednio nazwa danej size hashcode gettime konwertują obiekt zazwyczaj nazywają totype tostringlub toarray zwracają widok zazwyczaj nazywają sie astype aslist statycznymi fabrykami zazwyczaj nazywają from of valueof instance getinstance newinstance gettype newtype model serverless nieustannie zyskuje popularności i teorii w ostatnich latach napisano niezliczoną liczbę tekstów artykułów przeróżnych poradników a wszyscy liczący dostawcy cloud oferują usługi typu aws lambdę microsoft oferuje azure functions google daje cloud functions a alibaba piotr kalinowski cloud architect chmurowisko zajmuje architekturą wytwarzaniem oprogramowania szczególności rozwiązani zakresu ml ai wszystkim amazon web services microsoft azure czasem alibaba cloud no chiński dostawca usług chmury publicznej pozostaje tyle proponuje rozwiązania serverless zapraszam cię krótką wycieczkę alibaba function compute czym alibaba function compute function compute usługa typu faas function as a service dzięki możesz wykonać daną funkcję martwiąc serwer uruchamiany kod skupiasz implementacji rozwiązania a serwerach stąd serverless usługa aktualnie obsługuje języki python javascript java co ważne integruje innymi narzędziami dostępnymi alibaba cloud możesz przykład wywoływać funkcje momencie nowy plik pojawi usłudze object storage service oss twojej bazie danych rds zostanie wykonane jakieś specyficzne zapytanie to pozwala ci budować aplikacje sterowane zdarzeniami event driven services zbudujmy zatem aplikację serverless alibaba cloud zaprezentować działanie usługi praktyce zbuduję prostą aplikację wykorzystaniem function compute parametr przyjmować url strony internetowej następnie zostanie uruchomiony kod odczytuje wszystkie pliki jpg podanej witryny zapisuje w stworzymy proste narzędzie automatycznego pobierania wszystkich zdjęć spod zadanego adresu url tego typu aplikacje szczególnie przydatne chcemy pobrać dane pewnej strony api umożliwiało do stworzenia takiego rozwiązania użyjemy dwóch usług alibaba cloud wspomnianej wcześniej function compute storage oss będziemy zapisywać zdjęcia wystarczą zaledwie usługi konfiguracja naprawdę prosta zaraz zobaczysz błyskawiczna dzięki możemy skoncentrować implementacji naszego programu a konfiguracji infrastruktury w przykładzie wykorzystam język programowania python zatem dzieła tworzenie koszyka usłudze oss zanim zaczniemy tworzyć naszą funkcje musimy najpierw stworzyć koszyk zdjęcia naszej usłudze usługa oss służy przechowywania plików postaci obiektowej działa analogicznie amazon s3 azure blob storage na początek stwórzmy nowy bucket chmurowiskophotos regionie frankfurt w celu wybieramy create bucket tworzymy nowy obiekt poniższym zrzucie ekranu tworzenie nowej usługi function compute teraz możemy przejść usługi wyszukujemy panelu pozycję function compute a przejściu nowego ekranu klikamy przycisk create service podajemy nazwę naszego nowego serwisu zatwierdzamy akcję gotowe a czym właściwie nowa usługa tak naprawdę kontener funkcje dzięki któremu możemy grupować pozwala organizować pracę unikać bałaganu co więcej ramach jednej usługi funkcje współdzielić zasoby informacje usłudze function compute po stworzeniu usługi zostaniemy przeniesieni głównego okna statusem mamy dostępne wszystkie podstawowe informacje czynności możemy wykonać w szczególności interesuje lista istniejących funkcji lewej stronie możliwość dodania nowych co ciekawe usługi function compute możliwość wersjonowania polega aplikacja gotowa możemy opublikować wygeneruje kolejny numer wersji podczas wywołania funkcji możemy wskazać wersję usługi stwórzmy zatem nową funkcję klikając znak plusa lewej stronie dodanie funkcji składa kroków musimy kolei wykonać function template w miejscu wskazujemy predefiniowany szablon kodu wykonującego naszą funkcję alibaba cloud udostępnia zestaw gotowych funkcji możemy bezpośrednio użyć mogą służyć podstawa budowy własnego rozwiązania mamy możliwość wybrania pustej funkcji w kroku wybrałem szablon image crawler napisany pythonie configure triggers w etapie wybieramy akcję uruchamiała naszą funkcję obecnie wyboru object storage log service timetrigger cdn events trigger rds trigger http trigger tablestore trigger mns topic trigger jak widać możliwości sporo postawiłem http trigger skutek czego zostanie utworzone proste rest api api wywoływane poprzez metodę post autoryzacji nie dobre rozwiązania produkcyjne potrzeby prezentacji możemy zaakceptować configure function settings to naprawdę najistotniejsza część całej konfiguracji po pierwsze podajemy nazwę naszej funkcji a drugie implementujemy jej kod możemy wysłać samodzielnie chmury alibaby napisać interaktywnym edytorze kod działał wejściu musimy dostarczyć metodę handler to zaczyna wykonywanie kodu funkcji w naszym przypadku metoda odczytuje adres url zawartości zapytania http następnie danym adresem szuka stronie obrazków formacie jpg na końcu umieszcza wszystkie wskazanym koszyku usłudze oss nie będziemy zagłębiać szczegóły implementacyjne pythona zainteresowanych odsyłam kodu githubie configure function permissions w sekcji wskazujemy uprawnienia dostanie funkcja jest niezbędne chcemy mogła komunikować innymi usługami alibaba cloud uprawnienia określa poprzez role definiujące operacje zasobach wykonywane w naszym przypadku musimy przypisać rolę umożliwiającą zapis plików koszyku oss na szczęście tworzyć ręcznie pomoże konsola alibaba cloud finał po przejściu powyższe sekcje nadeszła pora ostatni krok weryfikację ustawień sprawdzamy wprowadzone dane kończymy tworzenie naszej funkcji function compute pora ostateczny test nie pozostaje innego sprawdzenie funkcja działa wybieramy panelu lewej a następnie klikamy zakładkę code u dołu strony pojawi sekcja http trigger debugging umożliwia przetestowanie kodu poprzez wysłanie zapytania http znajdziesz url funkcji naprawdę możesz użyć dowolnego klienta testów w treści zapytania definiujemy url pomocą formatu json a następnie wysyłamy zapytanie w odpowiedzi powinniśmy dostać informację liczbie pobranych zdjęć na końcu przejdźmy usługi oss sprawdźmy zdjęcia faktycznie wylądowały naszym koszyku jak widać powyższym zrzucie ekranu poszło zgodnie planem porozmawiajmy pieniądzach usługa function compute rozliczana modelu pay as you oznacza płaci wyłącznie faktyczne zużycie zasobów na całkowity koszt usługi składają trzy czynniki alibaba cloud warto zdaję sprawę niektórych alibaba cloud wciąż egzotyczne rozwiązanie i sumie specjalnie dziwi końcu naszym kraju oficjalnego dystrybutora abc data firma dopiero ubiegłego warto mieć chiński gracz absolutnie odstaje największych dostawców chmury publicznej przykładem potwierdza m in opisana wyżej usługa function compute dzięki powodzeniem zaimplementujesz swoją serverlessową aplikację chmurze alibaby i dasz szansę rozwiązaniu jednym wielu benefitów bycia microsofcie właściwie nieograniczony dostęp autorytetów dziedziny it masz pytanie odnośnie net idziesz kawę andersem hejlsbergiem ojców c typescript mówi kacper rzepecki group engineering manager microsoft kacper zaangażował rozwój firmy przekonał zarząd microsoftu otwarcia oddziału szanghaju twoja kariery imponująca opowiedzmy proszę szczegółowo kolei zacznijmy politechnice poznańskiej znalazłeś ogłoszenie pracę microsofcie co stanowisko przebiegał proces rekrutacji było stanowisko sdet software development engineer in test programisty zajmującego pisaniem testów a narzędzi frameworków wspierających ogólnie pojęty proces zapewniania jakości oprogramowania sam proces rekrutacji prosty wysłaniu cv dostałem zaproszenie spotkanie mojej uczelni w ciągu trzech godzin przeszedłem rozmowy trzema managerami przylecieli kopenhagi każda rozmów miała podobny schemat najpierw kilka pytań rozgrzewkę rozmowa odbywała j angielskim opowiedz opowiedz projekcie masz cv itp następnie przejście meritum rozwiązania problemu algorytmicznego a później napisanie testów pokrywających problem przez ostatnie lata przeprowadziłem dziesiątki rekrutacji prezentuję kandydatom same problemy musiałem rozwiązać do zaskakiwany nowymi rozwiązaniami jeszcze rozpoczęciem pracy odwiedziłeś stolicę danii samodzielnie szukałeś mieszkania gdy dostałem ofertę byłem dużym wrażeniem przyszło głowy moja decyzja poprzedzona kilkoma godzinami spędzonymi komputerem to znalazłem brzmiało interesująco ojczyzna carlsberga lego najszczęśliwszy kraj wszechobecność rowerów informacja stawce podatkowej przestraszyła podejmowanie decyzji lata naprawdę proste oczywiście znaczenia wsparcie moich wykładowców umożliwili półoficjalne studia zdalne dzięki czemu równolegle pierwszym rokiem pracy mogłem ukończyć studia magisterskie całość przeprowadzki bezstresowa mile zdziwiło danii wszystkie dokumenty formularze musiałem wypełnić angielsku absolutnie chętnie posługuje językiem całość formalności zamknęła jednej wizycie urzędzie zajęła minut przez pierwszy miesiąc miałem zapewnione tymczasowe zakwaterowanie hotelu natomiast poszukiwaniu mieszkania pomagała agencja relokacyjna zapewniona ms czym początku zajmowałeś microsofcie do pracuję samym produktem aplikacją typu erp microsoft dynamics ax przeniesieniu chmury została przemianowana dynamics for finance and operations jest olbrzymi system milionów linii kodu używany największe firmy zarządzania wszystkimi aspektami prowadzenia biznesu chociażby kadrami sprzedażą zaopatrzeniem logistyką finansami marketingiem produkcją itp trudno pracować takim potężnym produktem praca oprogramowaniem biznesowym trudna pierwsze wymaga wiedzy dziedziny it dobrego zrozumienia wyglądają procesy biznesowe podszewki największym wyzwaniem szokiem początku byłem stanie zrozumieć specyfikacji problemów rozwiązywaliśmy wymagały dogłębnej znajomości zagadnień zakresu logistyki księgowości ogólnie pojętego biznesu podczas dołączając microsoftu wiedziałem angielsku powiedzieć faktura po drugie kontakty b2b sprawy szły złym firma liczyć reperkusjami prawnymi wysokimi odszkodowaniami przestój biznesu dzięki standardom jakości sytuacje szczęście zdarzają jednakże odpowiedzialności jaka spoczywa niewinny błąd spowodować drugim końcu stanie cała fabryka kasy fiskalne sieci hipermarketów przestaną działać wielki koncern rozliczy podatków na początku zajmowałem testowaniem funkcjonalności obszaru supply chain management polegało głównie pisaniu scenariuszy testowych testowaniu wydajności analizie wyników a znajdowaniu luk specyfikacji były zajęcia sprawiały mnóstwo frajdy a jednocześnie doskonała droga zrozumienia wymagań naszych klientów z ilu osób składał zespół pracowałeś zmieniało początku liczył osób ostatnie lata pracowałem zarówno mniejszych większych zespołach mamy elastyczną strukturę potrafimy zmieniać skład naszych teamów każdego dnia najlepiej dopasować zadania pasji umiejętności naszych programistów największe zespoły dotąd działałem miały osób dlaczego zainteresowałeś innymi zagadnieniami programowanie jak przebiegał twój rozwój microsofcie gdy dołączyłem microsoftu uświadomiłem bycie doskonałym inżynierem pisanie kodu słuchawkach a czasy inżynierów garażu mogło zmienić branżę it odeszły lamusa dziś pracujemy systemami składają milionów linii kodu pisanymi setki programistów bardzo szybko zrozumiałem mogę najlepszym inżynierem słońcem czego będę stanie przekonać innych zespołów pomocy realizacja mojego projektu zostanie ograniczona godzinną dobą studiach współczuciem patrzyłem wszelakiego typu managerów myślę wielu upieczonych inżynierów zna uczucie przecież zgłębialiśmy lata tajniki algorytmów dziesiątków języków programowania porzucić rzecz nudnych spotkań pisania setek maili bardzo szybko podejście zmieniło zobaczyłem managerowie mierze przestali doskonałymi inżynierami dbaniem cały zespół sami biorą siebie najtrudniejsze zadania a spotkania maile najeżone technikaliami po trzech latach firmie zacząłem podążać tą drogą zaczynając pozycji scrum mastera następnie poprzez pozycję project leada kończąc pozycji managera w podnosiłeś umiejętności miękkie twarde jednym wielu benefitów bycia microsofcie właściwie nieograniczony dostęp autorytetów dziedziny it masz pytanie odnośnie net idziesz kawę andersem hejlsbergiem ojców c typescript sql sprawia ci kłopoty mamy zespół kilkuset inżynierów stworzyli sql server podstaw zastanawiasz zmierza komputerów w samym budynku pracuje kilkudziesięciu badaczy pracujących komputerami kwantowymi myślę mojego rozwoju zasługą moich kolegów koleżanek wiedzę pełnym pasjonatów zdobywa niemal osmozę poza zdobywaniem wiedzy doświadczenia pracy codziennymi zadaniami istnieje wiele inicjatyw wymierzonych inkubowanie nowych pomysłów jedną moich ulubionych laboratoria ms garage są imponujące centra rozsiane naszych oddziałach całym wyposażone sprzęt druku obrabiarki cnc wycinarki laserowe komponenty elektroniczne lutownice narzędzia wszelkiego typu drony płytki prototypowe mikroskopy długo wymieniać nie przeznaczenia biznesowego oddane pełni ręce pracowników realizować własne projekty od druku własnych otwieraczy piwa budowę kopalni bitcoinów prototypy nowych urządzeń jestem wielkim fanem hackathonu trzydniowego festynu podczas inżynier microsoftu pracować swoim projektem marzeń zachęcić innych dołączenia wiele projektów przerodziło startupy projekty oficjalnie rozwijane naszą firmę oczywiście zapewnione multum szkoleń warsztatów a wsparcie dalszej edukacji chociażby studia mba jeśli chodzi budowanie kariery korzystam pomocy mentorów relacji liderami innych organizacji związanymi moją codzienną pracą chodzi codzienne zadania przesłoniły meritum w ramach takiej relacji dyskutujemy długofalowych planach rozwoju dostanie perspektywy zewnątrz a okazja wymiany doświadczeń kontaktów całym it w microsofcie byłem dużych zmian poczynając połączenia dyscyplin testerów developerów jedną napisałeś rozmowie wywiadem jak odbywało połączenie podział testerów devów wciąż popularny wielu firmach idea całkiem słuszna wprowadzenie systemu kontroli zapewniania jakości osoby odpowiedzialne odczuwałyby konfliktu interesów pomiędzy jakością a agresywnymi deadlineami w praktyce system więcej wad zalet ekstremalnych przypadkach powodowało sde tworzyli kod czasem zapominali zaimplementowaniu architekturze umożliwiałaby przetestowanie sdet czasem zapominali programistami stoi przeszkodzie niektóre niedociągnięcia naprawiali sami inżynierowie obydwu dyscyplin wynajdywali nowo narzędzia rozwiązywania samych problemów słyszałem sytuacjach wręcz absurdalnych chociażby sytuacji kod produkcyjny testowy napisane innych językach również punktu widzenia zarządzaniem zespołem model mniej elastyczny uniwersalna dyscyplina wprowadzenie zmiany zaczęło wprowadzenia nowego tytułu unified engineer pomimo tytuł przetrwał próby czasu spełnił swoją rolę widoczny pokazania obowiązki umiejętności muszą nabyć wszyscy zarówno testerzy deweloperzy kolejne kilka tygodni wypełnione agresywnym rozpoznawaniem druga strona zaoferowania najwięcej wyniosłem prostu siadając klawiatury naszych najbardziej doświadczonych devów robiąc pair programming pisałem kod produkcyjny podczas partner pisał kod testowy po dniach obydwoje mieliśmy dobry ogląd naszych bolączek rola organizacji zmianie ograniczała wsparcia inżynierów znalezieniu odpowiedniego bilansu pomiędzy jakością a tempem dostarczania nowych funkcjonalności cała reszta potoczyła naturalny instynktownie czuł dobry ruch z perspektywy czasu uważasz dobry ruch tak jak każdą inwestycją staraliśmy przeanalizować mierzalne efekty okazało przeciągu tygodni wydajność wzrosła krótkotrwałym spadku nawzajem musieliśmy przyswoić wiedzę drugiej strony jednoczesnym wzroście jakości polepszeniu pokrycia testami po sześciu latach nikt wspomina powrocie starego modelu przez ostatni rok pracowałeś projektem otwarcia biura microsoftu szanghaju od czego zacząłeś pracę projektem pomysł pojawił mojej głowie odpowiedź doraźne problemy jakimi spotykaliśmy po pierwsze konieczność wspierania naszych klientów wszystkich strefach czasowych czasem wymagała pracy godzinach wręcz nocy oczywiście rekompensowane dodatki wypłat dodatkowe dni wolne budziło zrozumiały dyskomfort inżynierów po drugie obecność dużego centrum r d centrum finansowym azji pokazuje zaangażowanie rejonie apac już chwili prowadzimy rozmowy bliższą współpracą strategicznymi klientami regionu obecność zespołu biura microsoftu bezpośrednio współpracować warunkiem koniecznym nawiązania bliższych relacji po trzecie region apac a szczególności rynek chiński cechuje szczególnymi wymaganiami produktu erp wszechobecność płatności mobilnych integracja największymi lokalnymi platformami it typu wechat alibaba szczególne wymagania dotyczące suwerenności danych azure mooncake od czego zacząłem oczywiście rozmów najbliższymi rodziną przyjaciółmi gdy dostałem zielone polu przedstawiłem pomysł mojemu managerowi mówiłem minut czym usłyszałem to sens czego potrzebujesz jak microsoft wspierał cię działaniu twoim zdaniem przeważyło zgodził otwarcie nowego oddziału dostałem pełne wsparcie strony microsoftu wczesnym etapie wiedziałem dobry pomysł wsparcie miało głównie postać mentoringu doradztwa otwartych drzwi każdego mógłby rozjaśnić wątpliwości pomóc podjąć właściwą decyzję poczynając zarządu ms chinach działów hr całym osób prowadzących podobne projekty przeszłości personelu placówek dyplomatycznych doradcach podatkowych kończąc oczywiście dostałem wolną rękę chodzi podróże służbowe wielokrotnie odwiedzałem szanghaj zanim podjąłem ostateczną decyzję szanghaj jedynym miejscem braliśmy uwagę nigdy miałem poczucia moim zadaniem bycie adwokatem pomysłu ostatecznie musiałem rozważyć wszystkie przeciw podjąć właściwą decyzje a firma polegała głównie moim osądzie ostatecznie rozrachunek prosty ruch dobry naszych klientów użytkowników a naszych inżynierów inwestycja warta ryzyka wysiłku a wspaniałe przeżycie okazji tym lepiej ile osób zamierzacie zatrudnić kogo szukacie w chwili chciałbym zespół szanghaju urósł osób poszukujemy głównie programistów otwarte pozycje stanowiskach managerskich jeśli którejś naszych czytelniczek czytelników szanghaj brzmi ciekawa przygoda najbliższe lata zapraszam kontaktu kacper microsoft com kacper rzepecki group engineering manager microsoft absolwent wydziału informatyki politechniki poznańskiej ekspert dziedzinie aplikacji biznesowych od rozwija najbardziej złożone systemy it od tygodni mieszka szanghaju tworzy możliwości rozwoju microsoftu gdy nowy klient pojawia firmie zajmuje tworzeniem oprogramowania oznacza zawarcie nowego kontraktu umowa zazwyczaj zakłada stworzenie produktu bądź rozwinięcie modułu w cieniu dostarczanych wartości biznesowych skradają jakość wymagania nierozłączna część umowy dodatkowo produkt dostarczony określonym terminie to sprawia rozpoczyna wielka wojna pomiędzy spełnionymi wymaganiami a czasem aleksander rydzewski lider zespołu dziale badawczo rozwojowym boeing w swojej karierze testerem automatycznym programistą fullstack aplikacjach ułatwiły pracę wielu ludzi w aktualnej pracy zajmuje wyszukiwaniem nowatorskich zastosowań sztucznej inteligencji algorytmów optymalizujących celu poprawienia usług dostarczanych branżę lotniczą prywatnie jeździ snowboardzie interesuje technologicznymi nowinkami kulturą azjatycką po określeniu elementów współpracy klientem zebrany zespół specjalistów zabiera wykonania zadania odbiorca produktu każdej kolejnej wersji nanosi poprawki powaga sytuacji zakłada wykonać czasu następnego spotkania drugiej strony czas zostaje zakończenia projektu niebezpiecznie kurczy programiści zaangażowani projekt pewnym czasie zauważają najprostsze zadania zajmują więcej czasu praca rozbudowanym kodzie zaczyna sprawiać problemy a czas powinien przeznaczony budowanie nowych funkcjonalności rozciąga nieskończoność przynosi rezultatów jakich oczekiwaliśmy znaczy projektu wkradła trucizna powoli uśmierca tworzony produkt czasu ograniczyć rozprzestrzeniania cały projekt legnie gruzach kierownik zespołu trucizna nazywa długiem technologicznym dotyka wszystkich projektów informatycznych właśnie nadszedł czas walkę tą chorobą pytanie brzmi wygra historia dotyka wszystkich projektów nawet najlepszy zespół specjalistów czasem zaczyna odczuwać problem długu technologicznego zbiorem zadań odłożonych później uproszczeń kodzie błędów tworzonych podczas pracy zespołu po pewnym czasie wszyscy programiści zadają pytanie uniknąć powstawania długu technologicznego na pytania postaram odpowiedzieć artykule najważniejsze brzmią czym czym polega wpływ projekt refactoring co wpływa rozprzestrzenianie długu technologicznego projekcie jakie narzędzia metody stosować mierzyć dług technologiczny jak określić pracować funkcjonalnościami a skupić długu czy refactoring potrzebny pracach prototypami refactoring w przedstawionej historii zauważyliśmy dług technologiczny występuje razu pojawia zazwyczaj projekt zwiększa rozmiary a klient zmienia wymagania projektu kolejnych iteracjach dług rozwija przemyślane początku struktury naginane warunków wymaganych klienta nagięcie logiki modułu polega przekształceniu moduł spełniał funkcjonalność jakiej oczekuje jednoczesnym wyrzuceniu najmniejszej możliwej części aktualnego rozwiązania tak stworzona struktura naginana zbyt wprowadzać niepożądany chaos projektu najprostszą metodą pomaga zredukować zagmatwanie kodu refactoring proces polega poprawie konstrukcji kodu celu uzyskania wyższej jakości produktu najczęściej refactoring zmienia kod aplikacji tworząc bardziej przejrzystą zrozumiałą czasem pozwala dodatkowo wprowadzić wyższą wydajność danej funkcjonalności całej aplikacji zadanie trywialne przeanalizowanie dogłębne zrozumienie kodu pochłania wiele godzin programista zaangażowany projekt wnikając wewnętrzne systemu przeglądane dłuższego czasu a analiza ujawnić najgorsze koszmary wewnątrz struktury projektowej poprawnie przeprowadzony refactoring wpłynie pozytywnie poprawę czytelności użyteczności kodu to kolei pozwoli sprawne dodawanie nowych funkcjonalności opóźnień wynikających chaotyczną niestabilną konstrukcję aby pełni szczerym pewna grupa programistów uważa refactoring dotyczy procesu zakończonym zadaniu celu poprawy jakości swojego rozwiązania jest oczywiście część refactoringu jednakże doraźne uporządkowanie kodu w artykule skupiamy procesach większa grupa programistów wykonuje chcąc wszczepić nowy kawałek kodu starego modułu zmieniając strukturę przystosować nowo powstałych wymagań w skrócie artykule skupię pracy polegającej przestawianiu istniejących klocków tworzonego oprogramowania celu sprawniejszej możliwości dodawania nowych elementów z perspektywy klienta płaci tworzenie aplikacji proces refactoringu mieć sensu klient stanie zauważyć zmiany wpływają stabilność konstrukcje projektu niewyjaśniony dostatecznie proces wytwórczy sprawia klient drobne zmiany potrafią wpłynąć negatywnie strukturę niedawno wytworzonego oprogramowania niedostateczne doinformowanie konsekwencjach zmian dodatkowy brak zaufania firmy czasem powoduje spięcia kolei przekładają jakość oprogramowania spięcia powodują popularność technik małych firmach zaniedbywana zaniedbywanie technik porządkują kod ewidentny błąd procesie tworzenia oprogramowania chaotyczny kod powoduje aplikacja którą dostarczamy cechuje niską jakością najdrobniejsze zmiany wprowadzane systemu powodują aplikacja mniej stabilna programiści pracujący projekcie unikać skomplikowania chaosu panującego systemie takim wypadku tworzą obejścia funkcjonalne polega specjaliści istniejącego rozwiązania powielają istniejące klasy metody tworząc indywidualne każdej nowej funkcjonalności to kolei powoduje lawinowe obniżenie jakości projektu sprawia utrzymanie kodu staje niemożliwe tworzony projekt dostarczony klienta dostarczony uniemożliwiający dalszy rozwój gdy projekt rozrasta olbrzymich rozmiarów klient ogniwo wpływa pogłębienie długu technologicznego praca zespołu wypadkach kluczowe znaczenie jakość dostarczanego produktu w przedsięwzięciach wielkości występuje błąd ludzki konsekwencje wyboru narzędzi dodatkowym czynnikiem duża rotacja ludzi negatywnie wpływa jakość produktu niezaznajomieni kodem programiści znając mechanizmów istniejących centrum systemu tworzą kod szkodzi aplikacji aby zredukować wpływ nieznajomości systemu zmiany powinny nadzorowane bardziej doświadczonych specjalistów wybór narzędzi bywa problemem projektach długoterminowych technologie nieustannie zmieniają dostrzegamy lepiej dopasowane zadania narzędzia wady starych rozwiązań w czasie rozwoju produktu niektóre rozwiązania przestają aktualne w takim wypadku należy zadbać zastąpienie nadal rozwijamy produkt aspekty przedstawione powyżej sprawiają refactoring czasie wykonywania przynosi bezpośrednio wartości biznesowej pozwala później obniżać koszta wytwarzania oprogramowania przy długoterminowych projektach olbrzymia przewaga czasowa dodatkowo refactoring wpływa jakość produktu zadowolenie zespołu pracuje kodem niewidocznym efektem ubocznym opisywanego projektu obraz naszej firmy rzetelnego dostawcy oprogramowania dostarcza produkty najwyższej klasy jakości to jakość pomaga utrzymywać dobre znajomości uzyskiwać przyszłe kontrakty wrażenie niezwykle ważne pomimo dobrego pru marketingu firma wybierana pierwszy wybór produkty niskiej jakości dlatego uważam refactoring dbałość szczegóły czynnikami niezwykle istotnymi tworzeniu każdego oprogramowania redukowanie długu technologicznego zaniedbywany dług technologiczny przyjmuje wiele potwornych form a każda równie ciężka przełknięcia zarówno kierownika projektu klienta płaci aby klient mógł zauważyć przeznaczane pieniądze należy odpowiedni zaprezentować problemy tworzeniem nowych funkcjonalności przy okazji należy przygotować plan działania naprawi istniejący stan rzeczy planując pracę refactorowanym kodem celu osiągnięcia czystego oprogramowania należy przeanalizować istniejącą sytuacje może okazać projekt uratowania może zdarzyć projekt zaniedbywany dłuższy czas wprowadzenie poprawek aktualnej struktury skonsumuje więcej pracy programistów poświęcone pory najczęściej sytuacja typu zdarzyć rozwijamy projekt tworzony inną firmę zaniedbywała pracę jakością oprogramowania taki stan powinien zostać wykryty podjęciem współpracy zakomunikowana klientowi podnosząca koszta rozwiązania jeśli sytuacja typu zdarzyła naszej firmie a klient produkt zaniedbywane podstawowe praktyki programistyczne niestety najprawdopodobniej stracimy klienta dodatkowo niefortunna decyzja sprawi klient pewno chciał odzyskać pieniądze nikt lubi wyrzucać pieniędzy kosza jeśli natomiast widzimy możliwość chwilowego pogłębiania długu celu zaobserwowania szerszego wachlarza możliwości sytuacja powinna przedyskutowana klientem klient zwiększonego ryzyka ponosi decydując możliwe zwiększone zyski negatywne konsekwencje wynikające decyzji podjęcie ryzyka okaże problematyczne zaciągnięty dług operacji należy spłacić zmniejszając ryzyko produktu późniejszych etapach to wskazywać czynienia takim systemem indywidualnych każdej funkcjonalności bądź pliki zawierające kilkaset linii kodu modyfikowane każdą zmianą przedstawione systemy zazwyczaj napisać nowa pracować nieuporządkowanym kodem najprawdopodobniej testowany naprawa takiego stanu wiązać dłuższym czasem choćby połową przeznaczonego aktualne rozwiązanie innym problemem zmierzyć czasie doraźnej redukcji długu przestarzała technologia może zdarzyć kluczowe działania systemu biblioteki wspierane zbyt problemów wewnętrznych dalej korzystać w naukowców norweskiej politechniki oslo przeprowadziło badanie grupie pracowników różnych szczebli kariery dużych firmach w skład grupy wchodziły zarówno osoby biorą udział konstruowaniu kodu architekci osoby zajmują kierowaniem projektów dodatkowo trzy firmy bardziej dbały kod zostały przepytane dokładne techniki wykorzystują monitorować zapobiegać powstawaniu długu technologicznego niewątpliwie interesującą rzeczą badanych osób monitoruje długu technologicznego czasu przeznaczonego poprawę co ciekawe badanie pokazuje projektów informatycznych dostarczonych bądź przekracza swojego budżetu osoby zaangażowane projekty uważają oprócz niesprecyzowanych wymagań błędem złe narzędzia monitorowania stanu projektu błędne zarządzanie ryzykiem projekcie brzmi znajomo prawda norweskie badanie sugeruje wszystkich respondentów wplata czas przeznaczony poprawki jakościowe zredukowanie długu technologicznego proces tworzenia oprogramowania osoby brały udział takim badaniu stwierdziły czas przeznaczony poprawki wydłuża czas tworzenia nowych funkcjonalności między a można założyć redukowanie długu wydłuża realizację projektu czasu jednakże projekty czas dłuższy zazwyczaj projekty polegające utrzymaniu produktu dobrej jakości długi czas wplatanie poprawki jakościowej proces tworzenia aplikacji sensownym podejściem pozwala zredukować dług technologiczny nie idealne rozwiązanie czym powiem później testy wykonywanej pracy inżynier powinien mieć czas dogłębne zrozumienie struktury jaką pracuje możliwość wykonania zmiany takim stopniu uszkodzić struktury kodu aby wykonywać cięcia chirurgiczną precyzją potrzebne testy pokrycie kodu testami pozwala poprawiać złożone funkcjonalności obawy uszkodzenie przyspiesza pracę programisty późniejszych terminach pokazuje klienta realizację założeń niefunkcjonalnych odporność systemu błędy użytkowników aby testy wykonywane regularnie należy wzbogacić system kontroli wersji git systemy continuous integration jenkins teamcity każdą zmianą dostarczaną wersji produkcyjnej testują rozwiązanie pomocy testów jednostkowych wydajnościowych dobrą metodyką tworzenia testów tdd test driven development polega stworzeniu testów walidujących nieistniejącą funkcjonalność a następnie zaimplementowaniu funkcjonalności sprawi poszczególne testy wykonają poprawnie podobną technikę stosują testerzy manualni swoich testach tworząc początku scenariusz chcą zrealizować testy wykonywane bardziej naginane uzyskanego rozwiązania nie bądź małostkowy code review inną znaną popularną techniką code review polega umożliwieniu programistom przeglądania dostarczanego kodu pomocą wbudowanych funkcjonalności systemy github gitlab do celu zostały stworzone dedykowane aplikacje fisheye specjaliści zaangażowani projekt powinni mieć czas przejrzeć kod wyprodukowany kolegą zespołu zadecydować zmianach powinny zastosowane dopuszczeniem kodu produkcji moim zdaniem technika wpływająca dodatnio projekt pojedynczą częścią pracuje programista a cała grupa patrząca kod pryzmat swoich umiejętności zapewniając przejrzystość wysoką wydajność dodatkowo technika pozwala uczyć nowych pracowników projekcie funkcjonalności zaszytych systemie bądź wydajniejszych technik dostępnych technologii przy code review czai nieznaczna pułapka należy pamiętać praca projektem patrzeć kod pryzmat przyjaźni kilka razy spotkałem pracą musiała odrzucona podzielona mniejsze kawałki liczba zmian projekcie zbyt duża code review jednego człowieka mimo przyjaźni pracy poświęconej osoby jakość projektu ważniejsza czas spędzony poprawkami z drugiej strony code review należy małostkowym jeśli osoba dziesiąty przegląda kod czepia pociętego kodu traci czas projektowy powodując opóźnienia taka sytuacja powinna przedyskutowana zespole na pewno obecność testów code review czas wpleciony proces tworzenia oprogramowania pomagają redukcji długu technologicznego w wypadku możemy zająć refactoringiem podczas naszej pracy należy pamiętać problemie przyszliśmy danej sekcji aplikacji zdarza poprawki pochłoną zapomnimy problem chcieliśmy zrealizować początku wpleciony refactoring dodatkowo wadę pracownik poświęca czasu dług technologiczny kierownik projektu to prowadzi kolejnego problemu jakim monitorowanie wielkości długu technologicznego monitorowanie wielkości długu technologicznego w poprzednim punkcie przestawiłem czasu konsumuje praca długiem technologicznym jednakże czas szacunkową wersją wydarzeń prezentowaną programistów architektów monitorowali czasu poświęcanego walkę długiem technologicznym zespoły zapytane norweskich naukowców monitorują ilość pozostałego długu technologicznego odpowiedziały zapisują informacje dokumencie excel bądź word naprawdę jestem trochę zażenowany przechowywany intranecie firmy to rozwiązanie zalecane wady którymi możliwość zgubienia pliku ciężka dostępność najprawdopodobniej nikt zagląda sfrustrowanymi programistami inni respondenci odpowiedzieli dużej liczbie projektów występują komentarze todo miejscach należy przeprowadzić refactoring aktualne narzędzia pracy programistów eclipse visualstudio intelij webstorm potrafią monitorować miejsca jednakże technika zalecana techniką wspomagającą jest spowodowane ciężko określić sugeruje kod todo może mały blok kodu równie implikować poprawki plikach wchodzących skład aplikacji inna bardziej doświadczona część respondentów odpowiedziała problemów związanymi długiem technologicznym używana specjalna tablica systemie zadań jira redmine pivotaltracker bądź bugzilla norwescy badacze stwierdzili najlepsza możliwa forma długu technologicznego tablica skonstruowana oddzielnie stosunku realizowanych zadań a zarazem programista poświęca czas uporządkowanie kodu dokładnie wiemy czasu poświęcił zadanie programiści napotykają problemy kodzie problemu tworzyć zadania rozwiązują mniej palące kwestie oprogramowania wskazują zauważone zaszłości systemu zadania powinny wyglądać narzekanie lament temat złej struktury kodu jeśli osoba zespołu widzi problem rozwiązania powinien mieć czas opisanie zasugerowanie mocno spowalnia pracę kolegów bądź systemu względem wydajności spróbować oszacować czasu powinno zająć zadanie tablica taka powinna traktowana kierowników projektów ujście frustracji programistów każdy problem znajdujący liście samoczynnie zniknie każde zadanie listy powinno zrewidowane architekta aplikacji bądź osobę najbardziej zaznajomioną modułem osoba odpowiedzialna weryfikację zgłoszonego zadania powinna przemyśleć sens połączyć zadania odpowiadają element poprawić estmaty następnie zadanie odpowiada jakość kodu a poprawką wydajnościową aplikacji powinno skierowane właściciela bądź kierownika produktu następnie każdej iteracji tworzenia oprogramowania powinien przeznaczony czas poprawek jakościowych zgłoszonych takiej tablicy jest wygodna metoda redukowania długu technologicznego przynajmniej czasu wyjścia nowocześniejszej metody tworzenia aplikacji jaką pracujemy statystyczna analiza kodu inną metodą walki długiem technologicznym testy statyczna analiza kodu statyczna analiza kodu polega przejrzeniu struktury aplikacji ide określenie miejsc funkcje powtarzają warunki pętli szansy wykonać funkcje zmienne wykorzystywane naszej aplikacji taka forma testów pozwala trzymanie kodu dobrej kondycji zaśmiecanie kodu niepotrzebnymi elementami zaciemniają postrzeganie kodu według norweskich badań najczęstszą technologią ide analizy statycznej sonarqube drugą wspomnianą metodą mierzenia wzrastającego długu technologicznego testy metryka pokazująca liczbę błędów wykrywanych testy testerów produkcji momencie pomocna jeśli zauważymy jakimś module liczba błędów narasta a funkcjonalności stworzone zachowaniem najwyższej jakości oznaczać dany moduł mieć problemy stworzoną architekturą którą należałoby zrewidować poprawić celu zmniejszenia powiązań między funkcjonalnościami jeśli będziemy zwracać uwagi narastającą ilość błędów okazać skończymy naszego projektu powiązania błędy przerosną wartość dodaną produktu techniki monitorujące dług technologiczny dodatkową techniką podnoszącą jakość produkcji skomplikowanych systemów audyt jakościowy co pewien okres sprint powinien przeznaczony poprawienie jakości zaobserwowanie miejsc problem architekturą audyt typu stosowany firmie uber został zaprezentowany książce susan j fowler sprawdza doskonale dużych projektach utrzymywane długi czas wiele osób osoby podczas specjalnego spotkania architektem proszone zaprezentowanie rozumieją aktualną strukturę aplikacji modułu działanie wytłumaczenie funkcjonalności modułu uporządkowany zajmuje reguły sporo czasu odbywa indywidualnym spotkaniu zmniejszyć stres pracownika pozwala zaobserwowanie części systemu programiści rozumieją pojawiają obejścia postępuje narastanie długu technologicznego zadanie należy sprawnego architekta zauważy problemy stworzy zadania polegające uproszczeniu konstrukcji bądź zoptymalizowaniu reszta czasu przeznaczonego audyt powinna przeznaczona rozwiązanie typu kwestii to cykliczne wydarzenie dodatni wpływ jakość produktu zespół cyklicznie komunikować problemy zrozumieniem produktu przedstawić wątpliwości niejasnej struktury kodzie podsumowując techniki monitorujące należy zaznaczyć zarówno audyt stworzenie tablicy błędami testy sprawdzają mocno konstrukcja stała niestabilna pozwalają analizę wielkości istniejącego długu technologicznego aby zobaczyć przyszłość ewentualne pogłębienie długu należy zatrudnić sprawnego architekta analizuje aktualną sytuację rynku technologii niestety narzędzie stanie planować architektury lider technologiczny powinien posiadać czas przeanalizowanie nowo pojawiających opcji analiza powinna zawierać czas zaplanowanie prac zmienią produkt używa najnowszych zdobyczy techniki jeśli sytuacja zostanie przeanalizowana zostaniemy dinozaurem przegonionym konkurencję szybciej adaptującą rynku dodatkowo należy nadmienić metoda pozwala wyeliminowanie długu technologicznego całkowicie metody pozwalają redukować dług utrzymywalnego poziomu błędy ludzkie nieustanny rozwój zmiany technologii pozwalają pozostawienie systemu samemu skończyłoby pewno prototypy prototyp początkowa wersja produktu pokazać wartość biznesową pomysłu do pracy prototypem reguły przeznaczona mała grupa ludzi rozwijających oprogramowanie małą skalę stąd nazwa mvp minimum viable product dopiero prototyp pozyska pewno grono zainteresowanych klientów prototyp przekształcany pełnoprawny produkt dodatkowo projektu dostarczeni dodatkowi ludzie ułatwić przynoszenie dodatkowej wartości biznesowej szybszy tego typu podejście opisane książce dan a olsena porównuje zespołu rzuca małymi kamieniami różnych kierunkach nasłuchując kamień trafi ciekawego jeśli kamień pewnym wyda interesujący dźwięk wytaczamy ciężkie działa sprawią osiągniemy satysfakcjonujący efekt mimo tworzenia nowych funkcjonalności należy pamiętać mvp produktem pierwotnych analiz klienci oczekują dlatego pierwszej kolejności należy ustalić wymagania funkcjonalne niefunkcjonalne spełniać produkt pierwsza wersja aplikacji znacząco różni czego oczekiwać prawdziwi użytkownicy systemu często klient płaci produkt zdaje sprawy czego użytkownicy naprawdę chcą dlatego pierwszych wersjach systemu należy skupić tworzeniu kodu możliwie najłatwiej przystosowany zmian zmiany prototypach występują operacje zwane pivotem zmianą pozwalającą lepsze dopasowanie firmy rynku jest naturalne zachowanie startupów w takim momencie systemu wycinane najlepsze elementy odpowiednie algorytmy zdarza prototyp tworzymy ląduje koszu prace zaczynamy początku jest sytuacja podobna przerośniętego długu technologicznego okazuje czas poświęcony poprawki przekroczyłby czas tworzenia nowego systemu przyznanie błędu niewątpliwie ciężkie zaprezentowane odpowiednim momencie potrafi zaoszczędzić pieniędzy firmy klienta dług architekta należy pamiętać stworzyć prototypu wprowadzić produkcję zazwyczaj prototyp powstaje innymi technikami mniejszą skalę prawdziwy produkt z powodu posiada dług technologiczny pozbyć wdrożeniem wielką skalę dług rozmyślnym posunięciem strategicznym dobrze skalowalne rozwiązanie znacznie przekracza czas przeznaczony stworzenie całego prototypu zastosowanie rozwiązania taką skalę kompletnie bezużyteczne jesteśmy pewni wartości biznesowej produktu a efekty testujemy małej grupie użytkowników testach walidacji biznesowej w takim wypadku inteligentny architekt zaciąga dług przyszłości zamiar spłacić niedorzecznym wydaje tworzenie aplikacji cały rynek zainteresowany kulturystyką okazać założenia kompletnie chybione z drugiej strony tworzenie małego prototypu wdrażanie pełną skalę produkcyjną ludzie przekazywać dostęp mało rozsądne ilość użytkowników powinna ustanowiona klientem początku wymagania niefunkcjonalne klient niektóre wymagania zbyt wygórowane specjaliści zadanie rzetelnie poinformować klienta zaistniałej sytuacji przygotować model bezpiecznego wdrożenia systemu rynku system projektowany mniej restrykcyjne wymagania reguły zablokuje dostęp sprawi cała struktura stanie niestabilna pozostawi użytkowników dużą dozą niezadowolenia ludzie reguły niecierpliwymi istotami jeśli technologia którą dostarczyliśmy zacinać niedużo lepsza konkurencji najprawdopodobniej użytkownicy wrócą starych nawyków aplikacji działają natychmiastowo odzyskanie zaufania potrwać długo sprawi najważniejsze początkowe zyski wystarczające przetrwać zachwycić użytkowników należy założyć prototyp małą wersją większej aplikacji należy zredukować wymagania funkcjonalne niefunkcjonalne takiej grupy pozwoli stworzenie aplikacji działającej małym zakresie zaciągnięcie takiego długu zazwyczaj decyzją architekta powinna dotyczyć momentu wzbudzeniem zainteresowania użytkowników podsumowując kiedy skupić długu a funkcjonalnościach dług technologiczny podstępnym efektem ubocznym tworzenia utrzymywania oprogramowania w każdym projekcie miejsce programiści muszą stosować refactoring braku bezpośredniego wpływu wartość biznesową rozwijać projekt terminie zachowaniem wymagań niefunkcjonalnych aby początku szybko walidować idee możemy zaciągać dług technologiczny wykorzystując pewne uproszczenia algorytmów sprawią produkt szybciej zwalidowany biznesowo musimy pamiętać dłuższej perspektywie spłacić dług pracując jakością stworzonego rozwiązania oficjalnym wdrożeniem systemu w dłuższej perspektywie współpracy klientem należy wplatać refactoring czas naszej pracy wykorzystując podstawowe techniki tj code review pokrycie aplikacji testami aby przepalać czasu irytuje klienta móc zaprezentować klientowi wyniki jakimi pracujemy należy monitorować status naszego projektu aby robić efektywnie pory zaprezentowałem stworzenie tablicy problemów zgłaszanych programistów audyt jakościowy pokazujący zrozumienie struktury aplikacji programistów w skład grupy metod wchodzi statyczna analiza kodu pozwala uproszczenie konstrukcji kodu stworzenie bardziej zrozumiałej struktury jeśli potrzebujemy twardych liczb przekonać klienta racji wykonywania refactoringu przedstawiam kilka ostatnich metod policzalnych pomiarów oparciu wyżej wymienione techniki dbanie jakość dostarczanych aplikacji najważniejszym zadaniem zespołów projektowych refactoring pozwala trzymać systemy braku bezpośredniego wpływu wartość biznesową projektu pośrednio proces potrzebny tlen istotom oddychania bez refactoringu uporządkowania entropia tworzonych zmian poprawek rozdarła kod a spędzalibyśmy olbrzymią ilość czasu analizowaniu zagmatwanej logiki aplikacji jeśli kogoś przekonują metryki a bezpośrednia wartość pieniężna wynikająca kosztów operacyjnych znalazłem argument czysto matematyczny w została wydana książka między innymi opisuje kątem finansowym należy wprowadzić refactoring projektu na podstawie książki stworzyłem cztery wzory pomagają ustalić każda iteracja posiada swój koszt utrzymania aktualnego kodu w przypadku książki rok uważam koszt kwartału sprawdza aby wyliczyć koszt iteracji należy policzyć kosztują zmiany błędy powstałe aplikacji pomocą prostego wzoru błędy zmiany wszystkie zmiany powstają procesie tworzenia oprogramowania klienta drugim krokiem obliczenie kosztu pracy refactoringiem zespole pomocą wzoru następnie obliczyć współczynnik przyrostu kosztów aby zrobić skorzystać wzoru dodając siebie koszty utrzymania ostatnich n kwartałach wyliczone wzorem następnie podzielić wartość koszt pierwszego kwartału biorącego udziału pomiarze pomnożony n następnie odjąć wartość wyjdzie wartości otrzymamy znormalizowany przyrostu kosztów utrzymania zazwyczaj równania używa ostatnich kwartałów otrzymać mniej zaburzony wynik możemy dodać więcej miesięcy równania dużo osób zatrzymuje kroku wylicza przyrost kosztów wynosił więcej jeśli wartość miary wynosi więcej korzysta refactoringu są różne uzasadnienia decyzji jedne teorie mówią zysk jakościowy refactoringu czym zgadzam bierze uwagę późniejszej opinii naszej firmie twórcy oprogramowania inna kuriozalna teoria brzmi zebralibyśmy cały koszt utrzymania aplikacji danym kwartale banku lokatę otrzymalibyśmy większy zysk jeśli chcemy klienta oszacować dokładną miarę zysku należy skorzystać wzoru tzn dodać siebie wynik wzoru ostatniej iteracji a następnie odjąć koszt ostatniej iteracji pomnożony współczynnik zysk powinien wyjść walucie którą wyliczyliśmy pozostałe wartości mimo koszt najbardziej poprawny przekonać wiele osób osobiście uważam pomija wiele ważnych cech ryzyko danym momencie utrzymania projektu może okazać kod zagmatwany koszt utrzymania momencie rozpoczęcia pomiaru duży w takim wypadku kolejnych miesiącach koszt zwiększał powinien zawyżony sprawiał kłopotów programistom nawet duże błędy popełnione programistów zmieniać współczynniku inną sprawą fakt wysokim ryzyku uzyskanym podczas tworzenia oprogramowania zdarzyć refactoring zastosowany przewyższa jakiekolwiek koszta produkcji oprogramowania wyliczone estymaty zawierają informacji programiści konsumują czasu zajmując wszczepianiem swoich rozwiązań istniejący system głównym kosztem tworzenia oprogramowania sądzę estymaty pasują bardziej czysto utrzymaniowych zespołów niedużym długiem technologicznym zdarza niezbyt refactoring jedną istotniejszych rzeczy sprawiają produkt potrafi dojść fazy wydania właściwych użytkowników zachęcam monitorowania długu technologicznego proste potrzebne produktu metryki testy liczba zadań wróciła fazy produkcyjnej czas odpowiedzi jeśli pewna metryka zaczyna sprawiać kłopoty przeprowadźmy mały audyt stwórzmy tablicę problemów zlokalizujmy błędy naszym zespołem sprawi niskim kosztem oszczędzimy wielu godzin pracy celu wprowadzenia zmian skomplikowanego testowalnego kodu zaoszczędzony czas przyszłości będziemy mogli wykorzystać tworzenie szybciej cennej wartości biznesowej bibliografia a martini t besker j bosch technical debt tracking current state of practice a survey and multiple case study in large organizations science of computer programming elsevier pp october j verner j sampson and n cerpa what factors lead software project failure second international conference research challenges in information science marrakech pp doi rcis s fowler production ready microservices o reilly media edition december d olsen the lean product playbook how innovate with minimum viable products and rapid customer feedback wiley edition june i mistrik r bahsoon r kazman y zhang economics driven software architecture morgan kaufmann edition july projektując aplikacje używają dokumentowej bazy danych cosmosdb stajemy wyzwaniem oszacowania kosztu późniejszej optymalizacji zadanie trywialne jeśli chodzi koszt możemy użyć kalkulatora wystarczy podamy parametry rozwiązania liczbę nowych dokumentów odczytów wgramy przykładowe dokumenty po uzupełnieniu informacji otrzymamy estymację kosztu rozwiązania michał jankowski low code technical practice leader technical architect at objectivity microsoft mvp azure an architect designer team leader and trainer he began programming in the early from basic and assembler for bit computers during most of his career he delivering net platform targeted application for the world s largest companies currently he is specialising in the development of web applications and azure environment in his free time he likes writing a technical blog na podstawie informacji możemy zastanowić chcemy skorzystać bazy cosmosdb czy stać chcemy pomyśleć innym rozwiązaniem jeśli zdecydujemy cosmosdb moich obserwacji wynika programiści najmniejszych problemów wystartowaniem prac perspektywy użycia bibliotek komunikacji bazą danych czasami trochę więcej czasu potrzeba przejście tory myślenia zaprzestania traktowania bazy cosmosdb relacyjnej prędzej później pojawia potrzeba optymalizacji kosztów zapytań powody różne a przekraczamy budżet a któreś zapytania zaczynają działać zbyt wolno generalnie musimy zrobić naszą bazą danych zapytaniami w sytuacjach powinniśmy działać oślep za każdym razem powinniśmy odnieść statystyk wykorzystania naszego systemu dużym prawdopodobieństwem zacząć optymalizację najczęściej występujących zapytań i przypadku pojawia drobna przeszkoda większość przyzwyczajona dokładnych statystyk udostępniane azure sql analiza danych query performance insight pozwala rozpoczęcie prac optymalizacyjnych przypadku azure sql w przypadku cosmosdb różowo dostępnych kilka podstawowych charakterystyk to możemy sprawdzić kątem ru jednostek ru zużywa baza danych przekracza limitu przydzielonego partycję z danych ciężko wywnioskować powinniśmy rozpocząć optymalizację możemy natomiast zobaczyć dobraliśmy poziom ru naszego rozwiązania chciałbym mieć możliwość monitorowania poziomie każdego zapytania z możliwością podejrzenia dokładnie zapytania zostało wysłane bazy danych poziomie ogólnym możemy zagregować dane podstawie podanego typu tak abym mógł uzyskać informację konkretnym zapytaniu postaci tabelarycznej na podstawie danych możemy spróbować zaplanować optymalizację naszych zapytań jak widzicie przechowujemy następujące dane nazwę typu zapytania czas zapytania treść zapytania nazwę kolekcji zapytanie dotyczy koszt zapytania najważniejsze możemy dane wyeksportować przeanalizować zgodnie naszymi potrzebami aby osiągnąć wystarczy napisać rozszerzenie cosmosdb loguje dodatkowe parametry application insights kod rozszerzenia wygląda następująco następnie wystarczy momencie wywołania zapytania cosmosdb wywołać logowanie dodatkowo wywołując zapytanie możemy ustawić nazwę przyszłości grupować informacje zapytaniach samego typu przywykliśmy trzymania konfiguracji plikach tekstowych stopnia zastanowienia wrzucamy hasła bazy danych dane uwierzytelniające co dalej commit push całość ląduje repozytorium kodu jakie zalety podejście jest proste szybkie daje dostęp bazy danych wszystkim zainteresowanym a wady jest proste szybkie daje dostęp bazy danych wszystkim zainteresowanym sebastian feduniak co founder of pattern match devops engineer programista java doświadczony konsultant it swoją wiedzę devops zastosował wielu różnych dziedzinach m in adtech e commerce travelling iot ma doświadczenie wirtualizacji systemów fizycznych konteneryzacji lubi dzielić wiedzą blogach technicznych miłośnik gór no a poważnie jakie wady podejście najczęściej korzystamy ogólnodostępnych repozytoriów kodu github gitlab stanowi zagrożenie ktoś niepowołany uzyska dostęp naszego konta powyższe zagrożenie większe naprawdę wystarczy złamać choćby jednego użytkownika dostęp repozytorium kodu może dojść pomyłki wyniku repozytorium kodu staje publicznie dostępne teoretyzuję spotkałem każdy dostęp repozytorium kodu dane dostępowe bazy danych produkcji powoduje ktoś celowo omyłkowo wprowadzić niepożądane zmiany zmiana hasła użytkownikowi bazy danych taka oczywista biorąc uwagę aplikacja cały czas korzysta nie mówiąc sytuacji wiesz wiele programów używa bazy kwestia estetyki nie odczuwasz lekkiego wstrętu mając pierwsze programistyczne szlify sobą wpisujesz hasło pliku plain textem okazuje najmniej kilka sposobów rozwiązania problemu jeden szyfrowanie haseł trzymanych repo odszyfrowanie procesie ci cd możliwe używasz ansible vault inny pobieranie danych zewnętrznego hashicorp vault w wpisie przedstawię natomiast implementację wykorzystaniem serwisu aws secrets manager możesz zastosować niezależnie używasz infrastruktury aws natomiast twoja aplikacja baza danych uruchomione aws opisane rozwiązanie zyskuje więcej zalet zapraszam lektury wróć klawiatury dłoń kodzimy o aws secrets manager słów kilka po przeczytaniu opisu stronie aws pozostaje wiele dodania aws secrets manager menedżer haseł zapewnia następujące funkcje bezpieczne przechowywanie haseł wykorzystaniem szyfrowania raczej oczywiste audyt operacji wykonywanych hasłach dzięki integracji innymi serwisami aws dowiedzieć hasło zostało zmienione skasowane dostęp haseł wykorzystaniem api płatne natomiast cena odstrasza szczegółowe zarządzanie dostępem haseł dzięki integracji aws iam jeśli aws wyszło pewno iam dzięki zapomnisz problemach przydzielaniem odpowiedniego dostępu użytkownikom aplikacjom automatyczna rotacja haseł killer feature ponieważ aplikacja pobiera hasło api możesz zmienić dowolnym momencie jednego miejsca natychmiastowym efektem wszystkich aplikacjach używają danego hasła aws secrets manager zrobić ciebie zgodnie zadanym interwałem bez obaw nie pisałbym wdrożenie rozwiązania przesadnie skomplikowane sam zobaczysz plan zapewniam przechodzimy konkretów technicznych będziemy pracować aplikacji którą zbudowałem potrzebę innych artykułów zgrabny opis projektu znajdziesz repo a interesuje cię powstawał projekt zapraszam odwiedzin mojego firmowego bloga plan wpis następujący utworzymy bazę danych serwisie aws rds stworzymy użytkowników dedykowanych testowanej aplikacji hasło dostępowe użytkownika umieścimy aws secrets manager zaczniemy prostej przeróbki programu dzięki uzyskamy dostęp bazy danych wykorzystaniem aws secrets manager użyjemy aws sdk wprowadzone zmiany przetestujemy przygotujemy kątem local development corner case sprawdzimy prosta przeróbka wytrzyma próbę zmiany hasła uruchomimy zaimplementujemy rotację haseł aws secrets manager zastąpimy naszą implementację biblioteką dostarczoną aws sprawdzimy algorytm zastosowany bibliotece obsłużyć rotację haseł możliwy wpływ koszt używania serwisu aws ostatecznie zastanowimy prawdopodobnym scenariuszem całą zabawę aws musimy rozpocząć migracji bazy danych aws rds spójrz diagram rozwiązania wspólnie przygotujemy zaczynamy zmiany kodzie oznaczone tagami mógł dotrzeć interesującej cię części zaczynamy authentication token revocation step stworzenie bazy aws rds w pierwszym kroku stworzymy bazę danych posłuży testach otwórz konsolę aws przejdź serwisu rds stwórz bazę postgresql według wskazówek stronie najmniejsza baza parametrami poniżej zupełności wystarczy use case dev test class db t2 micro multi az no public accessibility yes backup days disabled enhanced monitoring disabled performance insights disabled database name springboot_blog nie zaleca używania master account aplikacji zaloguj bazy stwórz dedykowanego użytkownika komendą poniżej od momentu będziemy używać konta master step zapisanie hasła aws secrets manager w kroku hasło stworzonego użytkownika bazy danych zapiszemy serwisie aws oprócz zamieszczonych instrukcji możesz posiłkować oficjalną dokumentacją otwórz konsolę aws przejdź serwisu secrets manager otwórz kreator dodawania sekretu wybierz typ credentials for rds database skopiuj nazwę użytkownika hasło komendy sql którą wykonałeś bazie zaznacz bazę rds używasz testów w następnym kroku podaj nazwę następnie zaznacz disable automatic rotation zapisz zmiany zauważ podsumowaniu ostatniej stronie kreatora otrzymujesz gotowy kodzik służący pobierania hasła twojej aplikacji sprawdzimy działający kodzik na etapie stronie aws przechodzimy aplikacji testowania step zastosowanie aws sdk pobierania hasła trakcie inicjalizacji bazy danych tag repo rds and aws secrets manager sdk do pory aplikacja używała bazy danych h2 przechowywała dane pamięci w kroku dodamy konfigurację postgresql jednocześnie wprowadzimy profile uruchomieniowe produkcyjny testowy w testowym działanie aplikacji zmieni podobnie zadbamy zmiany naruszyły testów automatycznych w trybie produkcyjnym aplikacja aws rds użyciu danych aws secretes manager do dzieła w pliku build gradle dodaj zależności potrzebujemy sterowników h2 postgresql zależności trybu uruchomienia aplikacji aws sdk posłuży komunikacji serwisem secrets manager dodatkowo potrzebna dowolna biblioteka parsowania json następnie stwórz nową klasę odpowiedzialna tworzenie połączenia bazy danych rds zwróć uwagę adnotację profile prod zapewniamy obiekt klasy tworzony trybie produkcyjnym tworzenie springowego datasource standardowe natomiast pobieranie hasła bezmyślnie skopiowany kod strony kreatora którą widziałeś poprzednim kroku dodałem parsowanie json prostego pojo tak lubię co dalej dodaj plik konfiguracyjny spring framework pamiętaj pliku znalazł suffix prod podstawie wybierany profil aplikacji warto zauważyć wyłączamy autokonfigurację datasource trybie produkcyjnym tworzona manualnie to w repozytorium znajdziesz kilka zmian wspomagają local development natomiast skupmy testowaniu nowej implementacji step testujemy zacznij dodania klucza twojego konta aws zmiennych systemowych jeśli posiadasz klucza utwórz według oficjalnej dokumentacji a następnie dodaj trzy zmienne następnie uruchom aplikację jeśli poszło wykonajmy poniższą komendę potwierdzenia połączenie bazą danych działa jeśli odpowiedzi zwrotnej otrzymujesz http znaczy działa zatem zrobione idziemy domu nie przecież sprawdzić rotację haseł step symulacja zmiany hasła pułapka zanim przejdziemy właściwej rotacji haseł serwisie aws secrets manager zróbmy prosty test pozostaw uruchomioną aplikację podłącz bazy danych zmień hasło twojego użytkownika modyfikując komendę poniżej powtórz test poprzedniego punktu działa działa i pułapka możemy zauważyć pierwszym momencie no zacznijmy prostego teoretyzowania czy prawo działać połączenie bazy danych tworzone podczas startu aplikacji obiekt klasy datasource singletonem uruchomieniu aplikacji zmieni manualnej interwencji natomiast wiemy dodaliśmy kodu obsługi zmiany hasła to prowadzi wniosku program działa zmianie hasła chyba aplikacja tworzy pulę połączeń jak widzisz zrzucie aktywnych połączeń bazy pozostają aktywne zmianie hasła w zależności konfiguracji puli połączeń liczba zmieniać czasie obecna implementacje działać czasu nastąpi potrzeba utworzenia nowego połączenia prędzej później znajdziesz logach następujący wpis skoro zaszliśmy pójdźmy dalej poszukajmy kodzie potwierdzenia powyższej tezy wielu używa spring framework niewielu zadaje pytania bebechy narzędzia wyłączam profesorski ton przechodzimy debugowania step cała prawdo puli połączeń zacznij sprawdzenia implementacji javax sql datasource używa aplikacja okazuje com zaxxer hikari hikaridatasource domyślnie używa puli połączeń domyślnymi ustawieniami potwierdza fragment kodu jeśli spojrzysz dalej implementację metody javax sql datasource getconnection zobaczysz najpierw próba pobrania połączenia puli ponadto domyślne ustawienia powodują nieaktywne połączenia zamykane minutach problem całkiem szybko wyszedłby jaw pełna lista parametrów konfiguracyjnych zamieszczona stronie biblioteki mamy no lessons learned zróbmy porządnie step wsparcie rotacji haseł twojej aplikacji tag repo rds password rotation zaczniemy prostej przeróbki testowanej aplikacji zapewni dostęp rds niezależnie rotacja haseł włączona zmiany banalne ograniczają zastosowania odpowiedniej biblioteki dostarczonej aws zacznij dodania właściwej zależności następnie wprowadź zmianę produkcyjnym profilu testowej aplikacji zauważ zmianie uległ sterownik chwilę prześledzimy kodzie konsekwencje nazwa użytkownika bazy powinna zawierać nazwę hasła podaną aws secrets manager klasę rdsdatasourceconfig java możesz usunąć skorzystamy autokonfiguracji springboot to uruchom aplikację pory poszukajmy fragmentu kodzie biblioteki potwierdzi aplikacja działała włączonej rotacji haseł aws secret manager najważniejsza zmiana jaka zaszła dodaniu nowej zależności driver bazy danych więcej informacji uzyskamy czytając kod metody connect zaimplementowana interesuje kawałek kodu z konfiguracji data source pobierany identyfikator hasła aws secrets manager wołana metoda connectwithsecret unwrappedurl info credentialssecretid spójrz implementację mając podany credentialssecretid następuje próba pobrania hasła cache jeśli uwierzytelnianie powiedzie następuje pobranie nowego hasła ponowna próba połączenia bazą danych zwróć uwagę szczegół biblioteka aws wrapperem obsługuje pobranie hasła driver używany realizacji połączenia zwracany metodę getwrappeddriver step włączenie automatycznej rotacji haseł ponowne testowanie wykonaliśmy wszystkie zmiany stronie aplikacji czas włączyć rotację haseł dopełnić diagram brakujące komponenty zaloguj konsoli aws przejdź aws secrets manager następnie przejdź trybu edycji sekretu używasz aplikacji włącz rotację hasła zapisz zaczekaj zniknie komunikat tworzeniu niezbędnych komponentów a dzieje spodem aws tworzy ciebie stack cloudformation utworzy lambda function odpowiedzialną rotację hasła automatycznie zostanie skonfigurowany cloudwatch dzięki któremu uzyskasz dostęp statystyk logów nowo utworzonej funkcji dodatkowo zostanie odpowiednio skonfigurowany dostęp lambda function bazy danych rds oczywiście możesz samemu zaimplementować funkcję zmiany hasła kod używany aws publicznie dostępny repozytorium jak widzisz etap wymagał dużych nakładów pracy twoja aplikacja gotowa chociaż miałem okazję spędzić trochę więcej czasu miejscu i chętnie opowiem step zrozumieć lambdę kiedy testowałem ciebie program okazało rotacja mojego hasła kończy błędem dziwne pomyślałem przecież niczego robiłem manualnie wszystko zrobiła konsola aws postanowiłem odpuszczać wziąłem debugowanie od czego zacząć punktem wyjścia powinny logi cloudwatch przypadku domyślnie skonfigurowany zaloguj konsoli aws przejdź lambda wybierz swoją funkcję rotacji a następnie otwórz zakładkę monitoring wybierz view logs in cloudwatch nie znalazłem więcej informację poniżej potrzebuję dodać więcej logów to trudne mamy czynienia prostą aplikacją napisaną python tutaj opcją pobranie kodu funkcji modyfikacja przejdź ponownie twojej funkcji pozostań otwartej zakładce wybierz actions a następnie export function download deployment package tutaj ogranicza cię twoja wyobraźnia w moim przypadku chciałem dowiedzieć funkcja połączyć bazą danych dlatego wypisałem błąd zwraca funkcja pgdb connect zaktualizować lambda function wystarczy zmodyfikowany kod spakować włącznie pozostałym plikami konsolę aws wybrać upload function package dodatkowym utrudnieniem testowaniu zmian kolejna rotacja zostanie uruchomiona dopóki poprzednia skończy pozostaje możliwość testowania bezpośrednio lambda function tworząc test event dla rotacji haseł następującą strukturę dwa pierwsze pola uzyskania secretid prostu arn funkcji rotacji haseł drugie pole akcja natomiast clientrequesttoken naprawdę identyfikator wersji hasła zostanie użyte próby połączenia bazą danych można uzyskać metadanych pobieranych fragmencie kodu funkcji po uruchomieniu testu okazało powodem błędu timeout próbie podłączenia bazy rds dalej poszedłem tropem braku między lambda function a rds po krótkiej inwestygacji okazało rds vpc pozwala dostęp funkcji spoza vpc ponieważ aplikacja służy celów testowych a baza rds publicznie dostępna szybkim rozwiązaniem problemu modyfikacja inbound rule natomiast zalecam metody rozwiązaniach produkcyjnych w wypadku lepszy rozwiązaniem umieszczenie lambdy vpc odpowiednie skonfigurowanie dostępu sieciowego rds po zastosowaniu jednego opisanych rozwiązań aplikacja powinna działać poprawnie posłowie dziękuję dotarłeś miejsca w wpisie przedstawiłem zalety aws secrets manger użycia integracji aplikacją springboot ponadto wyjaśniłem zasadę działania rotacji haseł przeprowadziłem krótką sesję debugowania lambda function jeśli artykuł ciebie ciekawy zostaw proszę gwiazdkę repozytorium mojego projektu wspomnę dwóch rzeczach bezpośrednio związanych tematem aws secrets manager możesz użyć niezależnie twoja aplikacja hostowana aws natomiast zyskujesz więcej możliwości dzięki integracji serwisów aws w przypadku dzięki odpowiedniej konfiguracji twoja aplikacja znać aws credentials kontaktu aws secrets manager wystarczy udostępnisz sekret maszyny działa twój program ponadto wielu przypadkach przygoda aws chociażby rds musiała rozpocząć migracji aplikacji bazy danych aws te problemy związane chmurą obliczeniową wielu rozwiązuje zespół pattern match zapraszam współpracy wszyscy chcemy aplikacje architektura najwyższej jakości powinniśmy starać kod tworzymy zamienił kod spaghetti kod kruchy kod sprawiał problemy będziemy chcieli zmodyfikować prostu konserwować z pomocą przychodzi solid warto wiedzieć rozumieć czym solid solid zbiorem dobrych praktyk architektonicznych programowaniu obiektowym pomagającym sprawić kod bardziej zrozumiały elastyczny zmiany zarządzaniu metodologia została wymyślona dawno poparta twórców czystego kodu robert c martin poraz pierwszy został zaproponowany michaela feathersa jest lepszym sposobem myślenia patrzenia projektowania aplikacji zorientowanych obiektowo pięć podstawowych zasad solid słowem zawarte zostały najważniejsze najpotrzebniejsze zasady którymi dobry programista powinien kierować szczerze mówiąc wszystkie spełnione stu procentach a solid wskazówkami programistów a receptą perfekcyjne tłumaczymy s srp single responsibility principle oznacza klasa metoda powinna posiadać jedną odpowiedzialność nie powinien istnieć więcej powód abyśmy chcieli zmodyfikować naszą klasę o ocp open close principle mówi klasy encje powinny zamknięte modyfikacje a otwarte rozszerzenia nie powinniśmy dotykać istniejącego kodu pracuje produkcyjnym przyczyną błędu powinniśmy móć dokonać zmian poprzez rozszerzenie kodu a modyfikację l lsp liskov substitution principle oznacza uproszczeniu klasa dziedzicząca powinna rozszerzać klasę bazową wpływu aktualne działanie i isp interface segregation principle inaczej mówiąc zasada segregacji interfejsów oznacza wiele różnych interfejsów lepsze duży zbyt rozbudowany interfejs każdy interfejs powinien tworzony zawierał najmniejszą ilość metod metody danej chwili niezbędne nie powinien zawierać metod nadmiarowych a wszystkie metody związane konkretnym interfejsem powinny znaleźć odrębnych interfejsach d dip dependency inversion principle zasada odwracania zależności mówi moduły wysokiego poziomu powinny zależeć modułów poziomu niskiego a wszystkie powinny zależne warstwy abstrakcji inaczej mówiąc powinniśmy operować bezpośrednio instancjach naszych klas zmiennych obiektów metod a interfejsach warstwami abstrakcji pozwalają rozbudowę dokonywanie zmian dlaczego solid w miarę rozwoju rozbudowy naszej aplikacji rozrasta wielu kierunkach powstają bugi każda dodatkowa modyfikacja próba naprawy aplikacji staje bardziej uporczywa wolna solid zbiorem dobrych praktyk pomogą budować aplikacje problemów uniknąć s single responsibility principle jest jedną najprostszych zasad solid mówi każda klasa powinna tworzona odpowiadała zadanie została przeznaczona nie możemy tworzyć fabryki produkuje samochody jednocześnie szyje buty nie powinniśmy tworzyć klas logika pokręcona przeplata pomiędzy wieloma odpowiedzialnościami konkretna klasa powinna odpowiedzialna jedną pracę klasa produkt powinna zawierać wyłącznie metody związane tworzeniem zarządzaniem produktem nie powinna zawierać przykład metod związanych logowaniem błędów tworzeniem statystyk itp zwrócmy uwagę poniższy przykład nasza klasa produkt implementuje naturalne metody związane operacjami produkcie addproduct removeproduct findproductbyid oprócz możemy znaleźć metode createerrorlog koniecznie bezpośrednio związana samym produktem a raczej ogólną metodą którą możemy zastosować wszystkiego produktu naszego customera kategorii możemy logować błędy wszystkich innych klasach niekoniecznie klasie produkt dlatego metoda związana logowaniem błędów powinna znaleźć odrębnej klasie odpowiada spełniona zasada pojedynczej odpowiedzialności powinno wyglądać klasa produkt cs klasa errorlogger cs w momencie będziemy mogli dowolnym miejscu naszego programu odwołać klasy errorlog porduct niezlaęzny każda klas posiada swoją własną odrębną odpowiedzialność warto pamiętać będziemy tworzyć aplikacje ta zasada najprostsza wprowadzenia swoich programach najbardziej uniwersalna o open close principle zasada mówi klasa powinna zamknięta modyfikacje a otwarta rozszerzenia każdy was pewno doskonale pewien intuicyjnie rozumie każda najmniejsza modyfikacja istniejącego kodu programu pracuje produkcji pociągnąć sobą serie niefortunnych zdarzeń skutek powstałych błędów dlatego dotykamy istniejącego kodu a raczej tworzymy klasy otwarte rozszerzenia wpływu aktualne zachowanie naszego programu powinniśmy tworzyć kod musiał zmieniać każdym razem zmienią wymagania biznesowe rzućmy okiem poszczególny kod mamy bazową klasę bankaccount reprezentacją konta bankowego banku posiada metodę getaccountfee nalicza opłaty utrzymanie konta jest metodą użytą różnych kont bankowych specialbankaccount vipbankaccount w momencie klasy dziedziczą siebie logika zawarta metodzie getaccountfee została wielokrotnie powtórzona co wiąże koniecznością modyfikacji wielu miejscach powinniśmy starać unikać powtórzeń naszego kodu powinniśmy duplikować samych metod klas przykład opłaty konto identyczne w zamian powinniśmy skorzystać kompozycji interfejsów zobaczcie sami tworzymy oddzielny interfejs iaccountfess zawierał pojedyńczą deklaracje naszej metody następnie klasy implementować interfejs metodę oczywiśćie interfejs klasa abstrakcyjna taką ktoś was woli generalnie dopisaliśmy drobne rozszerzenie istniejące funkcjonalności naszego programu skorzystaliśmy samej metody jednakże każdego innego konta bankowego opłaty ciało metody generalnie udało przykładzie zamknąć program modyfikacje a otworzyć rozszerzenia zobaczmy przykład mamy klasę dom house klasę obliczać powierzchnie domu surfacecalculator zawierająca metodę obliczania powierzchni zależności dom prostokątny kwadratowy nasza klasa bazowa house posiada trzy właściwości wysokość szerokość typ domu klasa calculatesurface posiada metodę obliczania powierzchni poszczególnych typów domów okej fajnie spełniliśmy wymagania pana mietka w chwili pan mietek szczęśliwy a stanie przyjdzie miesiąc powie firma sprzedaje domy okrągłe trójkątne prosi dokonanie modyfikacji naszego programu umożliwić obliczanie powierzchni domów okrągłych trójkątnych zmiana wydaje prosta przypadek trywialny jednakże przypadku rzeczywistych programów kod skomplikowany rozbudowany zmiana koniecznie prosta szybka bezpieczna dlatego spełnić idee zasady open close principle powinniśmy oprogramować tworzymy bazową klasę abstrakcyjną interfejs facility nieruchomość woli następnie rozszerzamy wszystkie dowolne typy domów rozszerzenie zwróccie uwagę pan mietek zadowolony nie znaczenia dodatkowych typów domów wprowadzi swojej oferty czy domy kształcie trapezów gwiazd pentagramów równoległoboków fraktali innych fikuśnych kształtów geometrycznych totalnie interesuje jeśli zmieni logika biznesowa dojdą wymagania klienta takiej formie zadeklarujemy klasę nowego typu domu będziemy rozszerzać klasę bazową reszty istniejących domów wogóle będziemy dotykać pozwoli uniknięcie błędów l liskov substitution principle zasada opracowana baraberę liskov wydaje troszkę skomplikowana jednakże prostych słowach mówi każda funkcja naszym programie powinna działać przewidywalny względu parametr przekarzemy klasę bazową klasę dziedziczącą generalnie mówiąc klasa audi koniecznie powinna dziedziczyć klasie mercedes a raczej powinny dziedziczyć klasie samochód bardziej ogólna intuicyjna typu obiektów dlaczego wyobraźmy spalanie audi obliczane podstawie prędkości odległości mercedesa silnik mercedesa zobaczmy antyprzykład zauważmy klasa bazowa vehicle posiada metodę drive naszą klasę bazową dziedziczy klasa taxi klasa airplain razem metodą drive jednak samolot przecież jeździć a raczej maszyną latającą dlatego przypadku złamanie zasady liskov możemy wykonać dziedziczenia poprawny nasz samolot jeżdził ulicach a raczej latał nasze dziedziczenie musimy zaplanować klasa pochodna mogła wykorzystać wszystkie metody klasy bazowej implementuje zobaczmy lepszy przykład zwróccie uwagę powyższy przykład udało zachować zasadę lsp w przypadku obiektów klasy pochodnej możemy użyc miejscu klasy bazowej dodatkowo nadpisujemy metody klasy bazowej a korzystamy brzmi skomplikowanie abstrakcyjnie może najbardziej prostym książkowym przykładem przykład prostokątem czasami kwadratem jednakże matematycznego punktu widzenia logiczne programistycznego koniecznie typu założenie przyczynić powstania wielu trudnych wykrycia błędów i interface segregation principle ta zasada powinna was miare prosta użycia intyuicyjna generalnie chodzi interfejsy klasy abstrakcyjne implementujemy możliwy najbardziej odchudzone zawierały metody najbardziej istotne klasy dziedziczące danej chwili korzystać zasada pozwala uniknąć implementowania niepotrzebnej ilości nadmiarowych metod koniecznie będziemy korzystać zobaczmy następujący przykład rozwlekłego spasłego interfejsu w powyższym przykładzie klasę bazową phone telefon implementuje interfejs iphone zwróćcie uwagę metody znajdują zastanówcie chwilę telefon posiada możliwość internetem przesyłania plików bluetooth nawigowanie pomocą nadajnika gps w sumie pewnie większość znajdzie pani grażyna pana mietka korzystać ciągle starej nokii ficzerów dlatego telefon pani grażyny potrzebuje implementować metod korzystać powinien implementować kilka jak powinno zrobione rozbijemy inerfejsy najbardziej możliwy wygodny następnie klasy implementować interfejsy metody potrzebne no gra gitarka stary telefon nokia dzwonić wysyłać smsy nowy iphone apple robić troszkę więcej idea fajna sensu implementować metod danej klasie danej chwili potrzebne dlatego staramy odchudzić interfejsy najbardziej możliwy d dependency inversion principle to ostatnia zasada mówi powinno zależeć czego inaczej mówiąc wszystkie obiekty powinny zależeć warstwy abstrakcji a konkretnej klasy idąc głębiej deklaracji klasy funkcji metody powinniśmy bezpośrednio używać nazw klasy a naszych interfejsów klas abstrakcyjnych postaram przedstawić kolejnych przykładach mamy następujące klasy reprezentują różne metody wysyłania wiadomości sms mms fax email oraz klasę powiadamia wysłanych wiadomościach zobaczcie zrobiliśmy powstało mamy nadrzędną klasę messenger bezpośrednio zależy klas podrzędnych sms mms fax email zbudowaliśmy stałe powiązania sprawiają kod momencie elastyczny nie prosty modyfikacjach konserwacji nie możemy wynieść klasy messenger oddzielnej biblioteki posiada sztywne zależności tak naprawdę więcej instancji new będziemy mieć swoim kodzie więcej powiązań będziemy tworzyli nasz kod zależny konkretnych klas a warstwy abstrakcji co możemy zrobić zamian tak naprawdę pozbyć niepotrzebnych powiązań między klasami sprawić klasa messenger bezpośrednio powiązana klasami sms mms fax email musimy wprowadzić dodatkową warstwę abstrakcji sprawi klasy podrzędne zależne warstwy abstrakcji a bezpośrednio klasy messenger dlatego dobrą praktyką wprowadzenie interfejsu imessage zawierał jedną metodę sendmessage następnie interfejs zostać zaimplementowany dodatkowa warstwa abstrakcji poprzez klasy podrzędne wiadomości i generalnie klasa messenger klasa nadrzędna zależeć naszej warstwy abstrakcji imessage a bezpośrednio konkretnego typu wiadomości jest tyle fajne znaczenia rodzajów dróg którymi możemy przesyłać wiadomości możemy dopisać dowolną ilość uzależnić naszej warstwy abstrakcji a reszta kodu pozostanie zmian dzieje dip principle został wprowadzony celu minimalizacji powiązań naszym kodzie czego dążymy naszym celem przemyślenia generalnie solid podejściem zapewnia przejście mocno powiązanego mało spójnego kodu słabą enkapsulacją kodu luźnych powiązaniach elastycznego działającego spójnie reagującego zmiany sam solid sprawdza firmach stosuje agile development samo zrozumienie niektórych zasad podejścia sprawić pewną trudność jednakże nauczymy aplikację działać a pytać działać dług technologiczny programowania znanym zjawiskiem część firm zna konsekwencje zastania bieżąco usprawnia kod chociaż przynosi korzyści biznesowi z drugiej strony groma rozwiązań firm zostają starych zasadach boją ruszyć kod pójść dzisiaj opiszę prosty migrować projekty net framework net framework net standard net core pomocą jednego kliknięcia zarazem zachowując kompatybilność wsteczną piotr czech konsultant firmie vlog wspiera rozwój oprogramowania klientów budował systemy oparte rodo mobilne systemy telemetryczne zbierające przetwarzający dane kierowcach celu obniżenia ubezpieczeń między zadaniami poprawianie bugów entuzjasta podejść architektonicznych systemach budowania wydajnych rozwiązań opartych platformę net poprzez eksplorację nowych technik uczenie innych gonienie przykładają kodu geneza przed pojawieniem visual studio projekty tworzyliśmy miały pewien standard wypadku zaszłości net frameworka wpisane pliki csproj przykładowy plik csproj zaczynał taki plik mógł mieć lini kodu przykład tworzyliśmy aplikacje typu spa wydajność takiego projektu tragiczna chodzi indeksowanie ogromnych ilości plików taki plik posiadał wiele magicznych sformułowań plików microsoft common props rozszerzeniami targets ustawień mówią nowe podejście jako wielkimi krokami zbliża net podjąć decyzje uproszczeniu procesu integracji trzech zmienienia podejścia zarządzania paczkami nugetowymi pierwsze szlaki przetarły rozwiązania zawarte visual studio m in nowy format nowy format plików został uproszczony bibliotek wygląda dla aplikacji konsolowych a projektów testami przy okazji testów widać nowy system paczek zaletą nowego podejścia działają wirus projekt zaraził używa dzięki wystarczy dodać paczkę a dostępna każdym projekcie używa konkretnego projektu to samo tyczy referencji projektów idąc dalej ciosem jesteśmy stanie dzięki nowego formatowi zbudować projekt targetował naraz trzy platformy przykładowy format projektu agreguje zewnętrzne paczki newtonsoft json dostępny każdej platformy a reszta paczek według platformy to zmieniło targetframework stał targetframeworks projekty asp net komaptybilne nowym formatem względu zaszłości to oznacza zostaje stary format masowa migracja standaryzacja kodu nie sensu wykonywać kodu migracji ręcznie powstał csprojtovs2017 pójdźmy krok dalej poza samą migracją przydałby wszystko zrobić zamachem w takim celu istnieje mechanizm składa dwóch plików directory build props directory build targets zadaniem pierwszego zdefiniowanie ustawień wersja języka załączonych plików załączonych paczek zadaniem drugiego zdefiniowanie skryptów uruchomią podczas budowania projektu directory build oznacza tyle plik umiejscowiony poziomie solucji zdefiniuje każdego projektu same reguły zostaną dołączone pliku csproj potrzeby ręcznego kopiowania każdego projektu przykład directory build props przykład directory build targets deploymentsettings props współdzielonej biblioteki deploymentsettings props standardowych solucji nuget config kopiujemy directory build props directory build targets deploymentsettings props nuget config folderu solucją przed budowaniem projektu system szuka paczki xeinaemm analyzer pobiera pliki konfiguracyjne zdefiniowane folderze content build buduje projekt a potem chcemy wdrażać paczki lokalnego repozytorium wykonuje paczkowanie sama migracja projektów znajduje visual studio komendą clean clean solution po migracji pamiętać przestawieniu flagi deploymentsettings props wykonywał każdym razem migracji projektów wsteczna kompatybilność aby zapewnić wsteczną kompatybilność większość wymienionych funkcjonalności wyłączona znajdzie projekcie plik packages config stary nowy system działać naraz samym projekcie aby zapewnić centralne zarządzanie paczkami nugetowymi warto pomyśleć stworzeniu projektów zawierają paczki xeinaemm nuget autofac w moim wypadku agregat wszystkich paczek nazwą xeinaemm nuget dzięki takiemu zabiegowi nowy system stanie korzystać wirusowego zaciągania paczek zdefiniowane miejscu a zarazem stary system dostaje wersje paczek ustalone góry dzięki czemu eliminujemy problem różnych wersji samej paczki dodatkowo podział paczek grupy pozwala zaciąganie potrzebnych zależności starych projektach dla nowego formatu miejscu zauważymy zależności zmieniony system zaciąga czegoś czego używamy chociaż sposobność używania zauważyć rozwinięciu dowolnego projektu paczki sekcji dependencies nowego formatu podsumowanie całe rozwiązanie znajduje xeinaemm standard współdzielonej biblioteki spatemplate standardowej solucji znajdziesz rozwiązania automatyczne generowanie kodu dzięki rozwiązaniu tymczasem nadzieję wyniosłeś siebie następnego
szczegółowe opisy niektórych mechanizmów końca zrozumiałe póki sami wypróbujemy dlatego postanowiłem stworzyć podsumowanie pokazujące różne sposoby użycia niepoprawnego cookie atrybutami domain path oprócz pokazałem wpływ bezpieczeństwo aplikacji możliwość wykorzystania różnych atakach michał dardas pentester logicaltrust na dzień atakuje psuje aplikacje wszystkim webowe mobilne ex programista niegasnącym zamiłowaniem technologii javowych we współpracy zaufaną trzecią stroną prowadzi szkolenia poświęcone bezpieczeństwu aplikacji webowych mobilnych autor artykułu pt poznajcie needle narzędzie analizy aplikacji mobilnych ios protokół http bezstanowy oznacza podstawowej formie istnieje powiązanie między kolejnymi w efekcie serwer odbiera stanie rozpoznać jakiego klienta pochodzą popularnym rozwiązaniem wykorzystanie mechanizmu cookie pozwala serwerowi zapisać przeglądarce użytkownika niewielkie porcje danych przeglądarka każdym kolejnym serwera załącza przechowywane cookie dzięki serwer stanie rozpoznawać użytkownik komunikuje nie zresztą jedyne zastosowanie mechanizmu cookie wykorzystywane przechowywania wartości stronie użytkownika mniej znaczących ustawień przy standardowym wykorzystaniu cookie przeglądarka dba załączać cookie pochodzące domeny którą komunikuje jednak cookie oferuje możliwość ustawienia specjalnych atrybutów domain path przyjrzyjmy zachowują praktyce mieć wpływ bezpieczeństwo sposób cookie powinno obsługiwane przeglądarki zdefiniowany dokumencie rfc6265 domain jak wyżej cookie domyślnie powiązywane domeną ustawiła jednak stosując atrybut domain możemy utworzyć cookie subdomenom pewnymi ograniczeniami szczegóły dotyczące atrybutu znaleźć sekcjach dokumentu rfc6265 załóżmy serwer znajduje adresem http mail example com ustawia zestaw różnych cookie różnymi kombinacjami opcji domain część ustawień poprawna jest celowy zabieg celu zaprezentowania działa działa cookie mailsession0 posiada ustawienia domain oznacza znajdowało domeny mail example com mailsession1 mailsession2 ustawiają cookie domeny macierzystej wszystkich subdomen oznacza znajdować wszystkich example com wszystkich subdomen example com mailsession3 mailsession4 ustawiane domeny macierzystej najwyższego poziomu zostaną zignorowane mailsession5 mailsession6 ustawiane zupełnie innej domeny zostaną zignorowane mailsession7 mailsession8 ustawiane aktualnej domeny w odróżnieniu mailsession0 trafiać odnoszących subdomen domeny mailsession9 mailsessiona ustawiane subdomeny aktualnej domeny jest niepoprawne ustawienie zostaną zignorowane mailsessionb mailsessionc mailsessiond mailsessione próba ustawienia cookie innych subdomen należących domeny macierzystej te niepoprawne zostaną zignorowane zobaczmy przykładzie różnych domen wykonywane przeglądarki firefox esr decydowała dołączeniu wybranych cookie po wszystkich przeglądarkach podążających standardem powinniśmy spodziewać takiego samego zachowania tabelka podsumowuje ustawienie domain wpływa dołączanie cookie konkretnych domen cookie ustawiane domenę mail example com public suffix rozwijając temat poruszony mailsession3 mailsession4 cookie możemy ustawiać dowolnej nadrzędnej domeny dopóki domena należąca public suffix listy domen pozwalają publiczne rejestrowanie subdomen do takiej listy należą m in domeny com com uk taka lista zmieniać czasem a aktualna wersja dostępna adresem https publicsuffix org list można dodatkowo zaobserwować poniższym przykładzie odpowiedź domeny a b c d e f example com ustawia cookie b c domen example com f example com mogłaby kolejnych a próba ustawienia cookie public suffix powiedzie atak wiedza temat zachowania atrybutu domain przydatna specyficznych atakach w momencie przyda informacja cookie ustawiane serwer nagłówkiem set cookie pomocą javascriptowego atrybutu document cookie załóżmy wspomnianej aplikacji mail example com znajduje podatność typu xss atakujący możemy wstrzykiwać dowolny kod javascript zawartość strony dodatkowo załóżmy chcemy atak przenieść początkowej domeny mail example com inną powiązaną domenę przykładzie niech shop example com czyli moglibyśmy stronie mail example com wstrzykiwać złośliwy kod ustawiałby cookie example com wszystkich subdomen a jakich sytuacjach mogłoby przydatne podatności typu cookie based przykład cookie based sql injection cookie based xss to rodzaj podatności złośliwy payload pochodzi cookie na przykład równoległej subdomenie shop example com mógłby znajdować podatny skrypt w takiej sytuacji następujący kod javascript uruchamiany poziomu domeny mail example com mógłby taką podatność wykorzystywać celu przeprowadzenia kolejnego ataku xss razem kontekście domeny shop example com podatność typu self xss w przypadku typu podatności ofiara przeprowadzić atak wprowadzić aplikacji payload jednym wariantów rodzaju podatności sytuacja payload xss znajduje polu widzi konkretny użytkownik pole swoją nazwą użytkownika opcjach wydawać mogło rodzaj podatności praktycznego zastosowania atakujący przygotować specjalne konto domenie shop example com umieści payload przykład imieniu zaloguje celu wygenerowania cookie sesyjnego a następnie pomocą pierwotnego xssa mail example com zaloguje swoją ofiarę konto dzięki atakujący mógłby wykradać dane kont użytkowników shop example com w rzeczywistości podobne ataki wycelowane m in użytkowników ubera akcje phisingowe jest technicznie prostsza odmiana punktu opiera obecności dodatkowej podatności polega zalogowaniu ofiary podstawione konto licząc ofiara zorientuje wprowadzi wrażliwe dane zapisze swoją kartę kredytową po drodze pojawia problem jeśli domena shop example com ustawiła cookie próbując nadpisać poziomu mail example com pomocą kodu sprawimy przeglądarka serwera wysyłać cookie samej nazwie to oryginalnie ustawione serwer ustawiane poziomu javascriptu jest niepożądane zachowanie gwarancji dwóch cookie serwer weźmie uwagę z powodu próba nadpisania identyfikatora sesji powieść może wyglądać można rozwiązać pomocą sztuczki zwanej cookie jar overflow polega stworzeniu wielu cookie przeglądarka usunie najstarsze a oryginalnie ustawione serwer wykonując kod sprawimy kolejnym przeglądarka dołączy złośliwe cookie zależnie przeglądarki ofiary wymagana inna liczba iteracji path kolejnym atrybutem wartym uwagi path pozwala ograniczyć zakres cookie konkretnego katalogu serwerze może wykorzystane separacji cookie między kilkoma aplikacjami dostępnymi samej domenie szczegóły dotyczące atrybutu znaleźć sekcjach dokumentu rfc6265 załóżmy serwerze example com uruchomione aplikacje pierwsza dostępna adresem example com tasks a druga example com notes chcemy aplikacje widziały między sobą cookie może zostać osiągnięte następujący serwer ustawia następujące cookie global global_2 dołączane wszystkich tasks_session dołączany odnoszących katalogu tasks podkatalogów tasks tasks new itd notes_session analogicznie powyższego dołączany odnoszących katalogu notes podkatalogów możemy zaobserwować następujących można podsumować pomocą tabelki czy mechanizm jakikolwiek wpływ bezpieczeństwo czy przypadku obecności podatności typu xss konfiguracja path uchroniłaby pozostałe aplikacje sprawdźmy omawianym przykładzie załóżmy aplikacji example com tasks istnieje taka podatność atakujący możliwość wstrzyknięcia dowolnego kodu jeżeli próbowałby odczytać cookie prostu odwołując document cookie notes_session byłby widoczny wspominając ustawieniu httponly mogłoby uniemożliwić odczyt któregokolwiek cookie jednak taka sytuacja sprawia atakujący innych możliwości najprostsze takiej sytuacji zrobić stworzyć iframe odwołujący katalogu innej aplikacji ze względu zmienia nazwa katalogu zastosowania restrykcje narzucane same origin policy porównuje schemat hosta numer portu pozostają zmian w efekcie przeglądarka załączy cookie powiązane aplikacją a atakujący mógł wykonywać dowolne imieniu zalogowanego użytkownika odczytywać odpowiedzi wykradać wrażliwe dane użytkownika odczytać token csrf kodu html payload xss poziomu http example com tasks podsumowanie zapoznaliśmy sposobem działania atrybutów domain path domain pozwala przypisywać cookie domeny macierzystej subdomen wyjątkiem public suffix nawet wykorzystujemy atrybutu warto mieć uwadze atakujący wykorzystujący podatność xss pomocą poszerzać zasięg swoich ataków path pozwala ograniczyć zakres cookie wybranego katalogu serwerze ograniczenie pełni funkcji związanej bezpieczeństwem ominięte atakującego dlatego udostępnianie wielu aplikacji poziomu jednej domeny najlepszym pomysłem w omawianych przypadkach problemu potencjalne błędy typu xss eliminacji powinno rozpocząć dbanie aplikację jednak wiedza temat możliwości atakującego dodatkowo podnieść naszą skuteczność zakresie phishing spam cyberataki szkodliwe oprogramowanie garstka zagrożeń czyhają właściwie każdą firmę organizacje muszą zatem szukać bardziej kreatywnych sposobów zabezpieczenie wrażliwych danych jednym rozwiązań zatrudnienie red teamu zrobił slack czym zajmuje red team to podmiot zewnętrzny testuje efektywność programu ochrony danych poprzez naśladowanie zachowania metodyki którą mógłby przyjąć haker dopuszczający cyber ataku zespół testuje m in zdolność danej organizacji kwestii wykrywania odpowiadania atak procedury zapobiegawcze tym sposobem red team symuluje niedociągnięcia organizacji kwestii bezpieczeństwa ochrony mogłyby zostać wykorzystane hakerów dotrzeć cennych informacji metoda sprawdza szczególnie organizacjach konserwatywnym podejściem naprawiania problemów metodologia reguły mało rozwinięta dorównuje innowacyjności dzisiejszych zagrożeń ataki red team reguły odpierane wewnętrzny zespół firmy odpowiedzialny ochronę danych bronienie dostępu blue team ponadto red team blisko spokrewnione pentestem testem penetracyjnym testem kontroli technicznych programu bezpieczeństwa zarówno pentesterzy członkowie red teamu zadanie pomóc organizacjom zidentyfikować naprawić słabe punkty sposobem zapobiec naruszeniom bezpieczeństwa mogłyby sporo kosztować podważyć zaufanie klientów konsekwencje ignorowania ochrony danych wiele organizacji nadal zdaje sprawy istoty wdrożenia poprawnej procedury ochrony danych uważa poważny problem widać wyraźnie statystykach według ankiety ey global information security organizacji dookoła doświadczyło cyberataków infrastrukturę technologii operacyjnej podczas stosuje procedurę ochrony danych pełni spełnia wymogi na dodatek organizacji nadal uczyło ochrony danych integralną częścią strategii czemu istotne organizacje posiadaniu wielu cennych wrażliwych informacji tj dane osobowe klientów informacje finansowe hasła plany strategiczne itd ignorowanie potrzeby ochronę danych mieć zatem poważne konsekwencje spadek wartości akcji grzywny wysokości milionów euro rocznego przychodu firmy którekolwiek większe utrata reputacji kradzież tożsamości klientów dlaczego warto zwrócić red teamu bezpieczeństwo informacji a przynajmniej powinno priorytetem każdej organizacji powodów takiej postawy wiele utrata cennych danych przykład prowadzić kradzieży tożsamości klientów momencie nawiązania współpracy zawierzyli organizacji cenne wrażliwe informacje po takim incydencie dana firma narazić swój wizerunek utracić zaufanie dotkniętych klientów red team zapewnia spojrzenie infrastrukturę organizacji pozwala zidentyfikować słabości systemie bezpieczeństwa mogłyby zostać użyte hakera punkt wejściowy danego systemu pomaga zrozumieć skutki naruszenia bezpieczeństwa przetestować efektywność sposobu organizacja odpowiada ataki raport utworzony przeprowadzeniu takiej symulacji stanowić dowód pomaga zrozumieć obecne organizacji problemy ochroną danych jest przydatny a czasem niezbędny spełnić wymogi regulacyjne wymogi klientów zanim zdecydują współpracę pragną upewnić dana organizacja traktuje ochronę danych poważnie co należy brać uwagę szukając red teamu szukając red teamu przeprowadzenia testu twojej organizacji należy pamiętać czynnikach miej uwadze własne upewnij dany zespół red team zna twoją infrastrukturę które systemy zasięgiem tj częścią symulowanego ataku czy zawierają wrażliwe dane czy zaburzenie systemu mogłoby zakłócić pracę organizacji jaki cel red team powinno obrać wskaźnik sukcesu jak zaangażowany zespół powinien czy testujesz zdolność odpierania ataków raczej blue team red team powinny pracować razem stworzyć zasady wykrywania cyberataków wyniki po zakończeniu procesu zespół red team dostarcza końcowy raport zawiera szczegółowy przegląd symulowanego ataku a listę wrażliwych punktów zostały znalezione możesz przedyskutować upewnić element raportu przejrzysty zrozumiały następnie należy wydelegować osobę odpowiedzialna zarządzanie projektem mającym celu m in naprawienie bugów nadzorowanie zespołem mającym celu zaradzenie przyszłym atakom powtórka niestety jednorazowe przeprowadzenie takiego testu wystarczające każdy test stanie ocenić kontrolę bezpieczeństwa danym momencie wraz system zmienia zmienia powierzchnia przyszłych potencjalnych ataków dlatego musisz pamiętać testy należy przeprowadzać regularnie podsumowując ochrona danych powinna najważniejszych aspektów każdej organizacji nieodpowiednie podejście ochrony danych mieć wiele poważnych konsekwencji przykład wysokie grzywny utrata wrażliwych danych zaufania klientów narażenie kradzież tożsamości stres kłopoty prawem itd red team stanowi niemalże idealne remedium pomaga organizacjom zapobiec czarnemu scenariuszowi
jednym podziałów dominujących naszym społeczeństwie odwieczna dyskusja mierzy sobą humanistów naukowców sztukę pojęcia jakby połączyć dwóch pozornie przeciwstawnych pojęć spotify platforma muzyczna pomocą algorytmów modeli rekomendacji dopasowuje ofertę indywidualnych użytkowników pokazuje odwieczna walka dziedzin artystycznych kończy sophia ciocca software engineer the new york times w ukończyła studia ekonomiczne uniwersytecie pensylwanii w pół pracowała korpusu pokoju specjalista nauczania przedsiębiorczości rok później ukończyła kurs javascript fullstack academy of code w tekście sophia uchyla rąbka tajemnicy dotyczącej strategii spotify tworzeniu spersonalizowanych cotygodniowych playlist swoich użytkowników polecamy artykuł każdemu kogo fascynują mechanizmy stojące spotify każdemu pragnie zobaczyć muzyka przedmioty sobą współpracować poniższy tekst został przetłumaczony zgodą autorki w poniedziałek milionów użytkowników spotify swojej skrzynce pocztowej znajduje nową playlistę zatytułowaną discover weekly to spersonalizowana lista piosenek pory dany użytkownik okazji wysłuchać osobiście wielką fanką spotify a szczególności discover weekly dlaczego bowiem sprawia czuję zauważona spotify zna upodobania muzyczne lepiej ktokolwiek a utwory poleca prawie przypadają gustu pewnie znalazła dla słyszeli spotify pozwólcie przedstawię mojego najlepszego wirtualnego przyjaciela jak okazuje obsesję punkcie discover weekly baza użytkowników wręcz szaleje doprowadziło spotify przemyślenia swojej strategii zwiększenia inwestycji playlisty oparte algorytmy od momentu discover weekly pojawiło pierwszy scenie spotify chciałam zrozumieć mechanizmy odpowiedzialne po trzech tygodniach szaleńczego googlowania wrażenie wreszcie udało dojrzeć czegoś kotarą zatem spotify stanie wybrać piosenek każdego użytkownika każdego tygodnia zróbmy krok tyłu spójrzmy najpierw serwisy muzyczne radziły rekomendacjami spotify robi lepiej krótka historia serwisów muzycznych jeszcze latach songza zapoczątkowała erę serwisów muzycznych serwis tworzył playlisty pomocą ekspertów muzycznych decydowali utwory należy umieścić sposób sprawdzał opieranie wyłącznie ekspertów muzycznych brało uwagę muzycznych upodobań każdego użytkownika podobnie songza pandora serwisów oferujących muzykę stosowała bardziej zaawansowane podejście opisując każdą dźwiękową odpowiednio tagując następnie kod pandory filtrował konkretne tagi utworzyć playlistę podobnym brzmieniu mniej więcej samym czasie narodziła agencja muzycznej inteligencji the echo nest miała radykalne podejście personalizacji muzyki the echo nest stosował algorytmy analizowania zarówno dźwięku audio tekstu danego utworu pozwalało identyfikację muzyki pozwalając sposobem spersonalizowane rekomendacje tworzenie playlist analizę następnym graczem rynku last fm proponowania muzyki użytkownikom używa procesu zwanego collaborative filtering więcej temat później jakie podejście spotify trzy modele rekomendacji spotify aby stworzyć discover weekly spotify stosuje mieszankę trzech typów modeli rekomendacji zobaczmy działa powyższych modeli model rekomendacji numer collaborative filtering najpierw małe wprowadzenie ludzie pierwszy słyszą pojęcie collaborative filtering reguły pierwsza myśl jaka przychodzi głowy netflix pierwszych platform zastosowała metodę procesie rekomendowania swoich produktów poprzez używanie ocen filmów po sukcesie netfliksa collaborative filtering szybko rozprzestrzeniło obecnie będąc początkowym punktem każdego stworzyć model rekomendacji w przeciwieństwie netfliksa spotify gwiazdkowej oceny muzyki zamiast bierze uwagę czynniki przykład fakt użytkownik zachował dźwiękową własnej playlisty odwiedził stronę artysty wysłuchaniu piosenki czym collaborative filtering działa przyjmijmy dwóch użytkowników jednemu podobają utwory p q r s podczas drugiemu podobają utwory q r s t collaborative filtering stanie stwierdzić oboje użytkowników podobny gust muzyczny sugeruje pierwsza osoba odsłuchała t a druga p w spotify używa koncepcji zasugerować dźwiękowe milionów użytkowników oparciu preferencje milionów innych użytkowników za pomocą macierzy bibliotek pythona w rzeczywistości macierz którą widzisz powyżej gigantyczna każdy rząd reprezentuje jednego milionów użytkowników spotify a każda kolumna reprezentuje jedną milionów piosenek bazie danych spotify biblioteka pythona przetwarza poniższe działanie kiedy skończone typy wektorów przedstawione x y x wektorem użytkownika reprezentującym upodobania pojedynczego użytkownika a y wektorem piosenki reprezentującym profil pojedynczej piosenki macierz użytkownik piosenka produkuje typy wektorów wektor użytkownika wektor piosenki mamy milionów wektorów użytkowników milionów wektorów piosenki zawartość wektorów właściwie zbiór liczb same znaczenia przydatne porównamy siebie aby dowiedzieć użytkownicy podobne upodobania muzyczne collaborative filtering porównuje wektory użytkowników końcu znajdzie siebie najbardziej zbliżone tak samo dzieje przypadku wektora y możesz porównać wektor pojedynczej piosenki innymi piosenkami wybrać piosenkę najbardziej podobna którą pytamy collaborative filtering daje radę całkiem ulepszyć swoją ofertę spotify dodał kolejny silnik model rekomendacji numer natural language processing drugim rodzajem modelu rekomendacji używanego spotify natural language processing dane używane modele nazwa wskazuje zwyczajne słowa metadane dźwiękowych artykuły blogi wszelkie teksty internetu natural language processing oznaczające umiejętność komputera rozumienia ludzkiej mowy szerokim pojęciem samym zaprzęgniętym dodatek analizę sentymentu ang sentiment analysis w artykule będziemy stanie wyjaśnić dokładnego mechanizmu nlp możemy mniej więcej przedstawić zarys procesu spotify bezustannie przeszukuje internet metadane dźwiękowych artykułu blogi itd poszukiwaniu m in przymiotników używanych opisania poszczególnych artystach piosenek poprzez ustalenie artysta piosenka opisywany pomocą podobnego języka spotify stanie wybrać utwory mogłyby spodobać danemu użytkownikowi mimo wiem dokładnie dane potem przetwarzane spotify mogę zaoferować pewien wgląd dawną współpracę pomiędzy echo nest a spotify echo nest pakowało dane spotify czegoś nazywali wektorami kulturowymi top terms każdy artysta piosenka mieli tysiące top terms zmieniały codziennie każdy term przypisaną wagę korelowała ważnością prawdopodobieństwo ktoś opisze artystę piosenkę pomocą frazy podobnie przypadku collaborative filtering model nlp używa terminów wagi stworzyć reprezentację wektorową piosenki zostać użyta zdeterminowania dwóch kawałków muzyki podobnych siebie niezłe prawda model rekomendacji numer raw audio models możesz myśleć sophia przecież tyle danych dwóch pierwszych modeli po analizować audio po pierwsze dodanie trzeciego modelu dodatkowo zwiększa precyzję jaką spotify stanie polecić utwory ponadto model tyle lepszy pozostałe modele uwagę bierze popularne utwory piosenki mało znanych artystów weźmy przykład piosenkę napisaną twojego przyjaciela odsłuchań zatem zbyt wielkiej możliwości przeprowadzić collaborative filtering na dodatek innej wspominki internecie model nlp znajdzie raw audio models patrzy popularność piosenek dzięki piosenka twojego przyjaciela wskoczyć discover weekly razem utworami cieszą większą popularnością w spotify analizuje raw audio data za pomocą głębokich sieci konwolucyjnych ang convolutional neural network cnn cnn technologia reguły używana oprogramowaniu rozpoznawania twarzy przypadku spotify została zmodyfikowana pozwalający użytkowanie danych formacie audio raczej pikselach tutaj przykład budowy cnn ta poszczególna sieć neuronowa cztery warstwy konwolucyjne przedstawione szerokie słupki lewej trzy gęste warstwy widziane formie węższych słupków prawej widoczne częstotliwości dźwięku następnie utworzyć spektogram końcowo analizowania kluczowych cech danego utworu pozwala spotify zrozumieć fundamentalne podobieństwa pomiędzy piosenkami samym użytkownikom spodobają najbardziej ten pokryliśmy całą podstawę trzech głównych typów modeli rekomendacji stosowanych spotify utworzenia discover weekly oczywiście modele rekomendacji podłączone większego ekosystemu spotify zawiera ogromne ilości danych stosuje wiele zbiorów hadoop skalowania rekomendacji umożliwiania silnikom pracę wielkich matrycach niekończących artykułach muzycznych plikach audio mam nadzieję artykuł wzbudził waszą ciekawość wzbudził moją pozostaje dalej przedzierać własne discover weekly poszukiwaniu nowych faworytów doceniając samym uczenie maszynowe miejsce kulisami w czasach przeżywamy istny renesans nauki danych patrz model wydaje każda firma zatrudnić data scientist identyfikacja przyciągnięcie zatrudnienie utrzymanie odpowiedniego naukowca większym wyzwaniem przewidują menedżerowie hr dzieje nauka danych złożoną wielodyscyplinarną dziedziną małą aczkolwiek zróżnicowaną pulą talentów zatrudnienia a znalezienie odpowiedniego kandydata wymaga starannego połączenia przygotowań przemyślanego procesu rekrutacyjnego zatem powinien wyglądać proces rekrutacji data scientist dotrzeć zatrudnić najlepszych mateusz bosek founder ceo hubranch dyrektor polskiego oddziału firmy matic dubaju były programista letnim doświadczeniem branży it zdobyte bogate doświadczenie relacjach regionami europy zachodniej bliskiego wschodu doprowadzić hubrancha pozycji lidera budowaniu skalowalnych zespołów wewnętrznych klientów całego polsce granicą jego wizją uczynienie hubranch wiodącym centrum innowacji polsce zbudowanie globalnego kampusu firmy różnych rynków mogły pracować dachem istotną rolę odegra ai zanim przejdziemy zacznijmy podstaw niezależnie jesteś założycielem startupu menadżerem ds rekrutacji musisz pewny szukasz odpowiedniej osoby data science rozległa dziedzina a obszar objęty inną rolą aby przedstawić weźmy lupę przykładowy projekt wykorzystanie machine learning klasyfikacji obrazów tak działają m in tripadvisor foursquare yelp miliony zdjęć umieszczane aplikacjach każdego dnia posortowanie uzyskanie wglądu wewnątrz konkretnej restauracji trudne wszystkie załadowane zdjęcia należą samej kategorii zdjęcia jedzenia budynku restauracji zewnątrz holistyczna ocena wyglądu restauracji wymaga różnego rodzaju zdjęć w takiej sytuacji użyć image recognition processing automatycznie kategoryzować obrazy należą poszczególnej kategorii dobrze przetrenowany algorytm stwierdzić zdjęcie pokazuje restauracje wewnątrz zewnątrz jedzenie serwowane data scientists tworzą model pomóc komputerowi wskazać drogę wykonać zadanie mogą zastanowić jakiego rodzaju danych potrzebowali ręcznie oznaczonych zdjęć słów kluczowych podpisach zdjęć jest zazwyczaj zadanie należące doświadczonego naukowca seniora zarządzają danymi początku końca zajmują wszystkimi naukowymi problemami związanymi nauką danych wyboru algorytmów projektowania inżynieryjnego data engineers tworzą systemy pozyskiwania przechowywania wszystkich danych obrazowych a implementują niektóre algorytmów ułożonych data scientists jest zazwyczaj rola osób silnymi technicznymi umiejętnościami znać teorii matematycznych statycznych bądź znają zasad funkcjonowania branży robią projekt data analysts wyszukują przedstawiają biznesowe konsekwencje wprowadzanych zmian pytania muszą odpowiedzieć czy zmiana podoba użytkownikom ile więcej ruchu wygenerowała aplikacja stronia dzięki ostatniej zmianie następnie przekazują znalezione informacje dalej rola zazwyczaj zajmowana juniorów data science osoby stanowiskach kierowniczych biznesie uczą przedstawiać obserwacje podstawie danych statystycznych jeśli upewniłeś kogo potrzebujesz projektu następnym krokiem znalezienie wyjątkowych ludzi zasilą twój zespół ekspercką wiedzą doprowadzą projekt szybciej szczęśliwego końca jak pozyskać najlepszych wcześniej wspomniałem znalezienie odpowiedniego kandydata wymaga starannego połączenia przygotowań przemyślanego procesu rekrutacyjnego przedstawię ci proces złożony pięciu prostych kroków złap potrafisz po pierwsze odnaleźć talenty wiele firm popełnia etapie błąd wprowadza chaos organizacji kosztuje standardowo czas pieniądze tym błędem szukanie kandydatów dopiero potrzeba ktoś zaraz zapyta hej dlaczego miałoby inaczej jest popyt podaż tak prawda popyt wcześniej przewidzieć podjąć kroki odpowiednio wyprzedzeniem sieć kandydatów rozszerzać cały czas i chodzi wpisywanie linkedinie frazy data scientist robienia baz excelu tworzenie naturalnej sieć kontaktów kulturę organizacyjną zachęcanie pracowników uczestnictwa różnych eventach meetupy spotkania branżowe imprezy towarzyskie opowiadania swojej pracy projektach uczestniczyli uczestniczą nic buduje twojej marki pracodawcy marketing szeptany jeśli zespół czuje wewnętrzną potrzebę dzielenia wiedzą ułatw proces umożliwienie stworzenia prezentacji godzinach pracy współpracy innymi członkami zespołu bycie otwartym swoją pracę a zwłaszcza napotkane problemy projekcie sprawia cała społeczność czuje zaangażowana a następnie bardziej chętna dołączyć pojawi okazja uwierz interesuje naukowców napotykane problemy newsletter stronie careers szukasz obecnie ludzi swojego zespołu projektu pozwól chętnym zostawić kontakt formie cv oprócz tradycyjnych form rekrutacji targi pracy wynajęcie head hunterów zamieszczenie ogłoszenia portalach justjoinit należy pamiętać data scientist osoby doświadczone branży generalnie wiele opcji pracy wyboru zatem niejednoznaczny opis stanowiska dostanie drugiej szansy idąc dalej połączenie promocją docieraniem potencjalnych kandydatów linkedin dzisiejszych czasach opłaca testować bardziej niestandardowe proaktywne metody organizacja własnego meetup konferencji data science dotyczącej konkretnego obszaru analiza konsumenta e commerce dzięki nieustrukturyzowanymi zbiorom danych oczywiście przykład najlepiej tematyka skupiała obszarze istotny planowanym projekcie aktywne uczestnictwo istniejących meetup własne wystąpienie spotkania innymi prelegentami organizacja własnego data hackatonu wybieranie kandydatów spośród uczestników ogłoszenie konkursu przeanalizowanie próbek danych rozwiązanie istniejącego problemu miej względzie konkurs raczej przyciągnie seniorów szukanie kandydatów projektach open sourcowych wielu dobrych naukowców posiada personalne strony internetowe chwalą ostatnimi osiągnięciami pre screening jest zazwyczaj kilka prostych pytań dotyczących ogłoszenia motywacji zaaplikowania po wypełnieniu formularza zazwyczaj prosi dane kontaktowe rzadko cv potrzebne dopiero następnych etapach ten etap opcją dodatkową niektórzy twierdzą przydatny pozwala zredukować ilość nadesłanych formularzy celu odsiania ludzi końca przekonani oferty jakość ilość samym oszczędzić czas osób odpowiedzialnych rekrutacje zoptymalizować dalszy proces rekrutacji drudzy kolei twierdzą należy etap pominąć uprościć proces podanie formularza kontaktowego to oszczędza cenny czas najważniejszym powodem dokonywać wstępnego sprawdzenia usunięcie ogromnego początkowego błędu wielu niesamowicie utalentowanych kandydatów miało doświadczenia związanego rekrutacją oznacza przegrywasz odrzucając wstępie ukryte talenty zaciekle rywalizujesz kandydatów wyglądają papierze wszyscy inni chcą tech challenge kandydaci zapraszani wykonania niewielkiego wyzwania zawiera pewne cechy charakterystyczne pracy którą musieli wykonać ma formę mini kaggle wykonywanego kandydatów zdalnie przykładowy test znaleziony internecie docs google com document w trakcie całego procesu kluczowa transparentność kandydaci wykonali zdania poprawnie informowani ci wykonali zadanie poprawnie wiemy przejdą następnego etapu informowani wyprzedzeniem dostają informację ilu kandydatów pozostało ilu przejdzie posiadamy taką informację podczas oceny wyników starać unikać bądź bądź nieświadomych uprzedzeń kandydat ka nazwa uniwersytetu dobra istotne wcześniejsze zdefiniowanie kryteriów oceny zapomnieć jakimś wymiarze oceny przeceniać innych co istotne raczej powinno oceniać kandydatów podstawie kodu podstawie organizacji pracy a szczególności zdolności przekazywania danych kandydaci mocni aspekcie słabi innych zazwyczaj wybierani układając pytania weź uwagę praktyczność przeznacz tyle czasu pytania dotyczące konkretnego obszaru zajmują czasu rzeczywistości pytania dot modelowania powinno zająć całego testu realistycznie odsetek czasu naukowcy spędzają wybierając optymalizując modele wywiad f2f tu spotykam dwoma podejściami jedno tradycyjne ocenianie zadawanie pytań drugie rzadziej spotykane spotkanie wprowadzenie działalności firmy poznanie motywacji kandydata tradycyjne interview powinien zająć godzin interview najczęściej składa rozmowy obejmującej aspekty znajomość modeli statystycznych matematycznych programowania modelowania algorytmów wizualizacji danych zachowanie kandydata dopasowanie kultury organizacyjnej rozwiązywanie problemów trochę pamiętać wybierać skupiać aspektach największe znaczenie branży firmy projektu przydatne porady etapie zadawaj zbyt wielu pytań dotyczących jednego obszaru ciebie ważny męczy a kandydat zna odpowiedzi pytanie powiedz wiedzieć wszystkiego zmień kontekst unikaj sytuacji kandydat czuje rozmowa idzie słabo stan emocjonalny ograniczyć zdolność dalszych poprawnych odpowiedzi po przykładowe pytania odsyłam zestawienia dodam zdaję sprawę niedoskonałości zestawień pytania sformułowane wyobraź słyszysz poprawną odpowiedź technicznych pytań czy zatrudnisz podstawie czy fragment całej układanki rozwiązaniem problemu poproszenie kandydata wyjaśnił odpowiedź bardziej dogłębny przeszedł proces myślowy pomocy tablicy zazwyczaj sprawdza demo day po kandydat zaliczył tech challenge kolejnym wyzwaniem przekonanie przyszedł rozmowę kwalifikacyjną demo day cały dzień kilka godzin pracy spędzony zespole bardziej otwartym wyzwaniem zupełnie inaczej podczas tech challenge kończący prezentacją swojej pracy całej grupie jest angażujący proces strony pewne chcą współpracować sobą długi czas kolejna inwestycja przyszłość pozwala wyeliminować długi kosztowny proces rekrutacji momencie któraś stron spełnia wymagań danym czasie niestety większość kandydatów oczekiwać tradycyjnej rozmowy kwalifikacyjnej podczas spędzą więcej godziny biurze pewno cały dzień konieczne przekonać warto poświęcić czas najważniejszym podczas demo day kandydatem wyrażasz możliwości oferujesz opisujesz przygotowujesz aplikanta demo day wszystko powinno ukierunkowane zbudowanie zainteresowania entuzjazmu czas ocenę umiejętności każdy kandydat motywowany innymi czynnikami ważne abyś uważnie słuchał kierował rozmowę tematy dbają najbardziej takimi czynnikami ogólny potencjał produktu firmy jak wygląda organizacja projektu data science główne szanse wyzwania projekty którymi dział data science pracował najbliższej przyszłości jak dział data science współpracuje innymi działami rodzaj wielkość jakość posiadanych danych szanse dalsze zdobywanie jak zespół zarządza swoją pracą współpracuje zakresie ustalania priorytetów tworzenia decyzji konkretne narzędzia technologie wykorzystywane dział data science docelowo znajdziesz kandydatów stanie chcą umówić zaplanować swojego demo day demo day sercem takiego procesu rekrutacji dobrze wykonany zawiera końcową ocenę techniczną umiejętności kandydata wraz analizą dopasowania kultury z odpowiednim przygotowaniem osiągnąć większego zaangażowania czasowego twojej strony twojego zespołu byłoby wymagane tradycyjną rozmowę kwalifikacyjną organizacja dobrego demo day rozległym tematem pewnością poruszę przyszłości selekcja w końcu ostateczna selekcja najpierw skontaktuj najlepszymi kandydatami upewnij nadal chętni zostać częścią twojego zespołu powinieneś założyć wszyscy kandydaci przeprowadzają rozmowy wielu firmach jednocześnie zamiast wierzyć masz kandydata wyłączność a praca ciebie spełnienie marzeń zaproś najlepszych kandydatów spotkanie zespołem zbierz opinie zadaj więcej pytań temat postrzegania kultury organizacyjnej wyznawanych wartości osobistych ambicji kariery jest dobry moment zadanie podchwytliwych pytań momencie mógłbyś rozmowie pracę konkurencji wybrałeś ofertę co istotne kandydat przenigdy odejść ostatecznej odpowiedzi wszyscy kandydaci otrzymują indywidualną spersonalizowaną pozytywną negatywną informację zwrotną pytanie zostali wybrani jeśli traktujesz kandydatów zasoby odrzucić zasługujesz zatrudnianie największych talentów jeśli traktujesz swoich kandydatów chciałbyś traktowany osiągniesz everest kultury zatrudniania jednocześnie zatrudniasz najlepszych jesteś rekomendowanym pracodawcą rekruterem ludzi starania stanowisko odrzuciłeś profesjonalnie uzasadnieniem aplikowanie firmy trudnym potencjalnie zmieniającym procesem powinien traktowany poważnie osoby podejmujące ostateczną decyzję aby znaleźć zatrudnić utalentowanych data scientist konkurencyjnym rynku pracy stara najlepszych kandydatów wykazać proaktywnością kreatywnością całym procesie rekrutacyjnym zaczynając znalezienia kandydatów a najefektywniej dokonać bywając najlepsi ludzie poświęcają swój wolny czas naukę dzielenia kochają swoją pasję kończąc prowadzeniu rozmów rekrutacyjnych zasadzie partner partner a pracodawca pracownik
wracamy kolejnym tematem trudno rozstrzygnąć postaci artykułu eksperckiego dlatego opracowaliśmy wam znany format devdebaty poznać opinie różnych frontend developerów same kwestie zobaczcie zaproszeni seniorzy myślą wydajności frontendzie odpowiedzi pytania udzielili andrii los senior frontend engineer revolut ma sześć doświadczenia software engineeringu projektach branży bigdata typowych projektów webowych użyciem frameworka spring wcześniej java backend engineer najczęściej pracował typescript react graphql css in js artem shtepenko senior frontend engineer revolut zaczął programować wieku przygodę rozpoczął tworzenia prostych stron internetowych następnym krokiem karierze podjęcie studiów informatycznych uniwersytecie marii curie skłodowskiej lublinie znalazł pracę full stach developer asseco business solution pracuje revolut adam bar full stack developer bright inventions gdańskim software housie specjalizującym rozwiązaniach mobilnych iot blockchainie doświadczony stosach technologicznych ostatnio wierny typescriptowi pasjonat mobile weba twórca what web can do today strony możliwościach weba urządzeniach mobilnych temat wydajności back endzie znany wiele osób istotna kwestia z kolei temat front endzie zaniedbywany w możemy zadbać performance front endu odpowiada andrii los senior frontend engineer revolut wydajność stronie frontendu niezwykle ważnym zagadnieniem zadbać stosując proste zasady jednocześnie zaniedbuje pojęcie wydajności programista robi zna wspomnianych zasad zaimplementuje zbyt wiele zewnętrznych paczek kodu wiedząc rzeczywiście powoduje program działa wolniej odpowiada artem shtepenko senior frontend engineer revolut dodatkowo szczególnie ważne monitorowanie aplikacji kątem problemów wydajnością jeżeli dostrzegasz logach ważne ustalenie przyczyny problemów znalezienie problemu usunięcie samo dotyczy strony backendowej odpowiada adam bar tech lead software developer bright inventions faktycznie front end ostatnimi laty wyewoluował prostych stronek pełnoprawne aplikacje poszła wiedza temat mechanizmów dotyczących wydajności o wydajność back endzie znacznej mierze opiera wybór odpowiednich algorytmów struktur danych froncie cały szereg dodatkowych kwestii przede wszystkim powinniśmy zaznajomić komunikacją którą front end prowadzi sieć powinniśmy zadbać odpowiednie cache owanie statycznych zasobów zadbać szybkie serwowanie dzięki użyciu cdn włączyć serwerze http lepiej zrównoleglać dzięki service workerowi możemy wszystkie pliki zapisać dysku klienta pierwszym otwarciu strony dzięki całkowicie wyeliminować koszt odwołań sieci można ponadto rozważyć techniki typu prefetch wyprzedzeniem załadować klientowi pliki zapewne chwilę zapyta druga kwestia kolejność jakiej aplikacja zasobów trzeba mieć plik css sekcji head blokuje renderowanie strony czas dlatego serwowanie css ogromnych bibliotek komponentów używamy jednej dwóch kontrolek wydajnościowym strzałem stopę także pliki javascript oznaczymy atrybutem async kosztowne blokują parsowanie html a kodu bezpośrednio danym momencie potrzebujemy kodu innych widoków naszej aplikacji sensu współczesne bundlery webpack oferuje wbudowane rozwiązania code splittingu powinien stać standardem faktycznie chcemy stanie szybko serwować treść użytkownikom trzeci aspekt interakcje użytkownika stroną efekty przejść animacje koszt animacji różnych właściwości elementów diametralnie względu pracę jaką wykonać przeglądarka przykładowo zmiana przezroczystości tania a zmiana szerokości elementu wymaga ponownego przeliczenia układu layoutu może odczuwalne szczególności urządzeniach mobilnych a stanowią chwili większość ruchu internecie tych zasad sporo warto znać poziomie projektowania ui ux aplikacji w poprawy wydajności skorzystać użytkownicy czy wydajność mieć przełożenie biznesowe metryki naszego projektu odpowiada andrii los senior frontend engineer revolut z pewnością zależy konkretnego przypadku podobnie kwestii wydajności zaczynasz optymalizacji czegoś wcześniej zostało zmierzone w niektórych popularnych platformach amazon ebay innych niezwykle ważne oszczędzać jedną milisekundę poprawa obciążenia aplikacji pół sekundy realny wpływ badania utrzymania liczby użytkowników ogólnie przychody aplikacji chociaż musimy pamiętać poprawki pół sekundy naniesione potężnym mac pro podłączonym porządnego wi fi rzeczywistości letnim smartfonie przyniosą sekund poprawy odpowiada artem shtepenko senior frontend engineer revolut wiele osób odwiedza strony internetowe urządzeniach mobilnych wydajne komputer stacjonarny czas responsywności ważny użytkownik czeka sekund otwarcie aplikacji prawdopodobnie zamknie przejdzie innej szybciej ale posiadając wydajne urządzenie mobilne należy pamiętać szybko stabilnie działa sieć możesz napisać kod największej wydajności historii zadziała ktoś wrzuci stronę zdjęcia wielkości zniszczy całą optymalizację na kwestie performance należy patrzeć perspektyw odpowiada adam bar tech lead software developer bright inventions są badania wprost wiążą wydajność aplikacji współczynnikami konwersji mówi sekunda strony dłużej mniej konwersji dla aplikacji typu e commerce przeliczyć stracone kwoty zasada działa wszystkich rodzajów aplikacji przede wszystkim myśleć użytkownikach mobilnych kątem testować wydajność aplikacji na wolnej sieci ciężka strona prostu załadować póki starczy cierpliwości prostu przerwą użytkownik stanie wejść stronę pewnością zadowolonym lojalnym nabywcą co gorsza użytkowników zobaczymy statystykach każda optymalizacja inwestycja zapewne istnieją granice usprawnianie wydajności sens jakie kryteria decydują warto pochylić wydajnością front endu na jakim etapie projektu powinno zwracać uwagę odpowiada andrii los senior frontend engineer revolut jeśli jesteś startupem myślę najważniejszą rzeczą dostarczenie mvp minimum viable product szybko możliwe najlepszym możliwym danym przypadku kodem im mniej napisanego zespół kodu mniej potencjalnych błędów możesz szybciej iterować jednocześnie szybka iteracja poleganie zbyt wielu podmiotach trzecich skończyć bałaganem małą wydajnością produktu zaprzepaścić szansę rynku zależy innych czynników m in szybko działa konkurencja niemniej przestrzeganie podejścia szybkiego stworzenia mvp lepsze polerowanie kodu zera rezultacie działającego produktu wiele miesięcy odpowiada artem shtepenko senior frontend engineer revolut pierwszą rzeczą powinieneś pamiętać przedwczesna optymalizacja wszelkiego zła a przynajmniej większości programowaniu donald knuth jeśli masz prostą stronę wyświetlane dane statyczne musisz optymalizować większości przypadków masz listę zapewnia rekordów wydajność znaczenie czasami potrzebujemy jakiejś funkcji jak najszybciej mvp ważnym elementem projektu szczególnie pracujesz start upu myślę pierwszą zasadą zrezygnowanie implementacji własnego komponentu biblioteki masz możliwość korzystania gotowych rozwiązań nawet pracuję mvp wolę zacząć rozwiązania klucz zobaczyć błędy popełniły osoby na przykład bierzemy bibliotekę a używamy projekcie dajesz użytkownikom zbierasz opinie a następnie możesz przeanalizować zdecydować chcesz zoptymalizować część aplikacji odpowiada adam bar tech lead software developer bright inventions są optymalizacje kosztowne wymagają zmiany architektury projektu code splitting dopóki danych główny problem pewnie biznesowego uzasadnienia wprowadzaniu rewolucji ale startujemy nowy projekt kolei uzasadnienia zadbać architekturę sprzyjającą wydajności z kolei istniejących aplikacji szereg optymalizacji powinno dać wprowadzić stosunkowo prosto asynchroniczne załączanie skryptów preload fontów zasadzie jednolinijkowce nie widzę powodu sięgnąć nisko wiszące owoce performance nieraz stać sprzeczności oczekiwaniami biznesu wymogami marketingu czy dbałość wydajność aplikacji wymaga szczególnych zasad współpracy biznesu zespołem developerskim odpowiada andrii los senior frontend engineer revolut nie sądzę obowiązują specjalne zasady powinien ciągły dialog między biznesem marketerami a deweloperami obie strony powinny słuchać nawzajem osiągnąć sensowny kompromis jeśli takiego dialogu skończyć bałaganem kodzie problemami wydajnością błędami prostu opóźnionymi terminami odpowiada artem shtepenko senior frontend engineer revolut jeśli oddasz ręce użytkownika aplikację problem wydajnością szybkością procesów możesz stworzyć więcej problemów biznesu rozwiązać jeśli powolne użytkownik przełączyć aplikację konkurencji dlatego ważne wypracowanie odpowiedniego balansu pomiędzy szybkością a wydajnością produktu odpowiada adam bar tech lead software developer bright inventions myślę niezbędna swój koszt implikacje idealnie mielibyśmy statystyki pozwolą przeliczyć koszt dodania kolejnego javascriptu użytkownika kwotę którą spadnie sprzedaż w praktyce mało dane zmienia faktu potrzebny kompromis być developerzy powinni akceptować elementy warunkiem dodane asynchroniczny a biznes zaakceptuje potencjalnie użytkowników skrypt uchwyci opuszczą stronę załadowaniem równie ważna ważniejsza współpraca developerów designerami designer powinien mieć projektować ui ux unikać kosztownych animacji efektów wizualnych spiętych scrollowaniem zabijają wydajność telefonach zazwyczaj jedyną szansą taką feedback developerów na metryki aplikacji którą pracujesz zwracasz uwagę a odpowiada andrii los senior frontend engineer revolut ponieważ pracuję wewnętrznymi narzędziami wiemy używane całkiem potężne urządzenia najnowszy chrome przyzwoitą prędkością internetu itp zwracamy uwagę podstawowe metryki mówiąc naszej stronie internetowej ogólnie dowolnej aplikacji internetowej którą zamierzasz przekazać użytkownikowi ważne metryki dobrym stanie rozmiar pakietu js mniejszy kb paint poniżej sekund większości urządzeń gzip innej kompresji zasobów cdn całym polityka buforowania szybkość działania aplikacji każdym urządzeniu i warto mierzyć metryki działaniami zwiększeniem wydajności apki nigdy optymalizuj zanim będziesz pewny a korzystne odpowiada artem shtepenko senior frontend engineer revolut myślę należy zacząć pomiaru czasu danych powinien najszybszy aby przyspieszyć użyć renderowania stronie serwera ssr użytkownik otrzymuje statyczny kod html korzystać aplikacji możliwie najszybciej ważne użycie gzip zminimalizowania pakietu sieci połączenia http umożliwia multipleksowanie ostatnim równie ważnym czynnikiem powinna dystrybucja cdn użytkownicy różnych części odpowiada adam bar tech lead software developer bright inventions najbardziej wartościowe metryki ciężkie uchwycenia specyficzne aplikacji google definiuje koncept first meaningful paint fmp czasu pierwszego momentu użytkownik widzi wartościową treść strony a time interactive tti czasu pierwszego momentu wszystkie inicjalne javascripty załadowały użytkownik wejść interakcję stroną oba zazwyczaj wymagają ręcznego mierzenia w praktyce zaczniemy zwracać uwagę czas zdarzenia domcontentloaded prawdopodobnie okazji poprawimy fmp tti czy znasz jakieś narzędzia biblioteki techniki automatyzujące wspomagające prace wydajnością front endu odpowiada andrii los senior frontend engineer revolut przykładowo szybkości witryny polecam narzędzie google pagespeed ponadto chrome zakładkę audity swoich narzędziach programistycznych odzwierciedlają niektóre funkcje google pagespeed jeśli mówimy procesie budowania innych optymalizacjach lepszego narzędzia webpack posiada wszystkie potrzebne funkcje tree shaking usuwanie nieużywanego kodu eliminację martwego kodu kod używany zostanie uruchomiony minifikację js css html svg innych formatów dynamiczne importowanie zapewnić dostarczenie potrzebnego kodu pierwszej farbie sprawdzić zasięg użycia kodu chrome wiele innych innym niesamowitym narzędziem webpack analizator pakietów webpack pomaga idealny wizualizować pakiety używasz swojej aplikacji pełni wykorzystać rozmiar pakietu js ostatnia rada warto dostroić ustawienia swoich potrzeb indywidualne konfiguracje najtrudniejsze tworzeniu front endu dlatego zalecamy korzystanie aplikacji create react app innych narzędzi cli budowania aplikacji uprościć jednego pakietu czasu czasu podbijać my revolut wykorzystujemy naszych projektów internetowych chociaż dopracowaliśmy obsługiwał niektóre wtyczki babel zmieniał eslint wciąż oryginalny cra odpowiada artem shtepenko senior frontend engineer revolut bardzo użyteczny zestaw narzędzi wydajnościowych zebranych chrome dev tools umożliwiają pomiar czasu renderowania pomocą karty wydajność można ustawić przepustowość procesora przeanalizować sieci użycie pamięci dane google pagespeed dają statystyki twojej strony internetowej webpack dobry zestaw wtyczek pozwalają minimalizować przykład wtyczkę uglifyjs optymalizować analizować kod ponadto należy zapominać wydajności sieci takiej czas obrazów skryptów itp cdn miło mieć obsługę http2 aplikacji odpowiada adam bar tech lead software developer bright inventions sytuacja temacie poprawia miesiąca miesiąc króluje lighthouse narzędzie google a obecnie wbudowane dev toolsy chromie a dostępne https web dev lighthouse a uruchamiać linii komend wpięty proces continuous integration jest szereg serwisów pomagają pomiarach klasyczny przykład http webpagetest org zdjęcia główne artykułu pochodzi unsplash com jak oceniasz bezpieczeństwo refaktorowania innych głębokich modyfikacji kodu jakie ograniczenia php jakie najczęściej pułapki czyhają juniorów to trzy dziesięciu pytań kolejnej odsłonie devdebaty zapraszamy doświadczonych developerów tym razem postanowiliśmy porozmawiać phpie odpowiedzi pytania udzielili nowak programista php zamiłowaniem projektów skomplikowaną logiką biznesową w php siedzi realizuje powodzeniem mniejsze większe projekty szerokiej gamy firm obecnie assertis ltd pracuje specjalistycznymi rozwiązaniami sprzedaży biletów rynku kolejowym wielkiej brytanii oprócz php rozpoczęciu pracy assertis zainteresowania kieruje nodejs a wolnym czasie golang iwona jóźwiak php developer divante od internetem pamięta erę ie ostatnie lata ukierunkowała głównie backend magento za swoją najmocniejszą stronę uważa umiejętność technologii biznesu ponadto należy grupy certyfikowanych developerów magento developer plus dziś bardziej reprezentuje grupę backend developerów wciąż miarę wolnego czasu ciekawych zadań projekcie stara rozszerzać wiedzę frontendową andrzej precz back end php developer transparent data odkąd półtora dołączył zespołu data services dzień zajmuje przyłączanie nowych obmyślanie sposobów pozyskanie danych zza zamkniętych drzwi wcześniej prawie dekadę programował serwisie allegro co najbardziej lubisz phpie odpowiada nowak php nodejs developer assertis bardzo dobra dokumentacja duży wybór pakietów prostota konfiguracji a wszystkim język pomimo dużej krytyki naprawdę daje radę miałem okazję widzieć aplikacje dźwigały naprawdę duży ruch strony użytkowników wcale język służy tworzenia prostych stronek stawiania wordpressów itp można zbudować pełnoprawnie działające aplikacje przetwarzające terabajty danych język narzędzie a php rękach dobrego programisty potężne narzędzie odpowiada iwona jóźwiak senior php magento developer divante szeroko pojęta różnorodność skłamałabym gdybym powiedziała internet stoi php swój spory udział można realizować proste stronki portale e commerce ogromny crm y erp y z powodzeniem tworzyć webservice y odpowiada andrzej precz senior php developer transparent data da szybko napisać małe skrypty prostych zadań da szybko napisać serwis internetowy zarówno froncie backendzie php dawał radę aplikacja rozrośnie dużych rozmiarów szybkość tworzenia skalowalność najmocniejsze strony języka z drugiej strony najbardziej wkurza cię phpie jakie ograniczenia odpowiada nowak php nodejs developer assertis pewnie wielu programistów uważam dużym problemem php język interpretowany wiele błędów pomimo dobrych testów występuje późniejszym etapie aplikacji są oczywiście rozwiązania postaci choćby hhvm powoli pojawiają głosy następnych wersji php zostanie wprowadzony jit just in time compilation dużym ograniczeniem wielowątkowość niby istnieje wielu nowszych językach choćby golang pomocy goroutines rozwiązana lepszy odpowiada iwona jóźwiak senior php magento developer divante najbardziej smuci fakt język wciąż wolniejszy języków kompilowanych wybacza można wymusić typowanie danych korzystanie interface jednak ominąć sprawnie work around em bardzo kod wykraść istnieją zabezpieczenia postaci ioncube dostępne mechanizmy potrafią zabezpieczony kod odkodować sprawia korzystać nieautoryzowany administratorzy ubolewają koniecznością utrzymywania wielu wersji php trakcie rozwoju jeśli wersjach mowa pamiętać skrypty wykonywane cli korzystać innej wersji php hosting został poprawnie skonfigurowany wielu chciałoby cli używać polecenia php równolegle hostingu mieć kilka wersji każda inną konfigurację ostatecznie powoduje niezłe zamieszanie na nakłada krótki czas wsparcia każdej wersji odpowiada andrzej precz senior php developer transparent data po pierwsze szybkość języka porównaniu innymi dostępnymi obecnie rynku znacznie poprawiło siódemki po drugie luźne typowanie parametrów porównywanie pomocą operatora equal wprowadzić wiele zamieszania trudnych zdebugowania błędów niektórzy php starą oponę przerobi zero po trzecie zdarza pozoru banalnych sytuacjach doświadczony programista php wiedział zachowa kod dla przykładu sensowne intuicyjne true zostanie zwrócone empty empty empty oczywiste wiadomo boleśnie czymś takim przewrócimy jakbyś porównał wysiłek programowania wysiłku debugowania aplikacji napisanej phpie odpowiada nowak php nodejs developer assertis wysiłek włożony zaprogramowanie aplikacji zależy poziomu skomplikowania logiki biznesowej samo dotyczy wysiłku włożonego debugowanie bardzo skomplikowana logika biznesowa kosztuje programistę wysiłku zamiarem każdego programisty napisanie kodu dało modyfikować debugowanie aplikacji phpie proste trudne zależy czynników logika biznesowa programista zaimplementował logikę debugowania zapewnia czytelny stacktrace kod interpretowany uruchomić szybko wielu programistów korzysta debuggerów linijka linijce wstawia kod wyświetlający zawartość zmiennych zatrzymujący aplikacje a następnie uruchamiają samą aplikację zobaczyć odpowiada iwona jóźwiak senior php magento developer divante ze swojej strony dodam najżmudniejsze debugowanie integracji zdarza brakuje sandbox owych wysyłać strachu kolejne requesty prosty generować responsy problemem integracja lokalnych developerskich zewnętrznymi systemami to wydłuża pracę a wystąpienia błędu usunięcie staje drogą mękę dlatego developerzy mocno ologowują wszelkie integracje oprócz wspomnianych debugerów przydaje umiejętność przeszukiwania logów znajdują miliony informacji jeśli miałabym porównać wysiłek programowania debugowania obszarze napisać linijek kodu muszę spędzić niestety kilka dni poszukiwaniu błędu odpowiada andrzej precz senior php developer transparent data stopień skomplikowania debugowania odwrotnie proporcjonalny czytelności kodu wybór języka programowania znaczenia jeżeli kod nieczytelny splątany pisany byle odnalezienie poprawienie błędu mało przyjemne błędy oprogramowaniu programista popełniać wskaźnik liczby defektów tysiąca linijek kodu ang kloc powinno minimalizować przeglądem kodu testami innymi technikami badania pokazują oprogramowaniu występuje kilkudziesięciu błędów kloc do bardziej celowego poszukiwania błędów polecam rozszerzenie php xdebug dzięki celowo poszukiwać błędów zastawiać pułapki konkretnych warunkach tworzyć breakpointy konkretne typy wyjątków etc możliwości naprawdę przeogromne programista php powinien wiedzieć korzystać debugować poprzez wstawianie var_dump die kodzie jak oceniasz bezpieczeństwo refaktorowania innych głębokich modyfikacji kodu odpowiada nowak php nodejs developer assertis to niekoniecznie zależy języka jeśli dobre pokrycie kodu testami uznać wszelka refaktoryzacja bezpieczna powinna popsuć działania aplikacji każda głęboka modyfikacja kodu wiąże jakimś ryzykiem php ie zauważyć jakiś błędów kodu powodu język interpretowany czym wspomniałem wcześniej języki kompilowane pozwalają uniknąć wielu różnych problemów czym przewagę php em odpowiada iwona jóźwiak senior php magento developer divante jestem samego zdania zależy pokrycia kodu testami niestety wielu przypadkach testów prostu brak php zaawansowane cmry e commercy zwykłe strony autorskie silniki portali cała masa wordpressów z przykrością muszę powiedzieć mało miejscach dba tdd odpowiada andrzej precz senior php developer transparent data tu zgodzę poprzednikami większy wpływ bezpieczeństwo poprawnego refaktoringu kodu jakość kodu język programowania testy jednostkowe krótkie metody proste rozwiązania intuicyjne nazwy zmiennych należyta ostrożność stosowanych typach zmiennych parametrów używanie operatora identical zamiast equal assertsame zamiast assertequal testach jednostkowych pewno zmniejszą ryzyko popełnienia błędów php dobry język początkującego odpowiada nowak php nodejs developer assertis moim zdaniem chociaż zaczynałem dobrych dziesięć czasach wyglądał krytyka języka utrzymuje od wersji zmieniło tyle tyle dobrym pewnością nadaje osób zaczynających swoją przygodę programowaniem w wielu innych językach nowicjusza zniechęcić samo stawianie wszystkiego potrzebne dookoła ogóle móc napisać swój pierwszy skrypt program odpowiada iwona jóźwiak senior php magento developer divante są różne zdania temat osobiście uważam język dobry nauki wnosi pewne doświadczenie w każdym języku da napisać kod spaghetti architektoniczne dzieło wydaje tyle język istotny osoba wprowadzająca zawodu opiekun stażu to zadaniem zaszczepić dobre praktyki adepcie sztuki programowania odpowiada andrzej precz senior php developer transparent data zdecydowanie przemawiają niski próg wejścia składnia podobna wielu innych popularnych języków programowania postawienia rozwinięta społeczność dokumentacja php wymaga każdorazowego kompilowania kodu naprawdę wiele wybacza co więcej realna odczuwalność szybkich postępów prac pozwala początkującemu programiście uniknąć wielu frustracji towarzyszą dopiero zaczynamy poznawać dany język od czego zacząć naukę php odpowiada nowak php nodejs developer assertis moim zdaniem zaczynałem zadać jakiś projekt mniejszy większy spróbować zrealizować należy poznać podstawy programowania takiego czym zmienna instrukcja warunkowa rodzaje pętli sposoby działania itp następnie spróbować stworzyć mały sklep internetowy system logowania panel administracyjny obsługa zamówień itp w napotyka ciekawsze problemy okazji troszeczkę pokombinować stosowaniem różnych wzorców itp znam parę osób próbują innymi językami dzięki nauka wydaje bardziej interesująca suche oglądanie filmów youtube udemy odpowiada iwona jóźwiak senior php magento developer divante z pytanie najczęściej spotykam wielu forach grupach fb ponieważ bycie programistą ostatnimi czasy stało modne pretendentów zawodu wielu znajdują kurs internecie udemy wykonują kolejne czym trafiają grupę pytają czemu ogóle służyć nie wiem robię inni kolei chcieli programować wiedzą zacząć to programistą tematem szerokiej debaty developerów osobiście uważam nadaje fachu naukę języka rozpoczęłabym zastanowienia odpowiedzi pytanie po być banalne pytanie będziemy wiedzieli jakim obszarze chcielibyśmy spełniać ciężko naprawdę ruszyć niezależnie drogi jaką obierze adept przeczytanie dokumentacji wraz komentarzami absolutną podstawą kolejnym krokiem wzorce projektowe dopiero etapie wiemy chcemy wytwarzać możemy zacząć uczyć jakiegoś frameworka odpowiada andrzej precz senior php developer transparent data każdemu rozpoczynającemu naukę php proponuję przeczytać przyswoić informacje strony phptherightway com drugim równie ważnym sposobem nauki czytanie kodu innych codzienna praktyka poprzez samodzielne pisanie kodu może wydawać trywialną poradą nauce programowania podobnie innych dziedzinach ułamek procenta umiejętności predyspozycje reszta ciężka praca nauka skąd czerpać wiedzę inspiracje odpowiada nowak php nodejs developer assertis z pewnością komentarze dokumentacją starsi developerzy firmie itp swojej strony dodałbym mniej popularne ostatnio zacząłem korzystać discord używam agregatora newsów php golang a sprawdza na reddit społeczność zorientowana wokół php a czasu czasu pojawiają newsy linki ciekawych blogów medium warto obserwować autora odpowiada iwona jóźwiak senior php magento developer divante jak wcześniej wspomniałam dokumentacja powinna elementarzem każdego deva w komentarzach zamieszczonych znaleźć wiele inspirujących rozwiązań grupy dyskusyjne fora blogi prezentacje yt kolejne skarbnice wiedzy osobiście wierzę magię bootcampów znam perełki dzięki pracują branży devami na pewno staż starsi stażem koledzy koleżanki niesamowitą kopalnią doświadczeń odpowiada andrzej precz senior php developer transparent data kopalnią wiedzy istniejący kod aplikacji którą pracujemy w znajdziemy rozwiązania podobnych problemów przyjęte standardy programowania dowiemy lepiej obeznany jakimś obszarem biznesowym warto pytać innych programistów niekoniecznie większym stażem choć zderzyli większą liczbą przypadków większa szansa ręki podadzą gotowe rozwiązanie przydatną wskazówkę mniej doświadczeni myśleć bardziej niekonwencjonalnie a kreatywnie do oczywiście dokumentacja phpa używanego frameworka biblioteki stackoverflow itd warto pamiętać kluczową rolę odgrywa poświęcony programowanie czas w naturalny każda kolejna godzina przyczynia poszerzenia naszej wiedzy umiejętności a teoria zastąpi praktycznego doświadczenia zdobytego trudem jakimś trudnym problemem dlaczego warto uczyć php odpowiada nowak php nodejs developer assertis dla początkujących warto choćby niski próg wejścia nauczyć dosyć szybko stworzyć swoją pierwszą aplikację warto ostatnich czasach rynek pracy szuka developerów obeznanych tematach magento drupal wordpress pracy języku nadal dosyć sporo osób dopiero zaczynają przygodę programowaniem zmieniają branżę doskonała okazja zacząć odpowiada iwona jóźwiak senior php magento developer divante na temat naukę programowania powinno zaczynać php toczy wiele debat zwolennicy php uważają język natomiast przeciwnicy wyliczają niedoskonałości nie będę ukrywać należę pierwszych tak pisał próg wejścia mniejszy sprawia szybciej możemy zacząć cieszyć rozwoju chociażby zdobywając pierwszy etat dużo znaleźć zlecenia ramach freelance zaradni młodzi ludzie dzięki zdobywać doświadczenie zawodowe uda dostać software hause agencji interaktywnej odpowiada andrzej precz senior php developer transparent data uczyć warto wszystkiego spleśnieć starość ale poważnie język widzisz swoją przyszłość lubisz pomimo wad for it jakie najczęściej pułapki czyhają nowicjuszy odpowiada nowak php nodejs developer assertis zdecydowanie wielu firmach rozmowach rekrutacyjnych spotkać pytaniami solid acid dry wzorce projektowe nowicjusz wypaść procesu pytania czysto teoretyczne spotkałem programistów niezbyt umieją odpowiedzieć wszystkie typu pytania natomiast nieświadomie wyczucia stosują zasady pisząc kod sam osobiście wpadałem taką pułapkę kolejną pułapką mnogość problem ocenieniu rzeczywiście wyjaśnienia kod pisany autora artykułu prawidłową techniką sposobem podejścia rozwiązania problemu drugą pułapkę sprytnie ominąć obserwując wcześniej wspomniane społeczności discord reddit często dyskusjach developerzy dowodzą dany artykuł totalnie sensu a kod zamieszczony niczego nadaje wtedy społeczność zebrana wokół php a weryfikuje wiedzę artykułu odpowiada iwona jóźwiak senior php magento developer divante często wspominam największymi problemami jakimi mierzą adepci akademickie podejście zrozumienie biznesu przesyt możliwości rozwoju wiedzy pułapką czasem ciężko wydostać znam osoby przygotowują pierwszych rozmów rekrutacyjnych mnóstwo czasu porównując swoją wiedzę doświadczeniem seniorów wybierają dalszą naukę zamiast aplikacji staż wiele osób rozwija swoją wiedzę szeroko tyle zgłębiona mogły stać specjalistami jakimkolwiek obszarze odpowiada andrzej precz senior php developer transparent data równie powszechną pułapką branży it przypadku nauki języka błąd poznawczy zwany efektem dunninga krugera polega osoba niewykwalifikowana fałszywe wyobrażenie osiągnięciu poziomu eksperckiego buduje złudne przekonanie braku potrzeby dokształcania nieadekwatną ocenę własnych umiejętności kolei utrudnia przyjmowanie krytyki własnych rozwiązań dobrym antidotum kontrybuowanie dużych projektów open source praca dużą liczbą ludzi konfrontowanie opinii rozwiązań doskonale otwiera oczy własny poziom samorozwoju uczy pokory ogólnie rozwija programistę dobrym należy wspomnieć praca projektach oss zarezerwowana wymiataczy github platformy ułatwiają znajdowanie zadań ludzi różnym poziomie znajomości języka produktu a promują atrakcyjny hacktoberfest co musiałoby stać php stracił popularności odpowiada nowak php nodejs developer assertis głównym zagrożeniem kwestii musiałoby chyba community społeczność przestałoby rozwijać kolejne wersje języka mimo nadal sporo stron internetowych aplikacji biznesowych używa języka nadal wymagać utrzymania rozwoju dodatkowo moich obserwacji wynika paru fali wzrostowej wykorzystanie magento wordpress a drupala rosnący kawałek tortu rynku developerów php a skoro nadal powstają kolejne aplikacje użyciu rozwiązań php nadal czołówce popularnych języków odpowiada iwona jóźwiak senior php magento developer divante nie wydaje nadchodzącym czasie język php stracił popularności wręcz przeciwnie bardziej docenianym językiem a popularne silniki webowe oparte php stale rozwijają zwiększają popularność to ogromna społeczność motorem napędowym rozwoju php niemniej produkt usługa prędzej później zostają zastąpione czymś innym wydaje php zaczęło tracić popularności musiałyby powstać oparciu język języki silniki zastąpiłyby obecne znane użytkownikom podoba zaoferowania chwili obecnej wciąż rozwijają próg wejścia wysoki odpowiada andrzej precz senior php developer transparent data php straciłby popularność społeczność użytkownicy całkowicie solidarnie odwrócili zapewne kiedyś język umrze php grozi długi czas zwyczajnie zbyt silną niezagrożoną pozycję blogowo ecommercowym a nowych wersji kładzie duży nacisk wydajność widać wyraźnie ewolucję języka stronę szybkiego stabilnego nowoczesnego narzędzia programisty jakbyś porównał testowanie expressing programmer intent via types w haskellu używamy obu podejść jednocześnie staramy eliminować największą ilość potencjalnych problemów zwłaszcza niezwiązanych logiką biznesową etapie projektowania typów dzięki testach skupić esencji odpowiedział adam szlachta software engineer restaumatic uczestników devdebaty haskellu którą przeprowadziliśmy zobaczcie zapytaliśmy zaproszonych seniorów odpowiedzi udzielili piotr moczurad senior python developer ucreate zapalony programista funkcyjny zdradzający haskella pythonem zawodowo pracuje firmie ucreate pomaga rozwijać startupom wcześniej parę członkiem zespołu tworzącego wizualno tekstowy język luna w wolnym czasie robi doktorat agh jeździ rowerze gra rozmaitych instrumentach wbrew przeciwnościom próbuje pisać clojure mikołaj konarski konsultant well typed llp słynnej leciwej firmie zaprogramuje byle haskellu obronił doktorat semantyki kompilacji funkcyjnych języków programowania długie lata uczył studentów programowania funkcyjnego modne w wolnych chwilach koduje grę ascii roguelike allure of the stars kamil figiela współzałożyciel typed space inicjatywy popularyzującej haskella programistów zastosowaniach produkcyjnych doktorant akademii górniczo hutniczej krakowie programuje dziecka a zawodowo pracuje głównie haskellu z zamiłowania tancerz dj adam szlachta software engineer restaumatic wielbiciel programowania funkcyjnego programujący zawodowo haskellu purescripcie współzałożyciel organizacji typed space popularyzującej haskella branży it autor warsztatów prelekcji temat programowania funkcyjnego a prowadzący zajęcia programowania funkcyjnego haskellu akademii górniczo hutniczej krakowie prywatnie m in pasjonat syntezy modularnej co najbardziej podoba tobie haskellu odpowiada piotr moczurad senior python developer ucreate elegancki model funkcją stosunkowo mało wyjątków reguły dzięki składnia haskella prosta zachęca tworzenia bardziej skomplikowanych bytów kompozycję mniejszych części odpowiada mikołaj konarski haskell consultant well typed llp piszę modyfikuję program kompilator marudzi marudzi końcu zadowolony uruchamiam działa to częste zaskoczenie nowych użytkowników haskella nudzi odpowiada kamil figiela współzałożyciel typed space programowanie haskellu porównać układania klocków lego z prostych elementów komponujemy większe a kompilator cały czas weryfikuje elementy pasują siebie jeśli pasują pozwoli połączyć więcej podpowie jakiego typu spodziewał oczywiście nadal możemy stworzyć cykl nieparzystej liczby kół zębatych program zadziała poprawnie unikamy mnóstwa frustrujących pomyłek silny system typów daje lepsze gwarancje poprawności kodu zmienia myślenia wymusza bardziej przemyślaną architekturę odpowiada adam szlachta software engineer restaumatic wymuszenie myślenia nastawionego kompozycję elementów przeciwieństwie myślenia opartego krokach wykonać programie haskell ułatwia myślenie rozbudowanym systemem typów elementami takimi funkcje algebraiczne typy danych klasy typów programy pisane haskellu cechuje matematyczne piękno prostota niezawodność z drugiej strony najbardziej wkurza cię haskellu jakie ograniczenia odpowiada piotr moczurad senior python developer ucreate leniwa ewaluacja wielu problemów pisaniu benchmarkowaniu programów można zaryzykować błędna decyzja podjęta projektowaniu języka wszystkim głupio wycofać dość powiedzieć większość optymalizacji programów haskellu kątem wydajności moim przypadku sprowadza szukania zapomniałem wymusić ewaluację oczywiście oznacza leniwa ewaluacja zły pomysł zamiast podejścia haskellowego możliwości chwilowego wyłączenia leniwości proponowałbym podejście scalowe możliwość chwilowego włączenia leniwości zmiennej więcej temacie blogu odpowiada mikołaj konarski haskell consultant well typed llp z powierzchownych rzeczy wkurza powszechna kultura upiększania kodu formatowanie rozmaite rzeczy kolejnych liniach zaczynały samej kolumny to spędzanie godzin lustrem z poważnych rzeczy wkurza najbardziej zagnieżdżonej pętli programu rozumiem kompilator zrobił zrobił inline funkcji wyższego rzędu czasami kosztuje wydajności muszę nurkować generowanego kodu pośredniego sprawdzić dzieje ogólniej mówiąc ograniczeniem haskella runtime garbage collectorem sposobem kompilacji closures itp utrudniają robienie aplikacji real time czasem wymagają nieoczywistej interwencji odpowiada kamil figiela współzałożyciel typed space są pewne braki narzędziach deweloperskich brakuje przykład dobrego narzędzia zarządzania importami modułów z miesiąca miesiąc sytuacja poprawia pozostało sporo zrobienia bolączką większych projektów stosunkowo długi czas kompilacji a zużycie pamięci kompilator cena którą płacimy możliwości gwarancje daje rozbudowany system typów haskella użyjemy użylibyśmy innych języków garbage collectingiem systemach czasu rzeczywistego problematyczna nadal cross kompilacja wsparcie platformy arm chociaż tematach zostało zrobione ostatnim czasie odpowiada adam szlachta software engineer restaumatic na dzień najbardziej irytujące wciąż niewystarczająco wygodne wsparcie ide zwłaszcza zakresie automatycznego wstawiania importów podpowiadania identyfikatorów pasujących kontekstu ponadto pewien bagaż historyczny skutkujący mnogością rozszerzeń stylów pisania zapewne przyczynia mniejszej adopcji biznesie jakbyś porównał wysiłek programowania wysiłku debuggowania aplikacji napisanej haskellu odpowiada piotr moczurad senior python developer ucreate chyba głównym selling pointem haskella aspekt wkładamy sporo wysiłku a priori dobre zamodelowanie problemu pomocy typów a następnie zbieramy owoce postaci type driven development wiem typ dana funkcja zapewne niewiele możliwych jedną sensowną implementację bezproblemowego debugowania refaktorowania jednak zwykle bywa pewien haczyk część problemów wymaga użycia wydajnych bibliotek c pewnego stopnia działania bezpośrednio pamięci haskellu zobaczyć segmentation fault szukać długo przyczyny odpowiada mikołaj konarski haskell consultant well typed llp gdy piszę program tysiąc możliwych metafor typów danych modeli matematycznych mogę wybrać ująć problem trudność polega wybrać model adekwatny później najbardziej bił zrobię głupiego to ból zbyt obfitego wyboru natomiast debuggowanie potem mechaniczne polega eliminowaniu kolejnych podejrzanych jeśli typy danych wybrane sensownie podejrzanych niewielu zasięg każdego ograniczony niewielkiej części kodu kompilator pilnuje tutaj sherlock holmes etapie programowania debuggowania odpowiada kamil figiela współzałożyciel typed space dobre zamodelowanie zakodowanie aplikacji wymaga pewnego wysiłku debugowanie czysta przyjemność wiele typowych innych błędów chociażby rozmaite warianty null pointer exception zostanie prostu wyłapane kompilator programowanie haskellu promuje używanie czystych funkcji wynik determinowany argumenty a funkcja powoduje efektów ubocznych io przewidywalność powtarzalność zachowania powoduje wyizolować zdefektowane elementy najtrudniejsze zdiagnozowania błędy styku haskella bibliotekami napisanymi innych językach styku technologii gwarancje systemu typów thread safety musimy zadbać sami odpowiada adam szlachta software engineer restaumatic chyba zacząć należy haskellu klasyczne debugowanie zdarza rzadziej innych językach znaczna część potencjalnych błędów wyłapywana etapie kompilacji programowanie haskellu czasem przypomina narzucanie siebie mnóstwa ograniczeń a potem tworzenie implementacji poprawnie skompiluje błędy prześlizgną etapu wyśledzenia odpowiedzialne komponenty wyizolować dzięki metodom zarządzania efektami możemy określić poziomie typów dana funkcja prawo czytać bazy prawa zapisywać dzięki eliminacja podejrzanych dużej mierze opiera czytaniu sygnatur typów podsumowując wysiłek programowania większy a debugowania mniejszy przypadku innych języków jak oceniasz bezpieczeństwo refaktorowania innych głębokich modyfikacji kodu odpowiada piotr moczurad senior python developer ucreate kompilator pewno pomaga refaktorowaniu pisząc dynamicznie typowanych językach unit testy odnieść wrażenie wykonuje pracę powinna dziać automatycznie funkcja pewno zwróci liczbę w sensie refaktory haskellu praktycznie darmo zmieniam kodzie kompiluję poprawiam błędy wracam punktu działa choć mowa refaktorowaniu warto posłuchać mówi rich hickey typie maybe https youtu be yr5wdgrpoug dałoby zrobić lepiej odpowiada mikołaj konarski haskell consultant well typed llp oczywiście testów rusz reguły znacznie więcej czasu spędzam poprawiając błędy wykrył kompilator nieliczne przetrwały testów dzięki statycznemu typowaniu haskella dzięki dyscyplinie definiowania własnych typów wyrażają założone własności programu doświadczam każdej dużej zmianie kodu jakość poprawia lepiej rozumiemy modele matematyczne spodem nie haskellu zaciągać technological debt kompilator staje okoniem trzeba pisać program systematycznie początku złym stylu takim najmniej obiecujemy najmniej określamy potem zmiany fast furious and dangerous odpowiada kamil figiela współzałożyciel typed space w innym komercyjnie wykorzystywanym języku refaktorowanie równie bezpieczne poza wsparciem strony systemu typów warto podkreślić zalety testowania oparciu własności property based testing odpowiada adam szlachta software engineer restaumatic refaktorowanie niezwykle bezpieczne trochę postarać zepsuć głębokie modyfikacje prostsze innych technologiach większość problemów zgłaszana etapie kompilacji ułatwia skupienie umysł logice biznesowej zaprzątanie głowy elementami przypadkowymi obfituje kod innych słabiej typowanych językach zwróci porównanie wartości różnych typów gdzieś obsłużyć wartości null jakbyś porównał testowanie expressing programmer intent via types odpowiada piotr moczurad senior python developer ucreate expressing programmer intent via types przynosi parę korzyści mówi kompilatorowi czego spodziewać danym kodzie dzięki automatycznie możemy sprawdzić napisaliśmy zgadza umówiliśmy kompilatorem mówi użytkownikom czego spodziewać kodzie chyba zaniedbywany aspekt niezwykle ważny sygnatura funkcji powiedzieć więcej strony dokumentacji z otypowanym kodem szybciej pracuje określa wiele matematycznych właściwości kodu w skrajnych przypadkach będziemy mogli próbować dowodzić poprawności programów a gra dużą stawkę warto zrobić w wyklucza testami kompiluje działa wielkim kłamstwem dobry codebase haskellowy takowe posiadał będą zapewne nieco bardziej wysokopoziomowe językach pokroju pythona odpowiada mikołaj konarski haskell consultant well typed llp w sumie odpowiedziałem powyżej te narzędzia uzupełniają testy szczególnie pseudo losowe używając inteligentnego generatora testów quickcheck częściej potrafią wykryć problemy nieoczekiwane a typy danych którymi wyrażamy intencje reguły wykrywają wykroczenia wiemy końca programu kusiło popełniać te drugie błędy częstsze pierwsze złośliwsze co ciekawe haskellu część wspólna testowania formalnego wyrażania własności programu same formuły logiczne potrafią quickcheck użyte generowania testów a liquid haskell wzbogacania typów funkcji użycie potem weryfikowane pluginami kompilatora odpowiada kamil figiela współzałożyciel typed space oba podejścia uzupełniają należy obu używać rozsądkiem typy niosą informacje kompilatora pełnią rolę dokumentacyjną dzięki gwarancjom dawanym system typów pisać mniej kodu mniej testów skupić istocie rozwiązywanego problemu przykładem stosowany praktyce typ niepustej listy implementując funkcję logika zakłada istnienie najmniej jednego elementu możemy taką gwarancję zapewnić poziomie typów zwykła lista daje takiej gwarancji a musielibyśmy obsłużyć dane wejściowe zaimplementować testy z drugiej strony wszystkie własności warto kodować systemie typów pewnego momentu dodatkową złożoność kodu uzasadnienia korzyściach testy pewnością przydadzą weryfikacji wysokopoziomowej logiki odpowiada adam szlachta software engineer restaumatic w haskellu używamy obu podejść jednocześnie staramy eliminować największą ilość potencjalnych problemów zwłaszcza niezwiązanych logiką biznesową etapie projektowania typów dzięki testach skupić esencji warto zwrócić uwagę biblioteka quickcheck posiadająca warianty każdym liczącym języku programowania powstała haskellu a dzięki rozpropagowana została idea testów badających właściwości niezmienniki generacji przypadków testowych automatycznie dlaczego warto uczyć haskella a lisp odpowiada piotr moczurad senior python developer ucreate dlaczego pisanie lispie modniej clojure umysłu frajda zapewne gdybym wybrać język będę pisał końca byłby lisp gąszcz nawiasów luźne typowanie pomaga pisaniu niezawodnych programów z drugiej strony dopisaniem każdej linijki clojure zastanawiam trzy razy prowadzi nieco bardziej przemyślanego zwięzłego kodu odpowiada mikołaj konarski haskell consultant well typed llp lisp czcigodnym dziadkiem języków funkcyjnych a możliwości samo modyfikacji kodu niedoścignione wyjątkiem assemblera jednak moich skromnych doświadczeń lispem używanym język skryptowy edytora tekstów emacs wnoszę brakowałoby statycznego typowania rygorystycznego wydzielenia pomocy typów małych fragmentów programu czynienia side effects wszystkie struktury danych immutable mówiąc otwarcie robię strasznie wiele błędów emacs lispie ujawniają wiem dzieje z względu zastosowań samo modyfikacja konieczna polecam raczej haskella odpowiada kamil figiela współzałożyciel typed space prawdę mówiąc kodowałem lispie trudno bezpośrednio odnieść nieco doświadczenia elixirem poza funkcyjnym paradygmatem języki obecność makr dynamiczne typowanie to podejście początkowej fazie projektu wydaje wygodne pozwala szybką implementację aplikacji w perspektywie dłuższego rozwoju każdej zmianie ryzykujemy wprowadzenie post factum oczywistych niezauważonych trudnych zdiagnozowania bugów mojego doświadczenia wiele mogłoby wydarzyć haskellu czynienia statycznym typowaniem odpowiada adam szlachta software engineer restaumatic z całą pewnością warto uczyć lispa choćby rozszerzenia horyzontów myślowych końcu pierwszym językiem funkcyjnym istotnie różny haskella konceptualnie szczególnie ciekawa idea s wyrażeń zapisu kodu struktury danych system makr niemniej zastosowaniach praktycznych zdecydowanie stawiam haskella ekspresywny system typów powodów przedstawiłem wcześniejszych odpowiedziach czego twoim zdaniem brakuje haskellowi stać językiem mainstreamowym odpowiada piotr moczurad senior python developer ucreate standaryzacji dobrej dokumentacji argument standaryzacją choćby współistnienie pakietów obsługi wyjątków gąszcz pakietów hackage bliższym przyjrzeniu okazują zarzuconymi miesiącu zabawkowymi projektami poniekąd dokumentacją jakieś ciało standaryzujące pozwoli wrzucić hackage pakietu dokumentacji niekompletnego sytuacja wyglądałaby wiele lepiej swoją drogą haskellowi potrzeba jakiegoś koronnego use case scala akkę ruby railsy python numpy pandas etc być przyjazny użytkownikom framework załatwiłby sprawę odpowiada mikołaj konarski haskell consultant well typed llp nauczania matematyki a rachunków szkołach podstawowych odpowiada kamil figiela współzałożyciel typed space brakuje wielkiego biznesu frameworku ustandaryzowałby pewne rzeczy konsekwencji spopularyzowałby haskella dla każdego zagadnienia obsługa błędów zarządzanie efektami framework webowy repozytorium hackage conajmniej kilka konkurujących bibliotek należy wybrać to trudne zwłaszcza osób stawiających pierwsze kroki ekosystemie w przypadku innych języków dylematów ruby railsy scala play a elixir phoenixa odpowiada adam szlachta software engineer restaumatic zdecydowanie brak standaryzacji zakresie najlepszych praktyk zwłaszcza zakresie organizacji programu a szczególności zarządzania efektami istnieje kilka alternatywnych podejść mtl free r monads readert pattern final tagless podobnie bibliotekami biblioteką standardową dostępu baz relacyjnych web frameworków wiele konkurencyjnych którą stałaby duża organizacja wspierała rozwój promowała dostarczała odpowiednich materiałów wsparcia haskell wysoki próg wejścia nowych programistów brak standardów pogarsza sytuację co jakiś czas pojawiają próby zmiany stanu rzeczy pewno warta uwagi biblioteka rio elixir przedstawiany następca ruby ego m in lepiej obsługuje współbieżność z drugiej strony rynku zbyt mało developerów znających elixira technologia stała częściej wykorzystywana biznes mimo zarówno ruby elixir cieszą sporym zainteresowaniem postanowiliśmy poprosić senior developerów opowiedzieli swoich wrażeniach używania dwóch języków razem netguru przygotowaliśmy pytania odpowiedzieli bartosz pranczke ror department manager netguru firmie oferującej usługi zakresu doradztwa tworzenia oprogramowania product designu odpowiada zarządzanie działem ruby rails elixir pracując jakość dostarczanych klientom usług szła parze profesjonalnym rozwojem komfortem pracy developerów paweł ruby developer siedmioletnim doświadczeniem komercyjnym obecnie team leader boostcom zespole odpowiedzialnym przetwarzanie danych w elixirze pisze głównie godzinach oprócz gra curling michał buszkiewicz programista aplikacji internetowych ruby elixir prograils com szczególnym zamiłowaniem zaglądania mało znane zakamarki stosowanych języków przekazywania wiedzy chętnym wejścia programowania po godzinach odreagowuje fotografowaniem graniem gitarze pytanie czym ruby różni elixira odpowiada bartosz pranczke engineering manager netguru główną różnicą paradygmaty programowania języki wspierają ruby język obiektowy elixir natomiast język funkcyjny jest fundamentalna różnica wymaga innego sposobu myślenia podczas programowania kolejną istotną różnicą uruchomieniowe elixir wykonywany erlang vm pozwala zupełnie model wykonywania programu wpływa pisze programy wykorzystujące więcej procesor naraz odpowiada paweł team leader boostcom ruby elixir zupełnie różne języki pierwszy ogólnego przeznaczenia nastawieniem programowanie obiektowe elixir natomiast zbudowany maszynie wirtualnej erlanga wszystkim actor model współbieżność odpowiada michał buszkiewicz ruby rails developer prograils com są języki dwóch różnych aczkolwiek przenikających najodpowiedniejszą odpowiedzią byłoby wszystkim fundamentalna różnica zaczyna samej idei przyświecającej twórcom przypadku ruby każdym kroku podkreśla zoptymalizowany kątem radości programowania akceptuje fakt pewne zastosowane rozwiązania stawać szranki językami czołówki rankingów wydajności elixir natomiast swego rodzaju nadbudowa język erlang dziedziczy nastawienie programowanie aplikacji wysokiej niezawodności długotrwale przetwarzających dane wielowątkowy paradygmaty języków funkcyjny elixir obiektowy ruby natury całkiem odmienne pewnym sensie służą realizacji wspomnianych nadrzędnych idei którymi podążają ruby ułatwia osiągnięcie wysokiej produktywności programowania dzięki swojej niepodrabialnej interpretacji programowania obiektowego elixir zapewnia platformę tworzenia niezawodnych aplikacji promując paradygmat funkcyjny mechanizmy współbieżności oparte modelu aktorów pytanie co ruby elixir sobą wspólnego odpowiada bartosz pranczke engineering manager netguru nieco mniej technichnicznie odpowiadając języki trochę kuzyni jeśli zadamy pytanie mógłby wyglądać ruby wykorzystuje maszynę wirtualną erlanga wraz wszystkimi możliwościami wyszedłby pewnie elixir wiele narzędzi znanych rubiego bezpośredni odpowiednik elixira pry ruby iex pry elixirze bundler mix itd autorem elixira josé valim aktywnie działał rozwoju ekosystemu rubiego spodziewać większość dobrego ruby inspiracją tworzeniu języka narzędzi elixirze odpowiada paweł team leader boostcom przede wszystkim składnię od początku składnia elixira miała przypominać ruby uznawana wielu przyjazna programisty jose valim twórca elixira wiele programistą ruby poza oba języki cieszą zainteresowaniem podobnych w obu wypadkach koncentrację web developmencie zdecydowaną dominację jednego frameworka kwestii odpowiada michał buszkiewicz ruby rails developer prograils com czasem tłumaczę mówiąc elixir język gramatyką erlanga ortografią ruby duże uproszczenie uwagi wieloletnie związki twórców języka elixir społecznością ruby pokusić podobieństwo najbardziej zachęca programistów ruby zainteresowania językiem elixir pewnością ułatwia stawianie pierwszych kroków przyzwyczajenia dotyczące architektury aplikacji należy odłożyć bok powierzchowne podobieństwo składni nazewnictwa bibliotece standardowej pomaga czuć bardziej domu na pewno oba języki charakteryzuje wysoka elastyczność dzięki rozbudowanym mechanizmom metaprogramowania autorzy bibliotek aplikacji chętnie korzystają tworzyć mini języki dsl domain specific languages służące deklaratywnemu czytelnemu opisowi zachowania pewnego elementu aplikacji pytanie w czym ruby lepszy elixira w jakich przypadkach sprawdzi lepiej odpowiada bartosz pranczke engineering manager netguru przewagą rubiego wielkość ekosystemu bez problemu znajdziemy biblioteki wspomogą rozwiązaniu najczęstszych problemów znacznie bardziej egzotycznych no wszystkim ruby rails dalej pewnie framework szybciej więcej gotowych klocków utartych szlaków zbudujemy większość typowych aplikacji webowych odpowiada paweł team leader boostcom jeśli ktoś przyzwyczajony programowania obiektowego bazującego klasach ruby naturalnym wyborem z pewnością mocną przewagą znacznie większy ekosystem przyznać elixir zapełnia różnicę szybko ruby wykorzystałbym wszelkiej maści skryptów deploymenty backupy wiele narzędzi ekosystemu ruby cechuje niezwykłą wręcz stabilnością sidekiq warto rozważyć istotny czynnik odpowiada michał buszkiewicz ruby rails developer prograils com chcąc porównywać same języki trudno użyć całkiem obiektywnych kryteriów skupię subiektywnych moim odczuciu języka wcielenie jakiejś koncepcji najczęściej charakterze proceduralnym a efekt czytelniejszy bardziej zrozumiały ruby biblioteka standardowa zastosowane konwencje nazewnicze powodują czytając napisany kod przetwarzamy myślowo niczym język naturalny to wraz elastycznością osiągniętą dzięki rozbudowanym możliwościom metaprogramowania dużej mierze przyczyniło sukcesu czerpiących zalet bibliotek ruby rails czele ostatecznie oceniając ruby język cały ekosystem ruby dojrzały szeroko zaadaptowany praktyczne zastosowania języka aplikacjami internetowymi rozpowszechnione języku python istotną zaletą bywa fakt wiele serwisów wystawiających api udostępnia konsumujące biblioteki ruby znaleźć gotową bibliotekę elixir trzeba przyznać elixira dawna pustynią wiele problemów sprawdzone de facto standardowe rozwiązania pytanie do czego lepiej wykorzystać elixira odpowiada bartosz pranczke engineering manager netguru elixir obiektywną przewagę wszędzie potrzebujemy ponadprzeciętnej niezawodności wydajności erlang technologią stosowaną obsługi systemów telekomunikacyjnych działają nieprzerwanie lata jest sprawdzone boju rozwiązanie obsługi tysięcy połączeń czasie odpowiada paweł team leader boostcom z uwagi koncentrację współbieżności elixir nada wymagana klasycznym przykładem aplikacje korzystające persystentnych połączeń web socketów ruby radzi najwyżej a właściwie należałoby powiedzieć słabo elixir natomiast potrafi większego nakładu pracy utrzymać dziesiątki setki tysięcy połączeń elixir sprawdzi pisaniu własnych narzędzi korzystających współbieżności przykład scraperów ma przejęty erlanga fantastyczny system supervisorów pomagają zarządzać pulą procesów wykonujących jakąś pracę często wymienianą cechą elixira a właściwie phoenixa zwraca odpowiedzi mikrosekundach to prawda dla railsów kompletnie nieosiągalne jeśli dana aplikacja potrzebuje czasów warto rzucić okiem elixira odpowiada michał buszkiewicz ruby rails developer prograils com jeśli myślenie naszej aplikacji zaczyna wykraczać zamknięte ramy cyklu odpowiedź http powinniśmy poważnie zainteresować zaoferować elixir mechanizmy programowania współbieżnego ruby upośledzone wiem stanie znaleźć słowo tam liczy wysoka przepustowość czas odpowiedzi elixir zdecydowanie lepszym rozwiązaniem to oczywiście kwestia początku istotna przewidujemy aplikacja przyszłości wymagać wysokiej skalowalności warto rozważyć zastosowanie elixir promując paradygmat funkcyjny wymusza programiście utrzymywanie pewnego rygoru czystości kodu prowadzi powstaje mniejszym tempie praktycznie dzięki lepiej przemyślany jeżeli utrzymywanie takiego rygoru jesteśmy stanie pozwolić pewnością wybór języka zaprocentuje pytanie jakie napotykasz największe problemy związane wykorzystaniem ruby ego odpowiada bartosz pranczke engineering manager netguru najczęściej wymienianym problemem rubiego wydajność o obiektywnie powiedzieć rozwiązania bardziej wydajne ciężej określeniem faktycznie problem aplikacji dobrym kontrprzykładem platforma shopify napisana ror obsługuje czasie black friday tysięcy zamówień minutę pewnie kilkaset razy więcej samych zapytań problemem najczęściej spotykam fakt najbardziej zalecane twórców ror podejście rails way powodować problemy rosnącej aplikacji nie dobre podejście czasami powoduje aplikacje pisane nieco mniej doświadczonych programistów podążają rails way kończą trudne utrzymania odpowiada paweł team leader boostcom większość pewnie najchętniej zacytowała popularną opinię ruby wolny to prawda webowym naprawdę większego znaczenia obecnie największe problemy utrzymanie dużych projektów jeśli rozwijamy nieostrożnie wpaść pułapkę doprowadzającą posiadania niezrozumiałego kodu wykładał mało oczekiwanych momentach niestety wiele standardowych metod robienia rzeczy ruby pomaga pisaniu projektów odpornych starzenie a bywa oporne adoptowaniu nowych lepiej przemyślanych rozwiązań wciąż powstają odpowiada michał buszkiewicz ruby rails developer prograils com przewrotnie stwierdzę największym problemem języka największe zalety rękach kiepskich programistów przykładowo ruby każdą istniejącą klasę możemy otworzyć modyfikacji dopisać nową metodę zmodyfikować istniejącą monkey patching to bywa przydatne sytuacjach jakiegoś powodu musimy lekko zmodyfikować zachowanie któregoś używanych gemów wykonanie programistę końca robi bywa nieoczekiwanych rezultatów skrajnej frustracji bolączką ruby programowanie współbieżne racji obecnego mechanizmu global interpreter lock wielowątkowość staje niemal bezużyteczna obchodzi stosując potrzeby osobne procesy poziomie systemu operacyjnego mechanizmem kosztownym mało wydajnym niedawno miałem czynienia koniecznością zrównoleglenia skomplikowanego skryptu ruby wyrwałem trochę włosów głowy odkrywając drodze kilka powodujących błędy segmentation fault bugów rubym stosowanych gemach zdecydowanie polecam pytanie jakie napotykasz największe problemy związane wykorzystaniem elixira odpowiada bartosz pranczke engineering manager netguru elixir nadal technologia niszowa powoduje stosunkowo mały ekosystem znacznie częściej samemu pisać rozwiązania innych technologiach dostępne postaci bibliotek problemem prostu fakt większość programistów uczy programować językach obiektowych czasem przekłada pewne problemy zmianie paradygmatu nie pomaga fakt uczelniach zwykle jedynym językiem funkcyjnym uczy prolog jest język kogoś początkującym etapie kariery raczej wydaje ciekawy rozwiązaniem realne problemy może ogólnie nastawiać języków funkcyjnych odpowiada paweł team leader boostcom głównym problemem widzę próba pisania elixirze takim nowym lepszym ruby ponieważ języki cechują zupełnie paradygmaty wyjść taki kod wydajny odporny błędy jest pewna pułapka którą język nieświadomie zastawił poprzez posiadanie podobnej składni największym moim zdaniem problemem posługiwać elixirem należałoby najpierw zapomnieć ruby nauczyć erlanga prostym zadaniem odpowiada michał buszkiewicz ruby rails developer prograils com elixir moim odczuciu trudniejszy debugowaniu ruby dostępne dzień dzisiejszy narzędzia stosunku dzień używamy ruby ograniczone niezbyt intuicyjne sprawę utrudnia dodatkowo mechanizm makr jednocześnie czyni język niesamowicie elastycznym a zarazem kompletnym wrzodem chodzi analizę występujących problemów osobiście odczuwam problemu przeskakiwaniem między paradygmatem obiektowym a funkcyjnym obu poruszam swobodnie staram naprawdę stosować podobne dobre praktyki myślenia dała prezentacja solid elixir georgina mcfadyen elixirconf eu paradoksalnie pewną irytację sprawia czasem ortograficzne podobieństwo języków czai mnóstwo fałszywych przyjaciół pytanie czy dostrzegasz różnice utrzymania dużej aplikacji ruby m a elixirze jakie odpowiada bartosz pranczke engineering manager netguru ciężko mówić obiektywnych różnicach utrzymania dużej aplikacji zasługa programistów pracujących a technologii obie technologie wspierają wszystkie potrzebne mechanizmy móc zarządzać dużą aplikacją obie wymuszają stosowania odpowiada michał buszkiewicz ruby rails developer prograils com zgodzę opinią naprawdę utrzymania napisanej aplikacji ruby taka utrzymania napisanej aplikacji którą stoi elixir promowane charakter języków praktyki programistyczne tendencję prowadzenia rozwiązań różnym charakterze aplikacje ruby rails rosną czasem ogromnych rozmiarów monolity stając kolosami glinianych nogach charakter języka elixir powoduje szybciej zaczynamy myśleć architekturach opartych mikroserwisach grunt przemyślany projekt pytanie jak oceniasz społeczność ruby ego elixira czy uważasz któraś bardziej przyjazna pomocna odpowiada bartosz pranczke engineering manager netguru w dużym stopniu społeczności przenikają myślę duża część programistów elixira programowała dalej programuje ruby w przypadku obu technologii twórcy należą sympatycznych osób wpływa poziom kultury społeczności powiązanych tymi technologiami odpowiada paweł team leader boostcom obie społeczności fantastyczne główna różnica taka społeczność ruby większa a wzrostem liczby ludzi idzie pojawianie toksycznych jednostek ludzie potrafią zapytać pomoc itp mniejsze społeczności odbierać przyjaźniejsze fanem obu odpowiada michał buszkiewicz ruby rails developer prograils com społeczność ruby istnieje wiele dłużej traktować zarówno zaletę wadę czasem wręcz zbyt znaleźć nieaktualną odpowiedź jakieś pytanie pochodzącą załóżmy w społeczności ruby wydaje znaczny udział osób nieposiadających wykształcenia informatycznego posiedli fach samodzielnie pomocą kursów licznych społeczności warsztatów studia dać atut postaci szerszego spojrzenia informatykę programowanie zwolennikiem otwartości zawodu znam wielu programistów przechodzących innych branż elixir posiada prawdopodobnie wyższy próg wejścia względu bardziej wymagający paradygmat niemniej da ostatnio zaobserwować inicjatywy mające celu upowszechnianie pytanie a zadajemy pytanie powinno brzmieć czy czas web developerzy znali zarówno ruby ego elixira odpowiada bartosz pranczke engineering manager netguru na rynku dostępne ciekawych technologii na pewno warto aktywnie rozszerzać wachlarz swoich umiejętności np znajomość elixira koncepcji programowania funkcyjnego wpłynie jakiej jakości kod piszemy ruby nauczy pomocne maksymalne ograniczenie zmienności obiektów ang immutable objects vice versa odpowiada paweł team leader boostcom to dopiero zadane pytanie oczywiście dobry czas nauczyć kolejnego języka nie wyobrażam sytuacji miało zaszkodzić nowy język trochę punkt widzenia pozwala spojrzeć pewne rzeczy innej perspektywy na przykład społeczność tworząca obecnie serię narzędzi dry rb czerpie c javy ruby odcinał poznanie elixira zdecydowanie zmieniło patrzenia kod tworzenia aplikacji zaczęło brakować pattern matchingu stworzyłem bibliotekę ruby inaczej spojrzałem pewne aspekty tworzenia aplikacji webowych szczególnie organizacji kodu odpowiada michał buszkiewicz ruby rails developer prograils com jeśli spojrzymy gigantów it znajdziemy serwisu napisanego wyłącznie użyciem jednego języka programowania przykłady choćby czas web developerzy uczyli nowych koncepcji paradygmatów okazuje wyjątkowo ponadczasowe znajomość niesamowicie ułatwia naukę nowych języków wybór między reactemjs vs angularem prosty dlatego podjęliśmy temat naszej devdebacie zaprosiliśmy zwykle doświadczonych developerów zapytaliśmy oceniają próg wejścia poleciliby osobie zna javascripta znają rozwiązania automatycznego testowania napisanego kodu zobaczcie czego dowiedzieliśmy odpowiedzi udzielają krystian pudlik frontend developer evojam fan dobrego ui ux entuzjasta typescripta funkcyjnego programowania niekonwencjonalnych rozwiązań ekosystemu frontendowego na dzień pracuje reactem angularem a godzinach eksperymentuje elmem wierzy zalety restrykcyjnego podejścia code review procesu wytwarzania oprogramowania tomasz kryń senior javascript developer studio programistycznym smultron tworzący gry aplikacje webowe angular vue react pixi node vanillajs z wykształcenia matematyk udowodnił kilka swoich twierdzeń hobbystycznie zajmuje sztuczną inteligencją a szczególności deep learningiem tomasz senior frontend developer olx group prelegent konferencjach javascriptowych reactowych współorganizuje react poznań meetup meet js poznań uwielbia dzielić wiedzą innymi daria woźnicka programistka ror js binarapps koordynatorka women in technology absolwentka politechniki informatyka studentka akademii menedżerów muzycznych zawodowo programistka tworząca aplikacje internetowe software house programuje głównie ruby rails javascript po godzinach organizuje koncerty muzyczne pytanie jak ocenisz próg wejścia reactajs a próg wejścia angulara odpowiada krystian pudlik frontend javascript developer sądzę react zdecydowanie niższy próg wejścia względu mniejszą ilość zależności typescript bazuje angular sprawiać problemy programistom pisali wcześniej backendu znają języków statycznie typowanych dodatkowo moich obserwacji wynika wielu ludzi używa rxjs niepoprawny prowadzić problemów wydajnościowych aplikacjach napisanych angularze myślę porównamy cały ekosystem reacta angularem a samą bibliotekę frameworkiem react nadal mniejszy próg wejścia odpowiada tomasz kryń senior javascript developer zgadzam angularze rozbudowaną sztywną architekturę nauczyć trzeba poświęcić czas opanujemy pisze prościej efektywniej pisze niemal samo sama architektura wymusza dobrej jakości kod w react duży luz możemy godzinach tutorialem dokumentacją zacząć pisać pisać kod dobrej jakości dobrym developerem to trochę jazdą nartach desce na nartach zacząć trudniej dojść poprawnej technicznie jazdy odpowiada daria woźnicka programistka ror js na wstępie zaznaczę reacta myśli cały ekosystem idący biblioteką react js parze zwykle react routerem reduxem fluxem immutable etc w porównać frameworkiem jakim angular io próg wejścia zależy zaplecze programistyczne a wszystkim wiedzę javascripcie es6 posiadasz czego dążysz danej technologii jeśli chodzi czyste frameworki próg wejścia oceniam zbliżony obie biblioteki korzystają składni es6 robią różne sposoby przykładowo react idzie parze babelem transpiluje składnię jsx javascriptu a przypadku angulara polecany typescript próg wejścia różny typescript podobieństwa javy ułatwia pisanie skomplikowanych systemów mimo nauce przynajmniej poznałeś kiedyś javę dodanie statycznego typowania javascriptu budzi różne kontrowersje opanowanie jsxa zajęło zdecydowanie więcej czasu na szczęście obu przypadkach składnia sugestią możemy pisać czystym javascripcie jesteśmy odważni idąc tą drogą spodziewajmy dobrych przykładów internecie pytanie jak oceniasz społeczność reactajs angulara czy uważasz któraś bardziej przyjazna pomocna odpowiada krystian pudlik frontend javascript developer oba rozwiązania dużą społeczność jednakże reactem zajmuje zdecydowanie więcej ludzi społeczność bardziej pomocna bardziej dojrzała sama biblioteka dłużej rynku pomoc w przypadku angulara byłem skazany twórców frameworka zakładanie tasków githubie społeczność potrafiła pomóc pewnego momentu dodatkowo wiele rozwiązań podawanych społeczność zawiera złe wzorce odpowiada tomasz senior frontend developer nie uważam któraś społeczności bardziej przyjazna pomocna da ukryć społeczność reactowa zwyczajnie większa wiele konferencji javascriptowych miałem okazję widz prelegent zasadzie przerodziło wydarzenia reactowe względu popularność biblioteki w poznaniu współorganizuję spotkania cyklu react poznań meetup regularnie przychodzi setka ludzi pytanie co poleciłbyś osobie zna javascripta reactajs angulara dlaczego odpowiada krystian pudlik frontend javascript developer jeśli patrzymy kątem szybkości wystartowania tworzenia projektu zdecydowanie react próg wejścia zdecydowanie niższy z kolei poboczny projekt osoba chciałby poszerzyć wiedzę zdecydowanie angular sądzę szczególnie warto poznać typescripta reaktywny paradygmat programowania bazuje angular często kończy poznaniu typescripta ludzie chcą wracać czystego javascriptu reactem odpowiada tomasz kryń senior javascript developer można mieć różne cele zależności celu poleciłbym odpowiedniej kolejności a angular r react v vue szybko znaleźć pracę rav więcej zarabiać rav najszybciej nauczyć vra nauczyć pisać najlepszej jakości kod avr najszybciej wytworzyć mały projekt vra najszybciej wytworzyć duży projekt avr mieć przyjemność pisania vra odpowiada tomasz senior frontend developer moje odpowiedzi dosyć mało obiektywne wielkim fanem reacta między innymi rozumieć naturalny etap drodze rozwoju programisty javascript przez react biblioteką obsługi ui czarnej magii javascript można argumentować jsx pewnego rodzaju abstrakcją spojrzeć html sterydach w swojej karierze miałem okazję spotkać programistów angularowców mieli braki podstaw javascriptu efektem warstwy abstrakcji którą angular ukrywa bebechy nie oczywiście złego nikt wynajdywać koła nowo warto wiedzieć dzieje maską narzędzi używamy odpowiada daria woźnicka programistka ror js wybrałabym angulara dzięki działającym integracjom typescriptem wprowadza typowanie danych javascriptu jest wyjątkowo wygodna użyciu biblioteka jeśli biegle poruszasz javascripcie nauka rx a polecanej biblioteki obsługi zdarzeń problemem mimo zalet react js szerzej znany popularny wsparcie społeczności polecałabym rozejrzeć grupie znajomych programistów wybrać bibliotekę którą znają dzięki czemu uzyskasz wsparcie lepiej szybciej uczy pracy danej technologii patrząc popyt rynku obu rozwiązaniach znajdziesz wystarczającą ilość projektów martwić pracę pytanie czy istnieją dobre narzędzia testowania automatycznego obydwu rozwiązań odpowiada krystian pudlik frontend javascript developer jak najbardziej właściwie rozwiązania testowania automatycznego niejako niezależne technologii a zwłaszcza narzędzia testów e2e wynika samej definicji możemy większości przypadków używać zarówno reacta angulara oczywiście preferencje twórców różne przypadku unit testów angular bazuje stacku karma jasmine natomiast react narzędziu jest udostępnia funkcjonalność snapshot testing z moich doświadczeń spokojnie użyć jesta testowania angulara opcją snapshotów jak jesteśmy angularze warto wspomnieć marble testingu używanego testowania streamów rxjs jest ciekawe podejście testowania asynchronicznych streamów polegające mniej więcej rysowaniu kodzie osi czasu marbles odpowiada tomasz senior frontend developer mówiąc testach automatycznych możemy mieć myśli rzeczy testy e2e end end unit testy jeżeli mowa e2e szczęście jakiegoś czasu istnieje cypress io dzięki narzędziu musimy myśleć jakim frameworku napisana aplikacja a testowanie czysta przyjemność względu brak selenium spodem mówiąc unit testach istnieją dedykowane narzędzia zarówno angulara reacta zalety wady czasami więcej drugich testy pytanie czy dostrzegasz różnice utrzymania dużej aplikacji między reactjs a angular jakie odpowiada krystian pudlik frontend javascript developer podstawową różnicą plusem korzyść angulara moim zdaniem typescript mogę zabrzmieć nieco subiektywnie wyobrażam utrzymywania dużej aplikacji typescripta dołączam aplikacji reactowych statycznie typowana aplikacja dokumentacją samą dzięki czemu nowy programista programista wracający latach projektu stanie poruszać sprawdzając kontrakty między typami w przypadku czystego javascriptu reacta jesteśmy zmuszeni napisać dokumentację używając chociażby jsdoc moim zdaniem połowiczne rozwiązanie typescript dodatkowo stanie wykryć wiele błędów zintegrować edytorem podpowiadać składnię mam wrażenie react napisać brzydki kod mieć jakieś znaczenie utrzymywania aplikacji jeśli dorzucimy typescripta flow reacta aplikacja napisana starannie różnice utrzymywaniu duże angular prostu bardziej restrykcyjny względu typescripta ciężej napisać brzydkiego swoboda jaką daje react wpłynąć negatywnie pozytywnie utrzymywanie dużej aplikacji zależności poziomu zaawansowania programisty odpowiada tomasz senior frontend developer trudność utrzymaniu aplikacji zależy frameworka biblioteki wykorzystanej implementacji można pisać czytelny udokumentowany prosty utrzymaniu kod wykorzystaniem jquery a spaghetti code rozumie autor dwóch godzinach wykorzystaniem angulara reacta w mojej prywatnej opinii kod aplikacji reactowych zrozumienia niekoniecznie oznaczać utrzymaniu warto pamiętać słówku engineering określeniu software engineer końcu zadanie utrzymywać kod programistów google facebooka odpowiada daria woźnicka programistka ror js dobrze napisana aplikacja powinna utrzymaniu niezależnie wybranej technologii zależy bardziej programisty frameworku zdecydowanie aplikacje używające reacta angulara utrzymaniu aplikacje jquery owe używające czystego javascriptu według stopień utrzymania obu przypadkach podobny wydaje szukamy nowego programisty utrzymania naszej aplikacji znaleźć aplikacja napisana react js zapraszamy was drodzy czytelnicy udziały devdebacie odpowiedzcie zadanych wyżej pytań komentarzach jesteśmy ciekawy waszych opinii drugą część devdebaty znajdziecie
wyobraź jesteś markecie budowlanym szukasz wałka malowania nie znasz sklepu kierujesz znakami w oddali widzisz duży baner dział budowlany w połowie drogi celu prawej stronie wyłania kolejna wskazówka szyld narzędzia zmieniasz trasę spacerujesz chwilę dostrzegasz alejkę opisaną narzędzia malarskie po chwili udało końcu znalazłeś taki docierania produktów sklepie online odpowiednikiem nawigacji można razu pójść punktu informacji zapytać znajdują wałki malowania to odpowiednik wyszukiwarki damian góra wordpress developer netizens niezależny twórca popularnych wtyczek wordpressa jest zafascynowany ogromną społecznością użytkowników deweloperów skupionych wokół cmsa ze szczególną uwagą przygląda rozwojowi woocommerce a zwolennik technik skutecznego stawiania celów strategii lean software development w branży it gdyby samego wejścia sklepu towarzyszył pracownik zaprowadzi każdego produktu zapytasz a drodze opowie szczegółach byłby odpowiednik wyszukiwarki produktów podpowiedziami ang autocomplete suggestions podpowiedzi usprawniają proces wyszukiwania produktu pojawiają użytkownik zaczyna wpisywać zapytanie pomagają doprecyzować czego szuka proc najbardziej dochodowych sklepów online zaimplementowane podpowiedzi swoich wyszukiwarkach produktów z pozoru prosta funkcjonalność złożona istnieje wiele czynników wpływają skuteczność takiego rozwiązania poznajcie kilka dobry praktyk pozwolą lepiej zrozumieć przydatność podpowiedzi wyszukiwarkach e commerce pierwsza część dotyczy strony wizualnej interakcji użytkownika wyszukiwarką podpowiedziami a drugiej części poruszane zagadnienia związane przetwarzaniem optymalizacją zapytań frontend w niektórych sklepach lepiej sprawdzi nacisk wyszukiwanie podpowiedziami a innych branży modowej lepiej zadziała nacisk optymalizację nawigacji opisany dalej zestaw dobrych praktyk wyjaśnia znaczenie miejsca osadzenia wyszukiwarki form prezentacji podpowiedzi miejsce wygląd umiejscowienie wyszukiwarki zupełnie zmienić podejście użytkowników wyszukiwania produktów sklepie jeżeli głównym sposobem wyszukiwania powinna nawigacja pole wyszukiwania stonowane wyróżnione pole wyszukiwania spowoduje spadek zainteresowania użytkowników nawigacją gdy użytkownicy wiedzą czego chcą katalog produktów duży należy promować korzystanie wyszukiwarki można zrobić manipulując pozycją kontrastem rozmiarem dobrym miejscem wyróżnienia wyszukiwarki obszar górnej części strony miejsce paska nawigacji zwiększenie kontrastu pola wyszukiwania obramówki rozmiaru pozwoli wyróżnić moduł tle innych wyeksponowanie pole wyszukiwania obszar górnej części strony przykładzie sklepu empik com zakres nazwy produktów zbieżne niezależnie kontekstu występują problem dotyczy głównie dużych sklepów w sklepie online empik wpisaniu frazy the beatles wyświetlają podpowiedzi produktów dodatkową informacją kategorii jakiej znajdują ta fraza pasuje niezależnych kategorii przykład wyświetlania dodatkowej informacji kategorii produktu przypadku dana fraza więcej znaczenie w wyszukiwarce empik com fraza the beatles pasuje produktów znajdujących różnych kategoriach częstym rozwiązaniem sklepów produkty podobnych nazwach znajdują wielu kategoriach wyświetlenie dodatkowego pola umożliwiającego zawężenie wyników kategorii głównej użytkownik wpisaniem frazy zawęża wyniki wyszukiwania wybranego działu specialiści ux instytutu baymarda przeprowadzili testy podważają skuteczność ręcznego zawężania wyników wybór kategorii użytkownicy reguły korzystają narzędzia dopiero pierwszym wyszukaniem pojawią zbyt ogólne podpowiedzi o wiele skuteczniejszym narzędziem wyświetlanie informacji zakresie podpowiedzi tym samym zmniejszy liczba czynności dokonać użytkownik znalazł czego szuka dobrze połączyć podejścia brak pasujących podpowiedzi dalej fraza pasuje produktów zupełnie normalne zjawisko w dalszej części artykułu wskazówki zrobić zwiększyć szanse lepsze dopasowanie produktów frazy to kilka dobrych praktyk sytuacji zapytanie zwraca podpowiedzi podstawową najprostszą zmianą zadziała niektórych przypadkach wyświetlenie numeru telefonu działu sprzedaży można wyświetlić kilka fraz zwracających wynik najbardziej pasowałyby zapytania dodatkowo sprawdzić szukana fraza pasuje kategorii wtedy zamiast podpowiedzi produktami wyświetlić pasujące kategorie dobrym pomysłem zaproponowanie produktów fraz aktualnie popularne sklepie dobranie podstawie spersonalizowanych informacji użytkowniku zamiast prostej podpowiedzi brak wyników wyszukiwarka sklepie made com wyświetla popularne produkty popularne frazy kilka linków informacyjnych zanim użytkownik zacznie pisać niektóre sklepy wykorzystują moment użytkownik kliknął pole wyszukiwania zaczął pisać sklep media expert takim przypadku wyświetla spersonalizowane informacje produktach kategoriach markach podstawie historycznych wyszukiwań użytkownika stronie informacje dodatkowe wyświetlane zanim użytkownik zacznie pisać frazę przykład pochodzi sklepu mediaexpert kiedy podpowiedzi nikt lubi zbyt dużego wyboru lepsze efekty osiągnie ustawiając limit podpowiedzi maksymalnie pozycji zbyt duża liczba powodować szum informacyjny użytkownicy zdezorientowani zacząć ignorować podpowiedzi spędzać zbyt czasu analizie podpowiedzi powinny mieścić aktywnym widoku strony częstym błędem wyświetlanie zbyt wielu podpowiedzi przypiętym górnej części ekranu pasku wyszukiwania ang fixed w takim przypadku podpowiedzi zostać przycięte dołu stałe przewijanie ekranu dół rozwiąże problemu problem narasta ostatnią pozycją link zobacz wszystkie warto unikać paska przewijania wewnątrz elementu podpowiedziami wprowadza dodatkową zbędną interakcje użytkownika narzędziem nie nazwa produktu najprostsza najczęściej spotykana forma podpowiedzi sprowadza wyświetlania samych tytułów produktu można spotkać bardziej rozbudowane formy zawierające dodatkowo zdjęcie produktu krótki opis cenę kod produktu kategorię markę cechy ułatwiające dokonanie trafniejszego wyboru nie wszystkie elementy konieczne to zależy specyfiki branży w niektórych użytkownicy szukają głównie kodzie produktu warto poinformować użytkownika pojawiające podpowiedzi związane wpisywaną frazą najczęściej robi poprzez zmianę grubości koloru fonta częściach nazwy produktów zawierają wpisywaną frazę jeżeli nazwą produktu wyświetlane elementy skrócony opis kod produktu warto wyróżnić wspólne frazą fragmenty tekstu w innym przypadku istnieje szansa wyniki pozornie trafne użytkownik straci zaufanie wyszukiwarki może przydarzyć fraza pasowała opisu produktu jeżeli wyświetli fragmentu opisu podświetlaną frazą użytkownik wiedział taka odpowiedź istotna pod maską dobrze zoptymalizowany interfejs wyszukiwarki oparty szybkich istotnych podpowiedziach poniżej kilka dobrych praktyk pomogą zwiększyć konwersję sprzedaży jednocześnie zmniejszając irytację użytkowników podpowiedzi szybsze preloadera czas oczekiwania podpowiedzi powinien mniejszy s w przedziale czasowym wyeliminowane zostaje wrażenie oczekiwania wyniki nie najlepszym akceptowalnym czasem oczekiwania wyniki przedział między a tutaj zauważalna zbędna reakcja interfejsu serwerem czas oczekiwania powyżej niedopuszczalny powodować zagubienie irytację użytkownika jednym najszybszych metod wyszukiwania informacji listy inwersyjne ang inverted index ta metoda pozwala otrzymywać krótkie czasy odpowiedzi zapytania dużych baz danych milionami produktów listy inwersyjne zaimplementowane m in silnikach elasticsearch apache solr w księgarni helion podpowiedzi zapytania php pojawiły milisekundach jest dobry wynik użytkownicy wpisują dokładnych fraz produkt opisać wiele sposobów wpisują użytkownicy wyszukiwarce rezonuje opisem produktu sklepie dysonans spowodowany literówkami fleksją szczególnie uciążliwa języku polskim synonimami inną kolejnością wpisywanych słów używaniem skrótów używaniem pauz kropek spacji innych znaków specjalnych należy przygotować użytkownicy szukać produktów używając słów nikt spodziewa przykład podpowiedzi wyszukiwarki google com frazy prostymi błędami powinny zwracać pustych wyników większość problemów rozwiązać dzięki czemu użytkownicy mogli znaleźć produkty szukają literówki tak długo jesteśmy ludźmi będziemy mylić literówki błędy ortograficzne opanować wdrażając funkcjonalność fuzzy search did you mean fuzzy search pozwala zwrócić relewantne produkty spełniają kryteriów dokładnego dopasowania zbliżone szukaj frazy wykorzystywany m in algorytm levenshteina zwraca liczbę działań dystans wykonać słowa a otrzymać słowo b optymalny dystans wynosi przekształcenia inaczej wyniki będa zbyt przypadkowe przykład działania fuzzy search podpowiedziach wyszukiwarce produktów allegro did you mean wykorzystuje mechanizm fuzzy search w przypadku braku dokładnego dopasowania szuka podobnej frazy zwraca produkty wyświetla podpowiedź typu czy chodziło dokładna fraza w kontekście podpowiedzi wyszukiwarkach produktów rozwiązanie najlepsze wymaga dodatkowego działania użytkownika lepiej razu wyświetlić właściwe produkty pomimo literówki połączyć rozwiązania wyświetlić zarówno poprawną frazę pasujące produkty normalizacja frazy wpisana użytkownika fraza wymaga formatowania w celu używa m in tokenizera rozbija frazę pojedyncze słowa wyrównuje wielkość liter wycina niepotrzebne znaki usuwa słowa stop listy ang stop words pomimo wpisania frazy hp f6v25ae system wyświetlił podpowiedziach odpowiedni tusz nazwie spację zamiast przykład pochodzi mediaexpert dzięki tokenizacji znika problem niewłaściwą kolejnością słów nie znaczenia użytkownik wpisze monitor graficzny graficzny monitor monitor graficzny podpowiedzi powinny same szczególnie przydaje branżach asortyment posiada złożone nazwy elektronika agd w sklepach wpisać więcej słowo zobaczyć bardziej trafne podpowiedzi stemming uwzględnienie fleksji stemming proces zamiany końcówek fleksyjnych pozostawiając temat wyrazu jeżeli zakres wyszukiwania obejmuje opisy produktów duże prawdopodobieństwo same słowa użyte różnych odmianach dąży indeksie wyszukiwawczym zapisać jedną formę wyrazu a podczas wyszukiwania mapować wszelkie odmiany słowa systemy systemowy systemem systemach reszta odmian poddane stemmingowi powinny dać termin system synonimy według instytutu baymarda największych sklepów internetowych proc uwzględniało poprawnie synonimy procesie wyszukiwania wdrożenie synonimów znacznym stopniu zwiększyć konwersję sprzedaży poza słownikowymi synonimami warto zadbać alternatywne terminy wynikające specyfiki branży dobrym przykładem polichlorek winylu oficjalna nazwa pvc pcw powszechnie stosuje niepoprawną nazwę pcv przykład wykorzystania synonimów podpowiedziach wyszukiwarce twojemeble monitoring kluczowym elementem pomoże podjąć słuszne decyzje optymalizacji wyszukiwarki analiza wpisywanych użytkowników fraz zwracanych podpowiedzi wpisywanych fraz pozwala poznać preferencje użytkowników dzięki dobrej analityce odpowiednio zareagować przypadku spory procent wpisywanych fraz wyświetla podpowiedzi podpowiedzi znaczenia proc wyszukiwań dotyczy produktów nie wszyscy użytkownicy wpisują wyszukiwarki nazwy produktów analizując frazy wpisywane użytkowników przygotować zestaw słów związane produktami a należałoby uwzględnić podpowiedziach wynikach wyszukiwania zazwyczaj terminy związane zwrotami reklamacjami anulowaniem zamówienia sztuczna inteligencja nlp w ostatnich latach sztuczna inteligencja ai wkracza większych obszarów człowieka dzięki zautomatyzować usprawnić wiele procesów w systemach wyszukiwania informacji sztuczna inteligencja odgrywa znaczącą rolę pomaga rozpoznawać kontekst wyszukiwania podstawie wpisanej frazy znając lepiej znaczenie frazy motyw historię użytkownika pomaga lepiej dobierać sortować wyniki wyszukiwania interakcja użytkownika wyszukiwarką staje swobodniejsza bardziej naturalna w większości sklepowych wyszukiwarek użytkownik wpisać słowa kluczowe zostały użyte opisania produktu zazwyczaj tytuł opis atrybuty kod produktu lepiej dopasowane wyniki osiągnąć stosując wcześniej opisane zabiegi typu fuzzy search normalizacje stemming synonimy wykorzystanie ai użytkowników zupełnie doświadczenie wyszukiwania przetwarzanie języka naturalnego ang natural language processing nlp sztuczną inteligencję wykorzystuje narzędzie twiggle twórcy twiggle deklarują produkty wyszukiwać używając naturalnej ludzi składni językowej system potrafi przekształcić wpisaną frazę szereg danych osadzonych kontekstach przykład tłumaczenia frazy format json uwzględnieniem kontekstu grafika pochodzi strony https twiggle com search enhancement bardzo trudno budować typu rozwiązania oparciu języki fleksyjne zalicza m in język polski czasy wpisać wyszukiwarki czekolada niskiej zawartości cukru dodatki błękitnej sukienki spodziewać najlepszym możliwych wyników chyba jednym ciekawszych zastosowań ai wyszukiwarkach produktów rozpoznawanie obrazów filmów taką technologię wykorzystuje clarifai clarifai potrafi rozpoznać zdjęć filmów szereg terminów opisują scenografię obiekty nastroje elementy baza terminów zamknięta obecnie zawiera tysięcy fraz frazy dostępne języku polskim w kontekście sugestii produktów wyświetlanych podczas wpisywania frazy ai przydać podpowiadania właściwych produktów mniej literalnych fraz analizując dane informacje użytkownikach wyszukiwania historyczne informacje zamówieniach sezonowość czas lokalizację trendy wyróżnić podpowiedziach produkty najprawdopodobniej zostaną zakupione użytkownika danego wyszukiwania dokąd zmierza e commerce podpowiedzi wyszukiwarkach produktów praktycznym dodatkiem wykorzystać wielu elementów poprawiających konwersję sprzedaży ogólny odbiór sklepu całości jeżeli przygotowane zgodnie dobrymi praktykami dać korzyści razu wdrożeniu prawie wszystkie największe sklepy online polsce posiadają podpowiedzi swoich wyszukiwarkach formy różne niektóre sklepy posiadają proste autouzupełnianie nazw produktów a skomplikowane systemy podpowiedzi zdjęciami opisami cenami innymi informacjami ułatwiającymi użytkownikom dokończenie procesu wyszukiwania interesujące przyglądanie jaką stronę zmierzają systemy wyszukiwania e commerce szczególnie kontekście rozwoju sztucznej inteligencji przetwarzania języka naturalnego
ostatnio wiele osób pyta sens tworzenie aplikacji bazujących elektronie pwa pomimo większego zainteresowania pwa elektron traci popularności porównać siebie porównać karabin czołgiem podczas pwa dają wrażenie korzystania natywnej aplikacji ciągle działają ramach przeglądarki a aplikacje oparte elektronie pełnoprawnymi aplikacjami natywnymi dostęp wszystkich api systemowych pomimo dzięki połączeniu silnika renderującego libchromiumcontent projektu chromium node js elektron pozwala tworzyć stosunkowo prosty zaawansowane natywne aplikacje cross platformowe dawid wojda ceo founder code8 fullstack specjalizuje javascripcie stronie frontu serwera w pogoni rozwiązaniem problemu potrafi zagalopować zagadnień niskopoziomowych fanem wizualizacji a specjalizuje grafach sztuce generatywnej ciągle szuka eksperymentuje mniej zawodowo aquascaper zwolennik aktywnego wypoczynku gór zaprasza profilu twitterze oczywiście mówi stare porzekadło with great power comes great responsibility jako frontend deweloperzy pewnego rodzaju sandboxie kontrolowanym hosta najczęściej przeglądarkę kształtuje ramy działania naszych programów udostępniane api odpowiedzialność bezpieczeństwo spada twórców przeglądarek możemy skupić pisaniu lepszych aplikacji w elektronie sami twórcy aplikacji zderzamy wieloma problemami bezpieczeństwa szczególności zewnętrzny kontent musimy ostrożnie rozważyć udostępnić o problemów klasy możesz przeczytać poniższym artykule podstawie studium przypadku dlaczego case study aplikacja którą pisałem specyficzna sama robiła zbyt wiele mogła strony zaufanej domeny wykonać pewne akcje miała kilka modułów ustawień moimi ograniczeniami pierwsze pomysły rozwiązanie powyższych problemów dalej zmiany dotyczyły głównie punktu drugiego brak wpływu zaufaną domenę integracja dodatkowym api mogłaby problematyczna samo wyświetlanie modułów aplikacji oknach modalnych wymagałoby dołożenia webview warstwy wyświetlającej zaufaną domenę warstwie wyżej zaimplementowany byłby interfejs aplikacji aby uprościć trochę powyższy flow wymyśliłem customowy protokół byłby obsługiwany moją aplikację własne moduły sprowadziłoby integrację zaufaną domeną linku odpowiednim adresem dzięki musiałbym robić warstw aplikacji obsługiwać oddzielnie interfejs głównym oknie jak działa protokół elektronie jak wiemy protokół zbiór pewnych reguł kroków nawiązać połączenie pomiędzy programami niższym poziomie urządzeniami jednym najczęściej używanych najbardziej rzucających oczy protokołów http widoczny zazwyczaj adresach url sam adres url częścią standardu uri generyczny schemat zapisać scheme authority path query fragment gdy tworzymy okno aplikacji możemy załadować url w miejscu spróbujemy zarejestrować własny protokół nazwie electron settings pojawi miejsce http co oznacza za każdym razem ktoś spróbuje załadować adres url electron settings test com przejmiemy zwrócimy dane uznamy stosowne wykorzystując nadal spodem http przesyłu danych elektron umożliwia rejestrację protokołów kilka różnych sposobów służą metody modułu protocol możemy zaimportować paczki głównej electron ich schemat wygląda register any protocol wybrałem registerstreamprotocol najbardziej uniwersalną opcją zwrócić typ pliku zależności potrzeb ważne zwracany obiekt implementował interfejs readablestream pozostaje kwestia do pory rozmawialiśmy stworzeniu protokołu wewnątrz aplikacji co ktoś otworzy zaufaną domenę zwykłej przeglądarce znajdować link naszym protokołem tutaj musielibyśmy zarejestrować aplikację systemie domyślny program obsługujący dany protokół jest tyle problematyczne każdym systemie operacyjnym robi inaczej nie będę opisywać dokładnie szeroki temat paczka electron build pewien automatyzuje proces niestety moim przypadku działała wybiórczo na dodatek dokumentacja części znikoma musiałem napisać własne skrypty rejestrujące niemniej zachęcam prób komuś uda case study protokół omówimy kod pełni udostępniłem repozytorium githubie demo zaufanej domeny używa strony https dawiidio com demo electron jedną ciekawostek początku część aby protokół działał poprawnie tzn przeglądarka wiedziała rozwiązać relatywne adresy url zarejestrować serviceworker y itp musimy zarejestrować standardowy protokołami standardowymi domyślnie http https bez rejestracji protokół zachowywałby file przeglądarka miałaby możliwości wykonania powyższych akcji gdy zrobimy możemy problemu zawartości plików zamieszczać relatywne załóżmy stronę electron settings test znajduje tag zostanie rozwiązany electron settings meme jpg poprawnie zwrócony handler wygląda ok dzieje jak wspominałem wcześniej poprzez metodę protocol registerstreamprotocol rejestrujemy handler przechwytywać request poprzedzony electron settings na początku rozbijamy adres url części pierwsze na podstawie tworzymy flagę pliku a koniec wywołujemy callback nagłówkami statusem danymi postaci readablestream zostaną wysłane użytkownika na potrzeby dema przyjąłem obsługę dwóch typów plików html jpg nie obsłużyłem sytuacji plik zostanie znaleziony widzisz statuscode równy założyłem moduły rozszerzenia tzn url electron settings test równoznaczny electron settings test html wszystkie pliki zostać załadowane protokół muszą znajdować folderze public to tyle chodzi protokół proste prawda case study api zaufanej domeny omówiliśmy protokół pozostała kwestia udostępnienia api zaufanej domeny jest temat tyle drażliwy uderza bezpieczeństwo aplikacji opartych elektronie ale kolei zapewne zauważyłeś część to odpowiada api udostępnione strony zostanie załadowana dwa słowa wyjaśnienia skrypt preload zostanie załadowany skryptami każdej strony daje duże możliwości interakcji dobrym miejscem udostępnić publiczne api poprzez dzięki zabiegowi strona początku widzieć api oczywiście moim przypadku aplikacja komunikowała stroną zamkniętej sieci ryzyko mniejsze należy bagatelizować komunikację pewno dałoby uprościć włączając opcję nodeintegration webpreferences strona aplikacji miałaby dostęp api node a idzie modułów fs domyślasz api zostało udostępnione złośliwej stronie załadowanej przypadek mogłaby zyskać dostęp filesystemu użytkownika narobić szkód dlatego aplikacji zawartość masz stuprocentowej pewności wyłączaj nodeintegration jeszcze odnośnie skryptu preload należy obchodzić ostrożnie włączoną integrację api node niemniej tyle bezpieczniejsze rozwiązanie jesteś stanie udostępnić specyficzne api wyrządzi szkód przypadku załadowania złośliwej zawartości udostępniasz samego api node a kontekst skryptu a prościej oznacza api node a widoczne wyłącznie kodu znajdującego pliku preload koniec nikt poziomu window mógł dostać innego api ty udostępnisz moje api wygląda prosto użyłem magistrali ipc pozwala wysyłanie krótkich wiadomości pomiędzy procesami elektrona dalej wiadomości odbierane procesie głównym aplikacji callbacki reagujące wiadomości procesu renderera ustawiają pobierają jedną zmienną oczywiście robić więcej a właściwie wyobrazisz zawsze miej uwadze bezpieczeństwo przyszłych użytkowników twojej aplikacji podsumowanie na przykładzie case study dowiedziałeś stworzyć własny protokół aplikacji bazujący http musisz zrobić aplikacja obsługiwała protokół poziomu systemu wiesz udostępnić api integrować aplikację załadowanymi stronami zabezpieczyć niepożądanym rozszerzeniem dostępu dobrej zabawy wbrew stereotypom dotyczącym introwertycznego charakteru programistów wyróżniającą cechą naszej grupy zawodowej niebotyczna liczba konferencji hackatonów meetupów innych mniej bardziej towarzyskich spotkań poświęconych kodowaniu małych wydarzeń pracy najczęściej skupiających jednej technologii zagadnieniu kilkudniowe konferencje naładowane różnorodnymi tematami po spotykać wymieniać doświadczeniami co właściwie dają wydarzenia skąd przychodzimy kim jesteśmy zmierzamy postanowiliśmy poszukać odpowiedzi pytania podczas dwudniowej konferencji you gotta love frontend którą pojechaliśmy maju wilna marcin gościcki front end developer syzygy warsaw dba jakość elementów prezentowanych platformach aplikacjach naszych głównych klientów programowaniem interesuje najmłodszych wybór zawodowej wyłącznie formalnością ukończył warszawską wyższą szkołę informatyki tytułem inżyniera absolwentem uniwersytetu swps ux design pierwsze doświadczenia zawodowe zdobywał web application developer trakcie praktyk studenckich stuttgarcie ada banaszak junior front end developer syzygy warsaw zaangażowana projekty realizowane polskiego związku piłki nożnej studiowała kulturoznawstwo uniwersytecie warszawskim a praca magisterska dotyczyła m in kultury hakerskiej ruchu wolnego oprogramowania cypherpunka zanim postanowiła zawodowo zająć kodowaniem odpowiedzialna promocję fundacji bęc zmiana web development widzi rozwijanie nowego sposobu komunikacji zainteresowań znajduje html css javascript projektowanie dokąd zmierzamy najbardziej interesującym obiecującym a efekcie najbardziej rozczarowującym elementem programów konferencji zwykle wystąpienia poświęcone przyszłości raczkujących technologii nowym niespodziewanym zastosowaniom istniejących narzędzi tak przypadku yglf najbardziej oczekiwane wykłady dotyczyły praktycznego wykorzystania machine learning pisanego javascripcie frontendzie testowania css a don t believe the rumours testing cs is possible pierwszy wystąpienie charlie gerard postawił poprzeczkę wysoko przewinęło use case generowanie alternatywnych tekstów obrazków uczenie asystentów języka migowego ciekawych dem m in aplikacja ułatwiająca recykling program umożliwiający sterowanie graczami mortal kombat pomocą ruchów ciała charlie opowiadała javascriptowych bibliotekach tensorflow js ml5 poznawała algorytmy machine learning pythonie przekonywała znajomość języka niezbędna pisania rodzaju programów frontendowcy swobodnie pisać aplikacje wykorzystujące ml javascripcie w trochę mniej hurra optymistycznym tonie przypomniała problemach związanych rozwijaniem technologii m in konieczności pozyskania dużych ilości danych treningowych słabym doświadczeniu mobilnym względu wagę programów niemożności wzięcia pełnej odpowiedzialności wynik pracy jesteśmy stanie kontrolować działają modele treningowe black box oczywiście błędach ludzkich wynikających uprzedzeń braku refleksji natury etycznej niestety wykład gila tayara testowaniu cssa połowie ciekawy okazał opisem technologii wizualnej regresji korzystamy cypressa pluginem imagesnapshot enigmatycznych płatnych programów testowania ghost inspector pozwalający zarządzanie screenshotami tworzenie rozbudowanych scenariuszy kim jesteśmy dużą wartością konferencji wykłady dyskusje dotyczące spraw niezwiązanych codziennymi wyzwaniami pracy web deva dotykające tematów najważniejszych kogo robimy umiejętność mówienia wyzwaniach natury etycznej tożsamościowej popadania banał niezbyt interesujące dygresje bezcenna na yglf mieliśmy okazję wysłuchać dwóch przemówień poświęconych tematyce keynote chen hui jing otwierający całą konferencję poświęcony typografii globalnej sieci całe wystąpienie możecie obejrzeć youtube oprócz gigantycznej ilości stricte technicznej wiedzy dotyczącej typografii hui jing zaprezentowała powalające statystyki według językiem zawartości sieci angielski podczas populacji językiem ojczystym jak podkreślała odpowiednich technologii wsparcia naszego deweloperów języki alfabetach niełacińskich bardziej wypierane sieci dlatego zachowania słabej różnorodności tworząc strony aplikacje różnych językach powinniśmy bardziej starać dobre praktyki typograficzne aby zadbać naszych użytkowników niezależnie języka jakim posługują zapominajmy atrybucie lang zadziała m in automatyczne tekstu a zaprzyjaźnijmy takimi css owymi właściwościami font language override text combine upright choć zdecydowana większość prelegentów swoich prezentacjach mówiła dostępności miała tytule selfish accessibility adriana roselli wykład poświęcony różnym rodzajom fizycznych kognitywnych a permanentnych tymczasowych niepełnosprawności aby przekonać klientów odrzucania rozwiązań stojących konflikcie zasadami a11y naszych odbiorców osób niepełnosprawnych słyszał roselli proponuje koncepcję którą nazywa selfish persona czy aplikacji korzystać biznesmeni podróżują muszą korzystać słabego połączenia internetowego pociągach lotniskach ludzie wpływem alkoholu robiący nieprzemyślane zakupy online osoby opiekujące małymi dziećmi przypadek jednej naszych aplikacji użytkownikami większości upieczeni rodzice korzystający urządzeń mobilnych jednocześnie drugą ręką trzymający niemowlę sprzątający prowadzący wózek seniorzy większość spędzili komputera jeżeli pytań klient odpowiedział znaczy potencjalnych odbiorców znajdują osoby pełni sprawnie poruszające sieci choć kyle owi simpsonowi zdecydowanie należy tytuł króla dygresji wykład fouc and the death of progressive enhancement przekonywał web developerzy popsuliśmy internet autor serii książek you don t know javascript poruszył kilka tematów sami dyskutujemy mierzymy naszej pracy mówił m in pogłębiającej przepaści pomiędzy javascript developerami ui developerami ciekawie pisał chris coyer css tricks ponadto stwierdził absolutnie każda strona aplikacja webowa powinna posiadać service worker robiona myśl offline first takie myślenie tworzeniu sieci powinno zdaniem simpsona wyprzeć progressive enhancement skąd przychodzimy wiadomo rozmowy przyszłości górnolotnych celach najbardziej pobudzają wyobraźnię zastosowanie codziennej pracy częściej znajdują rozwiązania wykładów poświęconych dobrym praktykom nauce cudzych błędach a k a case studies ciekawy wykład wyzwaniach związanych server side rendering wygłosił dan shappir performance tech lead wix firmie wdrożenie ssr zajęło trzy lata wśród problemów którymi borykamy wymienił błędy wynikające odwołań obiektu window najefektywniejszym rozwiązaniem okazała odpowiednia konfiguracja lintera znaczącą różnicę pomiędzy time to visible time to interactive większa użytkownicy rozpoczynają shappir określił rage clicking chyba znacie uczucie tutaj rozwiązaniem priorytetowe treści pierwszego ekranu praktyka którą wdrażamy naszych aplikacjach uniknąć klików nienawiści nie zabrakło wykładów dotyczących performance kontekście accessibility doug sillars zaproponował małą powtórkę różnych technik optymalizowania assetów a max firtmanpod hasłem hacking performance opowiadał efektywnych niezbyt efektownych technikach dostarczania plików przeglądarki oba wykłady ciekawym uzupełnieniem prezentacji naszego kolegi andrzeja kłapecia ramach wewnętrznego it speak up opowiadał wyzwaniach związanych optymalizacją reactowej aplikacji stworzonej jednego klientów wśród wymienionych andrzeja prelegentów yglf rozwiązań znalazły m in użycie font display swap bardziej efektywnego fontów zastosowanie link rel preload krytycznych above the fold assetów lazy loading obrazków dynamiczne komponentów zależności viewportu wykład vitaly ego friedmana redaktora dyrektora kreatywnego smashing magazine szybkim przeglądem słychać dizajnie receptą tracąc oczu wygody użytkowników tworzyć ciekawe wyróżniające strony prezentujące treść charakter biznesu reklamują a okazji fajną robotą projektanta dewelopera friedman mówił wymierne korzyści przynosi odważne szczere podejście projektowania m in przykładzie strony najgorszego hostelu amsterdamie co oprócz pracy projektów ważna zajawka wspaniale posłuchać armagana amcalara opowiadającego web midi api prezentującego instrumenty muzyczne działające przeglądarce miksującego piosenkę call me maybe chyba musimy wspominać prześladowała kolejne dni nielsa leenheera wykorzystując web bluetooth api mikrokontroler dokonywał kaskaderskich wyczynów zbudowanym lego samochodem zapisane rzecz wykonania współpracy własnym zaprzyjaźnionym dzieckiem na pewno przyda doświadczenie jednego naszych wewnętrznych hackathonów ramach stworzyliśmy aplikację wykorzystującę mikrokontroler wifi podstawie natężenia oświetlenia wykorzystując fotorezystor przesyłał status zajętości biurowej toalety podsumowanie nawet pozornie niezbyt ciekawe prezentacje wartość dzięki możemy zrozumieć jakim punkcie jesteśmy udało osiągnąć dzięki konferencjom podobnym inicjatywom możemy umieścić swoją pracę przemyślenie temat szerszym kontekście a otworzyć głowę spojrzeć swoją pracę nowej perspektywy warto rozmawiać innymi deweloperami projektantami użytkownikami tworzonych produktów najłatwiejszych najprzyjemniejszych sposobów zawodowy rozwój dwa wątki przewijały niemal wszystkie wykłady konferencji you gotta love fronted accessibility performance service workers powinniśmy zastanowić tworzeniem produktów korzystać s wyrażenia podstawa języków rodziny lisp w wpisie przedstawię napisać prosty parser s wyrażeń krok kroku właściwie pokażę podstawę parsera lispa można użyć celu generatora prościej napisać parser samemu użyjemy celu języka javascript jakub t jankiewicz programista front end wieloletnim doświadczeniem skupiający języku javascript ostatnio pracuje języku r autor bloga głównie javascript autor projektów open source m in jquery terminal sysend js lips pomaga projekcie openclipart dostarcza darmowych domenie publicznej grafik wektorowych formacie svg w wolnym czasie zajmuje hobbistycznie fotografią co s wyrażenia jeśli miałeś styczności językiem lisp s wyrażenia wyglądają jest format danych składa atomów list otoczonych nawiasami atomy oddzielone spacjami dodatkowo s wyrażenia mieć dodatkowe typy danych dokładnie json liczby symbole dowolnie interpretować wartość true t odpowiadać true javascript ciągi znaków kod lispa składa s wyrażeń czego służyć nadają doskonale format wymiany danych s wyrażenia używane zapis wasm przeczytać prawdopodobnie względu prostotę parsowania wymyślać swojego własnego formatu można użyć komunikacji między serwerem a przeglądarką można używać zamiast json a dodatkowo wyrażenie mieć specjalny znak kropkę tworzy parę to para dwóch elementów pewien część s wyrażeń języka lisp jest alternatywny zapis struktury listy bardziej mówi dokładnie wyglądają dane listę można przedstawić dzięki takiemu zapisowi tworzyć dowolne drzewa binarne w każdym będziemy obsługiwać typu s wyrażeń komplikować parsera tokenizer najpierw musimy podzielić ciąg znaków tokeny nawiasy ciągi znaków atomy tak działają niektóre generatory parserów sławna para lex yacc flex bison druga para wolne oprogramowanie część projektu gnu najprościej wykonać pomocą wyrażeń regularnych najprostszy przykład prawie działa pierwszy problem puste ciągi znaków między dwoma dopasowaniami początku końcu znaków zamiast można rozwiązać pomocą funkcji filter wynikowej liście tablicy nie będziemy potrzebowali spacji usunąć drugi bardziej poważny problem baz ostatni token przykład problemem wyrażenie s dopasowuje zachłannie aby naprawić należy użyć takiego wyrażenia nawiasem białym znakiem samo s nawiasów zapiszmy tokenizer funkcje nie musimy używać length pusty ciąg znaków konwertowany wartości boolean wartość false ale ciągami znaków jeśli spróbujemy przetworzyć ciąg funkcja dialekcie scheme języka lisp użyto szablonów ciągów znaków ang template literals zapisać znaki nowej linii wewnątrz kodu to wewnątrz ciągu znaków rozsypie funkcja square wywołanie square zwraca wyrażenie regularna ciągów znaków należy dodać ciągi znaków wyjątek najlepiej pierwszy element naszego wyrażenia regularnego wyrażenie dopasowuje ciągów znaków wyglądać a oto wyglądało wynikowe wyrażenie można dodać komentarze lispowe względu parser języka lisp s wyrażeń będziemy dodawali komentarzy tak samo formacje json dodanie powinno problemem teraz tokenizer zwraca poprawny wynik i cały tokenizer parser jako budujemy drzewo tworząc parser możemy posłużyć stosem lifo ang last in first out aby pełni zrozumieć działanie parsera wcześniej znać podstawowe struktury danych tj listy kierunkowe drzewa binarne stos oto pierwsza wersja parsera funkcja tworzy tablicę naszą strukturą formie tablic jeśli będziemy parsowali więcej s wyrażenie będziemy mieli więcej elementów tablicy mimo obsługujemy kropki s wyrażeń formie nie musimy tworzyć specjalnej struktury naszej sparsowanej listy mieć poprawny parser taki parser podstawą jakiegoś interpretera lispa dobrze razu mieć strukturę będziemy przechowywać s wyrażenia konstruktor pair z możemy zbudować drzewo s wyrażeń drzewo binarne umożliwi tworzenie dowolnych drzew musimy mieć reprezentować pustą listę zazwyczaj języku lisp nil możemy napisać funkcje konwertuje tablicę strukturę aby dodać naszej funkcji parsera wystarczy wstawić końcu oczywiście razem return niestety chciałbyś dodać później operator kropki tworzenia pary musiałbyś tworzyć strukturę ręcznie wewnątrz parsera nie konwertujemy samej tablicy result kontener s wyrażenia każdy element tablicy powinien listą możemy użyć funkcji array map sprawdźmy działa wynikiem taka struktura wynik json stringify wstawionymi wartościami nil warto napisać funkcje tostring obiektów typu pair sprawdźmy działa został problem wynikowa struktura liczb ciągiem znaków parsowanie atomów najpierw parowanie liczb celu użyjemy wyrażeń znalezione gdzieś sieci dalej parsowanie ciągów znaków nasze ciągi prawie same json a wyjątkiem mieć linie zazwyczaj językach lisp aby użyć funkcjijson parse zamienić nową linie slash n n n dzięki dostajemy darmo obsługę wszystkich znaków ucieczki t znaków unicode zawsze warto korzystać udogodnień języka pisany parser kolejnym elementem s wyrażeń symbole dowolny ciąg będący ciągiem znaków tj cudzysłowów możemy utworzyć konstruktor lsymbol odróżnić funkcji symbol języka javascript całość funkcji parsującej atomy wyglądać nasz parser dodaną funkcją parseatom można poprawić funkcje tostring obiektów pair używała json stringify ciągów znaków odróżnić symboli i oto cały parser pozostały wartości true false ewentualnie null zostawiam czytelnika artykuł został pierwotnie opublikowany jcubic autor grafiki jakub t jankiewicz licencja cc by sa grafika bazuje schematach blokowych książki struktura interpretacja programów komputerowych sicp github ie wracamy kolejnym tematem trudno rozstrzygnąć postaci artykułu eksperckiego dlatego opracowaliśmy wam znany format devdebaty poznać opinie różnych frontend developerów same kwestie zobaczcie zaproszeni seniorzy myślą wydajności frontendzie odpowiedzi pytania udzielili andrii los senior frontend engineer revolut ma sześć doświadczenia software engineeringu projektach branży bigdata typowych projektów webowych użyciem frameworka spring wcześniej java backend engineer najczęściej pracował typescript react graphql css in js artem shtepenko senior frontend engineer revolut zaczął programować wieku przygodę rozpoczął tworzenia prostych stron internetowych następnym krokiem karierze podjęcie studiów informatycznych uniwersytecie marii curie skłodowskiej lublinie znalazł pracę full stach developer asseco business solution pracuje revolut adam bar full stack developer bright inventions gdańskim software housie specjalizującym rozwiązaniach mobilnych iot blockchainie doświadczony stosach technologicznych ostatnio wierny typescriptowi pasjonat mobile weba twórca what web can do today strony możliwościach weba urządzeniach mobilnych temat wydajności back endzie znany wiele osób istotna kwestia z kolei temat front endzie zaniedbywany w możemy zadbać performance front endu odpowiada andrii los senior frontend engineer revolut wydajność stronie frontendu niezwykle ważnym zagadnieniem zadbać stosując proste zasady jednocześnie zaniedbuje pojęcie wydajności programista robi zna wspomnianych zasad zaimplementuje zbyt wiele zewnętrznych paczek kodu wiedząc rzeczywiście powoduje program działa wolniej odpowiada artem shtepenko senior frontend engineer revolut dodatkowo szczególnie ważne monitorowanie aplikacji kątem problemów wydajnością jeżeli dostrzegasz logach ważne ustalenie przyczyny problemów znalezienie problemu usunięcie samo dotyczy strony backendowej odpowiada adam bar tech lead software developer bright inventions faktycznie front end ostatnimi laty wyewoluował prostych stronek pełnoprawne aplikacje poszła wiedza temat mechanizmów dotyczących wydajności o wydajność back endzie znacznej mierze opiera wybór odpowiednich algorytmów struktur danych froncie cały szereg dodatkowych kwestii przede wszystkim powinniśmy zaznajomić komunikacją którą front end prowadzi sieć powinniśmy zadbać odpowiednie cache owanie statycznych zasobów zadbać szybkie serwowanie dzięki użyciu cdn włączyć serwerze http lepiej zrównoleglać dzięki service workerowi możemy wszystkie pliki zapisać dysku klienta pierwszym otwarciu strony dzięki całkowicie wyeliminować koszt odwołań sieci można ponadto rozważyć techniki typu prefetch wyprzedzeniem załadować klientowi pliki zapewne chwilę zapyta druga kwestia kolejność jakiej aplikacja zasobów trzeba mieć plik css sekcji head blokuje renderowanie strony czas dlatego serwowanie css ogromnych bibliotek komponentów używamy jednej dwóch kontrolek wydajnościowym strzałem stopę także pliki javascript oznaczymy atrybutem async kosztowne blokują parsowanie html a kodu bezpośrednio danym momencie potrzebujemy kodu innych widoków naszej aplikacji sensu współczesne bundlery webpack oferuje wbudowane rozwiązania code splittingu powinien stać standardem faktycznie chcemy stanie szybko serwować treść użytkownikom trzeci aspekt interakcje użytkownika stroną efekty przejść animacje koszt animacji różnych właściwości elementów diametralnie względu pracę jaką wykonać przeglądarka przykładowo zmiana przezroczystości tania a zmiana szerokości elementu wymaga ponownego przeliczenia układu layoutu może odczuwalne szczególności urządzeniach mobilnych a stanowią chwili większość ruchu internecie tych zasad sporo warto znać poziomie projektowania ui ux aplikacji w poprawy wydajności skorzystać użytkownicy czy wydajność mieć przełożenie biznesowe metryki naszego projektu odpowiada andrii los senior frontend engineer revolut z pewnością zależy konkretnego przypadku podobnie kwestii wydajności zaczynasz optymalizacji czegoś wcześniej zostało zmierzone w niektórych popularnych platformach amazon ebay innych niezwykle ważne oszczędzać jedną milisekundę poprawa obciążenia aplikacji pół sekundy realny wpływ badania utrzymania liczby użytkowników ogólnie przychody aplikacji chociaż musimy pamiętać poprawki pół sekundy naniesione potężnym mac pro podłączonym porządnego wi fi rzeczywistości letnim smartfonie przyniosą sekund poprawy odpowiada artem shtepenko senior frontend engineer revolut wiele osób odwiedza strony internetowe urządzeniach mobilnych wydajne komputer stacjonarny czas responsywności ważny użytkownik czeka sekund otwarcie aplikacji prawdopodobnie zamknie przejdzie innej szybciej ale posiadając wydajne urządzenie mobilne należy pamiętać szybko stabilnie działa sieć możesz napisać kod największej wydajności historii zadziała ktoś wrzuci stronę zdjęcia wielkości zniszczy całą optymalizację na kwestie performance należy patrzeć perspektyw odpowiada adam bar tech lead software developer bright inventions są badania wprost wiążą wydajność aplikacji współczynnikami konwersji mówi sekunda strony dłużej mniej konwersji dla aplikacji typu e commerce przeliczyć stracone kwoty zasada działa wszystkich rodzajów aplikacji przede wszystkim myśleć użytkownikach mobilnych kątem testować wydajność aplikacji na wolnej sieci ciężka strona prostu załadować póki starczy cierpliwości prostu przerwą użytkownik stanie wejść stronę pewnością zadowolonym lojalnym nabywcą co gorsza użytkowników zobaczymy statystykach każda optymalizacja inwestycja zapewne istnieją granice usprawnianie wydajności sens jakie kryteria decydują warto pochylić wydajnością front endu na jakim etapie projektu powinno zwracać uwagę odpowiada andrii los senior frontend engineer revolut jeśli jesteś startupem myślę najważniejszą rzeczą dostarczenie mvp minimum viable product szybko możliwe najlepszym możliwym danym przypadku kodem im mniej napisanego zespół kodu mniej potencjalnych błędów możesz szybciej iterować jednocześnie szybka iteracja poleganie zbyt wielu podmiotach trzecich skończyć bałaganem małą wydajnością produktu zaprzepaścić szansę rynku zależy innych czynników m in szybko działa konkurencja niemniej przestrzeganie podejścia szybkiego stworzenia mvp lepsze polerowanie kodu zera rezultacie działającego produktu wiele miesięcy odpowiada artem shtepenko senior frontend engineer revolut pierwszą rzeczą powinieneś pamiętać przedwczesna optymalizacja wszelkiego zła a przynajmniej większości programowaniu donald knuth jeśli masz prostą stronę wyświetlane dane statyczne musisz optymalizować większości przypadków masz listę zapewnia rekordów wydajność znaczenie czasami potrzebujemy jakiejś funkcji jak najszybciej mvp ważnym elementem projektu szczególnie pracujesz start upu myślę pierwszą zasadą zrezygnowanie implementacji własnego komponentu biblioteki masz możliwość korzystania gotowych rozwiązań nawet pracuję mvp wolę zacząć rozwiązania klucz zobaczyć błędy popełniły osoby na przykład bierzemy bibliotekę a używamy projekcie dajesz użytkownikom zbierasz opinie a następnie możesz przeanalizować zdecydować chcesz zoptymalizować część aplikacji odpowiada adam bar tech lead software developer bright inventions są optymalizacje kosztowne wymagają zmiany architektury projektu code splitting dopóki danych główny problem pewnie biznesowego uzasadnienia wprowadzaniu rewolucji ale startujemy nowy projekt kolei uzasadnienia zadbać architekturę sprzyjającą wydajności z kolei istniejących aplikacji szereg optymalizacji powinno dać wprowadzić stosunkowo prosto asynchroniczne załączanie skryptów preload fontów zasadzie jednolinijkowce nie widzę powodu sięgnąć nisko wiszące owoce performance nieraz stać sprzeczności oczekiwaniami biznesu wymogami marketingu czy dbałość wydajność aplikacji wymaga szczególnych zasad współpracy biznesu zespołem developerskim odpowiada andrii los senior frontend engineer revolut nie sądzę obowiązują specjalne zasady powinien ciągły dialog między biznesem marketerami a deweloperami obie strony powinny słuchać nawzajem osiągnąć sensowny kompromis jeśli takiego dialogu skończyć bałaganem kodzie problemami wydajnością błędami prostu opóźnionymi terminami odpowiada artem shtepenko senior frontend engineer revolut jeśli oddasz ręce użytkownika aplikację problem wydajnością szybkością procesów możesz stworzyć więcej problemów biznesu rozwiązać jeśli powolne użytkownik przełączyć aplikację konkurencji dlatego ważne wypracowanie odpowiedniego balansu pomiędzy szybkością a wydajnością produktu odpowiada adam bar tech lead software developer bright inventions myślę niezbędna swój koszt implikacje idealnie mielibyśmy statystyki pozwolą przeliczyć koszt dodania kolejnego javascriptu użytkownika kwotę którą spadnie sprzedaż w praktyce mało dane zmienia faktu potrzebny kompromis być developerzy powinni akceptować elementy warunkiem dodane asynchroniczny a biznes zaakceptuje potencjalnie użytkowników skrypt uchwyci opuszczą stronę załadowaniem równie ważna ważniejsza współpraca developerów designerami designer powinien mieć projektować ui ux unikać kosztownych animacji efektów wizualnych spiętych scrollowaniem zabijają wydajność telefonach zazwyczaj jedyną szansą taką feedback developerów na metryki aplikacji którą pracujesz zwracasz uwagę a odpowiada andrii los senior frontend engineer revolut ponieważ pracuję wewnętrznymi narzędziami wiemy używane całkiem potężne urządzenia najnowszy chrome przyzwoitą prędkością internetu itp zwracamy uwagę podstawowe metryki mówiąc naszej stronie internetowej ogólnie dowolnej aplikacji internetowej którą zamierzasz przekazać użytkownikowi ważne metryki dobrym stanie rozmiar pakietu js mniejszy kb paint poniżej sekund większości urządzeń gzip innej kompresji zasobów cdn całym polityka buforowania szybkość działania aplikacji każdym urządzeniu i warto mierzyć metryki działaniami zwiększeniem wydajności apki nigdy optymalizuj zanim będziesz pewny a korzystne odpowiada artem shtepenko senior frontend engineer revolut myślę należy zacząć pomiaru czasu danych powinien najszybszy aby przyspieszyć użyć renderowania stronie serwera ssr użytkownik otrzymuje statyczny kod html korzystać aplikacji możliwie najszybciej ważne użycie gzip zminimalizowania pakietu sieci połączenia http umożliwia multipleksowanie ostatnim równie ważnym czynnikiem powinna dystrybucja cdn użytkownicy różnych części odpowiada adam bar tech lead software developer bright inventions najbardziej wartościowe metryki ciężkie uchwycenia specyficzne aplikacji google definiuje koncept first meaningful paint fmp czasu pierwszego momentu użytkownik widzi wartościową treść strony a time interactive tti czasu pierwszego momentu wszystkie inicjalne javascripty załadowały użytkownik wejść interakcję stroną oba zazwyczaj wymagają ręcznego mierzenia w praktyce zaczniemy zwracać uwagę czas zdarzenia domcontentloaded prawdopodobnie okazji poprawimy fmp tti czy znasz jakieś narzędzia biblioteki techniki automatyzujące wspomagające prace wydajnością front endu odpowiada andrii los senior frontend engineer revolut przykładowo szybkości witryny polecam narzędzie google pagespeed ponadto chrome zakładkę audity swoich narzędziach programistycznych odzwierciedlają niektóre funkcje google pagespeed jeśli mówimy procesie budowania innych optymalizacjach lepszego narzędzia webpack posiada wszystkie potrzebne funkcje tree shaking usuwanie nieużywanego kodu eliminację martwego kodu kod używany zostanie uruchomiony minifikację js css html svg innych formatów dynamiczne importowanie zapewnić dostarczenie potrzebnego kodu pierwszej farbie sprawdzić zasięg użycia kodu chrome wiele innych innym niesamowitym narzędziem webpack analizator pakietów webpack pomaga idealny wizualizować pakiety używasz swojej aplikacji pełni wykorzystać rozmiar pakietu js ostatnia rada warto dostroić ustawienia swoich potrzeb indywidualne konfiguracje najtrudniejsze tworzeniu front endu dlatego zalecamy korzystanie aplikacji create react app innych narzędzi cli budowania aplikacji uprościć jednego pakietu czasu czasu podbijać my revolut wykorzystujemy naszych projektów internetowych chociaż dopracowaliśmy obsługiwał niektóre wtyczki babel zmieniał eslint wciąż oryginalny cra odpowiada artem shtepenko senior frontend engineer revolut bardzo użyteczny zestaw narzędzi wydajnościowych zebranych chrome dev tools umożliwiają pomiar czasu renderowania pomocą karty wydajność można ustawić przepustowość procesora przeanalizować sieci użycie pamięci dane google pagespeed dają statystyki twojej strony internetowej webpack dobry zestaw wtyczek pozwalają minimalizować przykład wtyczkę uglifyjs optymalizować analizować kod ponadto należy zapominać wydajności sieci takiej czas obrazów skryptów itp cdn miło mieć obsługę http2 aplikacji odpowiada adam bar tech lead software developer bright inventions sytuacja temacie poprawia miesiąca miesiąc króluje lighthouse narzędzie google a obecnie wbudowane dev toolsy chromie a dostępne https web dev lighthouse a uruchamiać linii komend wpięty proces continuous integration jest szereg serwisów pomagają pomiarach klasyczny przykład http webpagetest org zdjęcia główne artykułu pochodzi unsplash com gdy nowy klient pojawia firmie zajmuje tworzeniem oprogramowania oznacza zawarcie nowego kontraktu umowa zazwyczaj zakłada stworzenie produktu bądź rozwinięcie modułu w cieniu dostarczanych wartości biznesowych skradają jakość wymagania nierozłączna część umowy dodatkowo produkt dostarczony określonym terminie to sprawia rozpoczyna wielka wojna pomiędzy spełnionymi wymaganiami a czasem aleksander rydzewski lider zespołu dziale badawczo rozwojowym boeing w swojej karierze testerem automatycznym programistą fullstack aplikacjach ułatwiły pracę wielu ludzi w aktualnej pracy zajmuje wyszukiwaniem nowatorskich zastosowań sztucznej inteligencji algorytmów optymalizujących celu poprawienia usług dostarczanych branżę lotniczą prywatnie jeździ snowboardzie interesuje technologicznymi nowinkami kulturą azjatycką po określeniu elementów współpracy klientem zebrany zespół specjalistów zabiera wykonania zadania odbiorca produktu każdej kolejnej wersji nanosi poprawki powaga sytuacji zakłada wykonać czasu następnego spotkania drugiej strony czas zostaje zakończenia projektu niebezpiecznie kurczy programiści zaangażowani projekt pewnym czasie zauważają najprostsze zadania zajmują więcej czasu praca rozbudowanym kodzie zaczyna sprawiać problemy a czas powinien przeznaczony budowanie nowych funkcjonalności rozciąga nieskończoność przynosi rezultatów jakich oczekiwaliśmy znaczy projektu wkradła trucizna powoli uśmierca tworzony produkt czasu ograniczyć rozprzestrzeniania cały projekt legnie gruzach kierownik zespołu trucizna nazywa długiem technologicznym dotyka wszystkich projektów informatycznych właśnie nadszedł czas walkę tą chorobą pytanie brzmi wygra historia dotyka wszystkich projektów nawet najlepszy zespół specjalistów czasem zaczyna odczuwać problem długu technologicznego zbiorem zadań odłożonych później uproszczeń kodzie błędów tworzonych podczas pracy zespołu po pewnym czasie wszyscy programiści zadają pytanie uniknąć powstawania długu technologicznego na pytania postaram odpowiedzieć artykule najważniejsze brzmią czym czym polega wpływ projekt refactoring co wpływa rozprzestrzenianie długu technologicznego projekcie jakie narzędzia metody stosować mierzyć dług technologiczny jak określić pracować funkcjonalnościami a skupić długu czy refactoring potrzebny pracach prototypami refactoring w przedstawionej historii zauważyliśmy dług technologiczny występuje razu pojawia zazwyczaj projekt zwiększa rozmiary a klient zmienia wymagania projektu kolejnych iteracjach dług rozwija przemyślane początku struktury naginane warunków wymaganych klienta nagięcie logiki modułu polega przekształceniu moduł spełniał funkcjonalność jakiej oczekuje jednoczesnym wyrzuceniu najmniejszej możliwej części aktualnego rozwiązania tak stworzona struktura naginana zbyt wprowadzać niepożądany chaos projektu najprostszą metodą pomaga zredukować zagmatwanie kodu refactoring proces polega poprawie konstrukcji kodu celu uzyskania wyższej jakości produktu najczęściej refactoring zmienia kod aplikacji tworząc bardziej przejrzystą zrozumiałą czasem pozwala dodatkowo wprowadzić wyższą wydajność danej funkcjonalności całej aplikacji zadanie trywialne przeanalizowanie dogłębne zrozumienie kodu pochłania wiele godzin programista zaangażowany projekt wnikając wewnętrzne systemu przeglądane dłuższego czasu a analiza ujawnić najgorsze koszmary wewnątrz struktury projektowej poprawnie przeprowadzony refactoring wpłynie pozytywnie poprawę czytelności użyteczności kodu to kolei pozwoli sprawne dodawanie nowych funkcjonalności opóźnień wynikających chaotyczną niestabilną konstrukcję aby pełni szczerym pewna grupa programistów uważa refactoring dotyczy procesu zakończonym zadaniu celu poprawy jakości swojego rozwiązania jest oczywiście część refactoringu jednakże doraźne uporządkowanie kodu w artykule skupiamy procesach większa grupa programistów wykonuje chcąc wszczepić nowy kawałek kodu starego modułu zmieniając strukturę przystosować nowo powstałych wymagań w skrócie artykule skupię pracy polegającej przestawianiu istniejących klocków tworzonego oprogramowania celu sprawniejszej możliwości dodawania nowych elementów z perspektywy klienta płaci tworzenie aplikacji proces refactoringu mieć sensu klient stanie zauważyć zmiany wpływają stabilność konstrukcje projektu niewyjaśniony dostatecznie proces wytwórczy sprawia klient drobne zmiany potrafią wpłynąć negatywnie strukturę niedawno wytworzonego oprogramowania niedostateczne doinformowanie konsekwencjach zmian dodatkowy brak zaufania firmy czasem powoduje spięcia kolei przekładają jakość oprogramowania spięcia powodują popularność technik małych firmach zaniedbywana zaniedbywanie technik porządkują kod ewidentny błąd procesie tworzenia oprogramowania chaotyczny kod powoduje aplikacja którą dostarczamy cechuje niską jakością najdrobniejsze zmiany wprowadzane systemu powodują aplikacja mniej stabilna programiści pracujący projekcie unikać skomplikowania chaosu panującego systemie takim wypadku tworzą obejścia funkcjonalne polega specjaliści istniejącego rozwiązania powielają istniejące klasy metody tworząc indywidualne każdej nowej funkcjonalności to kolei powoduje lawinowe obniżenie jakości projektu sprawia utrzymanie kodu staje niemożliwe tworzony projekt dostarczony klienta dostarczony uniemożliwiający dalszy rozwój gdy projekt rozrasta olbrzymich rozmiarów klient ogniwo wpływa pogłębienie długu technologicznego praca zespołu wypadkach kluczowe znaczenie jakość dostarczanego produktu w przedsięwzięciach wielkości występuje błąd ludzki konsekwencje wyboru narzędzi dodatkowym czynnikiem duża rotacja ludzi negatywnie wpływa jakość produktu niezaznajomieni kodem programiści znając mechanizmów istniejących centrum systemu tworzą kod szkodzi aplikacji aby zredukować wpływ nieznajomości systemu zmiany powinny nadzorowane bardziej doświadczonych specjalistów wybór narzędzi bywa problemem projektach długoterminowych technologie nieustannie zmieniają dostrzegamy lepiej dopasowane zadania narzędzia wady starych rozwiązań w czasie rozwoju produktu niektóre rozwiązania przestają aktualne w takim wypadku należy zadbać zastąpienie nadal rozwijamy produkt aspekty przedstawione powyżej sprawiają refactoring czasie wykonywania przynosi bezpośrednio wartości biznesowej pozwala później obniżać koszta wytwarzania oprogramowania przy długoterminowych projektach olbrzymia przewaga czasowa dodatkowo refactoring wpływa jakość produktu zadowolenie zespołu pracuje kodem niewidocznym efektem ubocznym opisywanego projektu obraz naszej firmy rzetelnego dostawcy oprogramowania dostarcza produkty najwyższej klasy jakości to jakość pomaga utrzymywać dobre znajomości uzyskiwać przyszłe kontrakty wrażenie niezwykle ważne pomimo dobrego pru marketingu firma wybierana pierwszy wybór produkty niskiej jakości dlatego uważam refactoring dbałość szczegóły czynnikami niezwykle istotnymi tworzeniu każdego oprogramowania redukowanie długu technologicznego zaniedbywany dług technologiczny przyjmuje wiele potwornych form a każda równie ciężka przełknięcia zarówno kierownika projektu klienta płaci aby klient mógł zauważyć przeznaczane pieniądze należy odpowiedni zaprezentować problemy tworzeniem nowych funkcjonalności przy okazji należy przygotować plan działania naprawi istniejący stan rzeczy planując pracę refactorowanym kodem celu osiągnięcia czystego oprogramowania należy przeanalizować istniejącą sytuacje może okazać projekt uratowania może zdarzyć projekt zaniedbywany dłuższy czas wprowadzenie poprawek aktualnej struktury skonsumuje więcej pracy programistów poświęcone pory najczęściej sytuacja typu zdarzyć rozwijamy projekt tworzony inną firmę zaniedbywała pracę jakością oprogramowania taki stan powinien zostać wykryty podjęciem współpracy zakomunikowana klientowi podnosząca koszta rozwiązania jeśli sytuacja typu zdarzyła naszej firmie a klient produkt zaniedbywane podstawowe praktyki programistyczne niestety najprawdopodobniej stracimy klienta dodatkowo niefortunna decyzja sprawi klient pewno chciał odzyskać pieniądze nikt lubi wyrzucać pieniędzy kosza jeśli natomiast widzimy możliwość chwilowego pogłębiania długu celu zaobserwowania szerszego wachlarza możliwości sytuacja powinna przedyskutowana klientem klient zwiększonego ryzyka ponosi decydując możliwe zwiększone zyski negatywne konsekwencje wynikające decyzji podjęcie ryzyka okaże problematyczne zaciągnięty dług operacji należy spłacić zmniejszając ryzyko produktu późniejszych etapach to wskazywać czynienia takim systemem indywidualnych każdej funkcjonalności bądź pliki zawierające kilkaset linii kodu modyfikowane każdą zmianą przedstawione systemy zazwyczaj napisać nowa pracować nieuporządkowanym kodem najprawdopodobniej testowany naprawa takiego stanu wiązać dłuższym czasem choćby połową przeznaczonego aktualne rozwiązanie innym problemem zmierzyć czasie doraźnej redukcji długu przestarzała technologia może zdarzyć kluczowe działania systemu biblioteki wspierane zbyt problemów wewnętrznych dalej korzystać w naukowców norweskiej politechniki oslo przeprowadziło badanie grupie pracowników różnych szczebli kariery dużych firmach w skład grupy wchodziły zarówno osoby biorą udział konstruowaniu kodu architekci osoby zajmują kierowaniem projektów dodatkowo trzy firmy bardziej dbały kod zostały przepytane dokładne techniki wykorzystują monitorować zapobiegać powstawaniu długu technologicznego niewątpliwie interesującą rzeczą badanych osób monitoruje długu technologicznego czasu przeznaczonego poprawę co ciekawe badanie pokazuje projektów informatycznych dostarczonych bądź przekracza swojego budżetu osoby zaangażowane projekty uważają oprócz niesprecyzowanych wymagań błędem złe narzędzia monitorowania stanu projektu błędne zarządzanie ryzykiem projekcie brzmi znajomo prawda norweskie badanie sugeruje wszystkich respondentów wplata czas przeznaczony poprawki jakościowe zredukowanie długu technologicznego proces tworzenia oprogramowania osoby brały udział takim badaniu stwierdziły czas przeznaczony poprawki wydłuża czas tworzenia nowych funkcjonalności między a można założyć redukowanie długu wydłuża realizację projektu czasu jednakże projekty czas dłuższy zazwyczaj projekty polegające utrzymaniu produktu dobrej jakości długi czas wplatanie poprawki jakościowej proces tworzenia aplikacji sensownym podejściem pozwala zredukować dług technologiczny nie idealne rozwiązanie czym powiem później testy wykonywanej pracy inżynier powinien mieć czas dogłębne zrozumienie struktury jaką pracuje możliwość wykonania zmiany takim stopniu uszkodzić struktury kodu aby wykonywać cięcia chirurgiczną precyzją potrzebne testy pokrycie kodu testami pozwala poprawiać złożone funkcjonalności obawy uszkodzenie przyspiesza pracę programisty późniejszych terminach pokazuje klienta realizację założeń niefunkcjonalnych odporność systemu błędy użytkowników aby testy wykonywane regularnie należy wzbogacić system kontroli wersji git systemy continuous integration jenkins teamcity każdą zmianą dostarczaną wersji produkcyjnej testują rozwiązanie pomocy testów jednostkowych wydajnościowych dobrą metodyką tworzenia testów tdd test driven development polega stworzeniu testów walidujących nieistniejącą funkcjonalność a następnie zaimplementowaniu funkcjonalności sprawi poszczególne testy wykonają poprawnie podobną technikę stosują testerzy manualni swoich testach tworząc początku scenariusz chcą zrealizować testy wykonywane bardziej naginane uzyskanego rozwiązania nie bądź małostkowy code review inną znaną popularną techniką code review polega umożliwieniu programistom przeglądania dostarczanego kodu pomocą wbudowanych funkcjonalności systemy github gitlab do celu zostały stworzone dedykowane aplikacje fisheye specjaliści zaangażowani projekt powinni mieć czas przejrzeć kod wyprodukowany kolegą zespołu zadecydować zmianach powinny zastosowane dopuszczeniem kodu produkcji moim zdaniem technika wpływająca dodatnio projekt pojedynczą częścią pracuje programista a cała grupa patrząca kod pryzmat swoich umiejętności zapewniając przejrzystość wysoką wydajność dodatkowo technika pozwala uczyć nowych pracowników projekcie funkcjonalności zaszytych systemie bądź wydajniejszych technik dostępnych technologii przy code review czai nieznaczna pułapka należy pamiętać praca projektem patrzeć kod pryzmat przyjaźni kilka razy spotkałem pracą musiała odrzucona podzielona mniejsze kawałki liczba zmian projekcie zbyt duża code review jednego człowieka mimo przyjaźni pracy poświęconej osoby jakość projektu ważniejsza czas spędzony poprawkami z drugiej strony code review należy małostkowym jeśli osoba dziesiąty przegląda kod czepia pociętego kodu traci czas projektowy powodując opóźnienia taka sytuacja powinna przedyskutowana zespole na pewno obecność testów code review czas wpleciony proces tworzenia oprogramowania pomagają redukcji długu technologicznego w wypadku możemy zająć refactoringiem podczas naszej pracy należy pamiętać problemie przyszliśmy danej sekcji aplikacji zdarza poprawki pochłoną zapomnimy problem chcieliśmy zrealizować początku wpleciony refactoring dodatkowo wadę pracownik poświęca czasu dług technologiczny kierownik projektu to prowadzi kolejnego problemu jakim monitorowanie wielkości długu technologicznego monitorowanie wielkości długu technologicznego w poprzednim punkcie przestawiłem czasu konsumuje praca długiem technologicznym jednakże czas szacunkową wersją wydarzeń prezentowaną programistów architektów monitorowali czasu poświęcanego walkę długiem technologicznym zespoły zapytane norweskich naukowców monitorują ilość pozostałego długu technologicznego odpowiedziały zapisują informacje dokumencie excel bądź word naprawdę jestem trochę zażenowany przechowywany intranecie firmy to rozwiązanie zalecane wady którymi możliwość zgubienia pliku ciężka dostępność najprawdopodobniej nikt zagląda sfrustrowanymi programistami inni respondenci odpowiedzieli dużej liczbie projektów występują komentarze todo miejscach należy przeprowadzić refactoring aktualne narzędzia pracy programistów eclipse visualstudio intelij webstorm potrafią monitorować miejsca jednakże technika zalecana techniką wspomagającą jest spowodowane ciężko określić sugeruje kod todo może mały blok kodu równie implikować poprawki plikach wchodzących skład aplikacji inna bardziej doświadczona część respondentów odpowiedziała problemów związanymi długiem technologicznym używana specjalna tablica systemie zadań jira redmine pivotaltracker bądź bugzilla norwescy badacze stwierdzili najlepsza możliwa forma długu technologicznego tablica skonstruowana oddzielnie stosunku realizowanych zadań a zarazem programista poświęca czas uporządkowanie kodu dokładnie wiemy czasu poświęcił zadanie programiści napotykają problemy kodzie problemu tworzyć zadania rozwiązują mniej palące kwestie oprogramowania wskazują zauważone zaszłości systemu zadania powinny wyglądać narzekanie lament temat złej struktury kodu jeśli osoba zespołu widzi problem rozwiązania powinien mieć czas opisanie zasugerowanie mocno spowalnia pracę kolegów bądź systemu względem wydajności spróbować oszacować czasu powinno zająć zadanie tablica taka powinna traktowana kierowników projektów ujście frustracji programistów każdy problem znajdujący liście samoczynnie zniknie każde zadanie listy powinno zrewidowane architekta aplikacji bądź osobę najbardziej zaznajomioną modułem osoba odpowiedzialna weryfikację zgłoszonego zadania powinna przemyśleć sens połączyć zadania odpowiadają element poprawić estmaty następnie zadanie odpowiada jakość kodu a poprawką wydajnościową aplikacji powinno skierowane właściciela bądź kierownika produktu następnie każdej iteracji tworzenia oprogramowania powinien przeznaczony czas poprawek jakościowych zgłoszonych takiej tablicy jest wygodna metoda redukowania długu technologicznego przynajmniej czasu wyjścia nowocześniejszej metody tworzenia aplikacji jaką pracujemy statystyczna analiza kodu inną metodą walki długiem technologicznym testy statyczna analiza kodu statyczna analiza kodu polega przejrzeniu struktury aplikacji ide określenie miejsc funkcje powtarzają warunki pętli szansy wykonać funkcje zmienne wykorzystywane naszej aplikacji taka forma testów pozwala trzymanie kodu dobrej kondycji zaśmiecanie kodu niepotrzebnymi elementami zaciemniają postrzeganie kodu według norweskich badań najczęstszą technologią ide analizy statycznej sonarqube drugą wspomnianą metodą mierzenia wzrastającego długu technologicznego testy metryka pokazująca liczbę błędów wykrywanych testy testerów produkcji momencie pomocna jeśli zauważymy jakimś module liczba błędów narasta a funkcjonalności stworzone zachowaniem najwyższej jakości oznaczać dany moduł mieć problemy stworzoną architekturą którą należałoby zrewidować poprawić celu zmniejszenia powiązań między funkcjonalnościami jeśli będziemy zwracać uwagi narastającą ilość błędów okazać skończymy naszego projektu powiązania błędy przerosną wartość dodaną produktu techniki monitorujące dług technologiczny dodatkową techniką podnoszącą jakość produkcji skomplikowanych systemów audyt jakościowy co pewien okres sprint powinien przeznaczony poprawienie jakości zaobserwowanie miejsc problem architekturą audyt typu stosowany firmie uber został zaprezentowany książce susan j fowler sprawdza doskonale dużych projektach utrzymywane długi czas wiele osób osoby podczas specjalnego spotkania architektem proszone zaprezentowanie rozumieją aktualną strukturę aplikacji modułu działanie wytłumaczenie funkcjonalności modułu uporządkowany zajmuje reguły sporo czasu odbywa indywidualnym spotkaniu zmniejszyć stres pracownika pozwala zaobserwowanie części systemu programiści rozumieją pojawiają obejścia postępuje narastanie długu technologicznego zadanie należy sprawnego architekta zauważy problemy stworzy zadania polegające uproszczeniu konstrukcji bądź zoptymalizowaniu reszta czasu przeznaczonego audyt powinna przeznaczona rozwiązanie typu kwestii to cykliczne wydarzenie dodatni wpływ jakość produktu zespół cyklicznie komunikować problemy zrozumieniem produktu przedstawić wątpliwości niejasnej struktury kodzie podsumowując techniki monitorujące należy zaznaczyć zarówno audyt stworzenie tablicy błędami testy sprawdzają mocno konstrukcja stała niestabilna pozwalają analizę wielkości istniejącego długu technologicznego aby zobaczyć przyszłość ewentualne pogłębienie długu należy zatrudnić sprawnego architekta analizuje aktualną sytuację rynku technologii niestety narzędzie stanie planować architektury lider technologiczny powinien posiadać czas przeanalizowanie nowo pojawiających opcji analiza powinna zawierać czas zaplanowanie prac zmienią produkt używa najnowszych zdobyczy techniki jeśli sytuacja zostanie przeanalizowana zostaniemy dinozaurem przegonionym konkurencję szybciej adaptującą rynku dodatkowo należy nadmienić metoda pozwala wyeliminowanie długu technologicznego całkowicie metody pozwalają redukować dług utrzymywalnego poziomu błędy ludzkie nieustanny rozwój zmiany technologii pozwalają pozostawienie systemu samemu skończyłoby pewno prototypy prototyp początkowa wersja produktu pokazać wartość biznesową pomysłu do pracy prototypem reguły przeznaczona mała grupa ludzi rozwijających oprogramowanie małą skalę stąd nazwa mvp minimum viable product dopiero prototyp pozyska pewno grono zainteresowanych klientów prototyp przekształcany pełnoprawny produkt dodatkowo projektu dostarczeni dodatkowi ludzie ułatwić przynoszenie dodatkowej wartości biznesowej szybszy tego typu podejście opisane książce dan a olsena porównuje zespołu rzuca małymi kamieniami różnych kierunkach nasłuchując kamień trafi ciekawego jeśli kamień pewnym wyda interesujący dźwięk wytaczamy ciężkie działa sprawią osiągniemy satysfakcjonujący efekt mimo tworzenia nowych funkcjonalności należy pamiętać mvp produktem pierwotnych analiz klienci oczekują dlatego pierwszej kolejności należy ustalić wymagania funkcjonalne niefunkcjonalne spełniać produkt pierwsza wersja aplikacji znacząco różni czego oczekiwać prawdziwi użytkownicy systemu często klient płaci produkt zdaje sprawy czego użytkownicy naprawdę chcą dlatego pierwszych wersjach systemu należy skupić tworzeniu kodu możliwie najłatwiej przystosowany zmian zmiany prototypach występują operacje zwane pivotem zmianą pozwalającą lepsze dopasowanie firmy rynku jest naturalne zachowanie startupów w takim momencie systemu wycinane najlepsze elementy odpowiednie algorytmy zdarza prototyp tworzymy ląduje koszu prace zaczynamy początku jest sytuacja podobna przerośniętego długu technologicznego okazuje czas poświęcony poprawki przekroczyłby czas tworzenia nowego systemu przyznanie błędu niewątpliwie ciężkie zaprezentowane odpowiednim momencie potrafi zaoszczędzić pieniędzy firmy klienta dług architekta należy pamiętać stworzyć prototypu wprowadzić produkcję zazwyczaj prototyp powstaje innymi technikami mniejszą skalę prawdziwy produkt z powodu posiada dług technologiczny pozbyć wdrożeniem wielką skalę dług rozmyślnym posunięciem strategicznym dobrze skalowalne rozwiązanie znacznie przekracza czas przeznaczony stworzenie całego prototypu zastosowanie rozwiązania taką skalę kompletnie bezużyteczne jesteśmy pewni wartości biznesowej produktu a efekty testujemy małej grupie użytkowników testach walidacji biznesowej w takim wypadku inteligentny architekt zaciąga dług przyszłości zamiar spłacić niedorzecznym wydaje tworzenie aplikacji cały rynek zainteresowany kulturystyką okazać założenia kompletnie chybione z drugiej strony tworzenie małego prototypu wdrażanie pełną skalę produkcyjną ludzie przekazywać dostęp mało rozsądne ilość użytkowników powinna ustanowiona klientem początku wymagania niefunkcjonalne klient niektóre wymagania zbyt wygórowane specjaliści zadanie rzetelnie poinformować klienta zaistniałej sytuacji przygotować model bezpiecznego wdrożenia systemu rynku system projektowany mniej restrykcyjne wymagania reguły zablokuje dostęp sprawi cała struktura stanie niestabilna pozostawi użytkowników dużą dozą niezadowolenia ludzie reguły niecierpliwymi istotami jeśli technologia którą dostarczyliśmy zacinać niedużo lepsza konkurencji najprawdopodobniej użytkownicy wrócą starych nawyków aplikacji działają natychmiastowo odzyskanie zaufania potrwać długo sprawi najważniejsze początkowe zyski wystarczające przetrwać zachwycić użytkowników należy założyć prototyp małą wersją większej aplikacji należy zredukować wymagania funkcjonalne niefunkcjonalne takiej grupy pozwoli stworzenie aplikacji działającej małym zakresie zaciągnięcie takiego długu zazwyczaj decyzją architekta powinna dotyczyć momentu wzbudzeniem zainteresowania użytkowników podsumowując kiedy skupić długu a funkcjonalnościach dług technologiczny podstępnym efektem ubocznym tworzenia utrzymywania oprogramowania w każdym projekcie miejsce programiści muszą stosować refactoring braku bezpośredniego wpływu wartość biznesową rozwijać projekt terminie zachowaniem wymagań niefunkcjonalnych aby początku szybko walidować idee możemy zaciągać dług technologiczny wykorzystując pewne uproszczenia algorytmów sprawią produkt szybciej zwalidowany biznesowo musimy pamiętać dłuższej perspektywie spłacić dług pracując jakością stworzonego rozwiązania oficjalnym wdrożeniem systemu w dłuższej perspektywie współpracy klientem należy wplatać refactoring czas naszej pracy wykorzystując podstawowe techniki tj code review pokrycie aplikacji testami aby przepalać czasu irytuje klienta móc zaprezentować klientowi wyniki jakimi pracujemy należy monitorować status naszego projektu aby robić efektywnie pory zaprezentowałem stworzenie tablicy problemów zgłaszanych programistów audyt jakościowy pokazujący zrozumienie struktury aplikacji programistów w skład grupy metod wchodzi statyczna analiza kodu pozwala uproszczenie konstrukcji kodu stworzenie bardziej zrozumiałej struktury jeśli potrzebujemy twardych liczb przekonać klienta racji wykonywania refactoringu przedstawiam kilka ostatnich metod policzalnych pomiarów oparciu wyżej wymienione techniki dbanie jakość dostarczanych aplikacji najważniejszym zadaniem zespołów projektowych refactoring pozwala trzymać systemy braku bezpośredniego wpływu wartość biznesową projektu pośrednio proces potrzebny tlen istotom oddychania bez refactoringu uporządkowania entropia tworzonych zmian poprawek rozdarła kod a spędzalibyśmy olbrzymią ilość czasu analizowaniu zagmatwanej logiki aplikacji jeśli kogoś przekonują metryki a bezpośrednia wartość pieniężna wynikająca kosztów operacyjnych znalazłem argument czysto matematyczny w została wydana książka między innymi opisuje kątem finansowym należy wprowadzić refactoring projektu na podstawie książki stworzyłem cztery wzory pomagają ustalić każda iteracja posiada swój koszt utrzymania aktualnego kodu w przypadku książki rok uważam koszt kwartału sprawdza aby wyliczyć koszt iteracji należy policzyć kosztują zmiany błędy powstałe aplikacji pomocą prostego wzoru błędy zmiany wszystkie zmiany powstają procesie tworzenia oprogramowania klienta drugim krokiem obliczenie kosztu pracy refactoringiem zespole pomocą wzoru następnie obliczyć współczynnik przyrostu kosztów aby zrobić skorzystać wzoru dodając siebie koszty utrzymania ostatnich n kwartałach wyliczone wzorem następnie podzielić wartość koszt pierwszego kwartału biorącego udziału pomiarze pomnożony n następnie odjąć wartość wyjdzie wartości otrzymamy znormalizowany przyrostu kosztów utrzymania zazwyczaj równania używa ostatnich kwartałów otrzymać mniej zaburzony wynik możemy dodać więcej miesięcy równania dużo osób zatrzymuje kroku wylicza przyrost kosztów wynosił więcej jeśli wartość miary wynosi więcej korzysta refactoringu są różne uzasadnienia decyzji jedne teorie mówią zysk jakościowy refactoringu czym zgadzam bierze uwagę późniejszej opinii naszej firmie twórcy oprogramowania inna kuriozalna teoria brzmi zebralibyśmy cały koszt utrzymania aplikacji danym kwartale banku lokatę otrzymalibyśmy większy zysk jeśli chcemy klienta oszacować dokładną miarę zysku należy skorzystać wzoru tzn dodać siebie wynik wzoru ostatniej iteracji a następnie odjąć koszt ostatniej iteracji pomnożony współczynnik zysk powinien wyjść walucie którą wyliczyliśmy pozostałe wartości mimo koszt najbardziej poprawny przekonać wiele osób osobiście uważam pomija wiele ważnych cech ryzyko danym momencie utrzymania projektu może okazać kod zagmatwany koszt utrzymania momencie rozpoczęcia pomiaru duży w takim wypadku kolejnych miesiącach koszt zwiększał powinien zawyżony sprawiał kłopotów programistom nawet duże błędy popełnione programistów zmieniać współczynniku inną sprawą fakt wysokim ryzyku uzyskanym podczas tworzenia oprogramowania zdarzyć refactoring zastosowany przewyższa jakiekolwiek koszta produkcji oprogramowania wyliczone estymaty zawierają informacji programiści konsumują czasu zajmując wszczepianiem swoich rozwiązań istniejący system głównym kosztem tworzenia oprogramowania sądzę estymaty pasują bardziej czysto utrzymaniowych zespołów niedużym długiem technologicznym zdarza niezbyt refactoring jedną istotniejszych rzeczy sprawiają produkt potrafi dojść fazy wydania właściwych użytkowników zachęcam monitorowania długu technologicznego proste potrzebne produktu metryki testy liczba zadań wróciła fazy produkcyjnej czas odpowiedzi jeśli pewna metryka zaczyna sprawiać kłopoty przeprowadźmy mały audyt stwórzmy tablicę problemów zlokalizujmy błędy naszym zespołem sprawi niskim kosztem oszczędzimy wielu godzin pracy celu wprowadzenia zmian skomplikowanego testowalnego kodu zaoszczędzony czas przyszłości będziemy mogli wykorzystać tworzenie szybciej cennej wartości biznesowej bibliografia a martini t besker j bosch technical debt tracking current state of practice a survey and multiple case study in large organizations science of computer programming elsevier pp october j verner j sampson and n cerpa what factors lead software project failure second international conference research challenges in information science marrakech pp doi rcis s fowler production ready microservices o reilly media edition december d olsen the lean product playbook how innovate with minimum viable products and rapid customer feedback wiley edition june i mistrik r bahsoon r kazman y zhang economics driven software architecture morgan kaufmann edition july wybór między reactemjs vs angularem prosty dlatego podjęliśmy temat naszej devdebacie zaprosiliśmy zwykle doświadczonych developerów zapytaliśmy oceniają próg wejścia poleciliby osobie zna javascripta znają rozwiązania automatycznego testowania napisanego kodu zobaczcie czego dowiedzieliśmy odpowiedzi udzielają krystian pudlik frontend developer evojam fan dobrego ui ux entuzjasta typescripta funkcyjnego programowania niekonwencjonalnych rozwiązań ekosystemu frontendowego na dzień pracuje reactem angularem a godzinach eksperymentuje elmem wierzy zalety restrykcyjnego podejścia code review procesu wytwarzania oprogramowania tomasz kryń senior javascript developer studio programistycznym smultron tworzący gry aplikacje webowe angular vue react pixi node vanillajs z wykształcenia matematyk udowodnił kilka swoich twierdzeń hobbystycznie zajmuje sztuczną inteligencją a szczególności deep learningiem tomasz senior frontend developer olx group prelegent konferencjach javascriptowych reactowych współorganizuje react poznań meetup meet js poznań uwielbia dzielić wiedzą innymi daria woźnicka programistka ror js binarapps koordynatorka women in technology absolwentka politechniki informatyka studentka akademii menedżerów muzycznych zawodowo programistka tworząca aplikacje internetowe software house programuje głównie ruby rails javascript po godzinach organizuje koncerty muzyczne pytanie jak ocenisz próg wejścia reactajs a próg wejścia angulara odpowiada krystian pudlik frontend javascript developer sądzę react zdecydowanie niższy próg wejścia względu mniejszą ilość zależności typescript bazuje angular sprawiać problemy programistom pisali wcześniej backendu znają języków statycznie typowanych dodatkowo moich obserwacji wynika wielu ludzi używa rxjs niepoprawny prowadzić problemów wydajnościowych aplikacjach napisanych angularze myślę porównamy cały ekosystem reacta angularem a samą bibliotekę frameworkiem react nadal mniejszy próg wejścia odpowiada tomasz kryń senior javascript developer zgadzam angularze rozbudowaną sztywną architekturę nauczyć trzeba poświęcić czas opanujemy pisze prościej efektywniej pisze niemal samo sama architektura wymusza dobrej jakości kod w react duży luz możemy godzinach tutorialem dokumentacją zacząć pisać pisać kod dobrej jakości dobrym developerem to trochę jazdą nartach desce na nartach zacząć trudniej dojść poprawnej technicznie jazdy odpowiada daria woźnicka programistka ror js na wstępie zaznaczę reacta myśli cały ekosystem idący biblioteką react js parze zwykle react routerem reduxem fluxem immutable etc w porównać frameworkiem jakim angular io próg wejścia zależy zaplecze programistyczne a wszystkim wiedzę javascripcie es6 posiadasz czego dążysz danej technologii jeśli chodzi czyste frameworki próg wejścia oceniam zbliżony obie biblioteki korzystają składni es6 robią różne sposoby przykładowo react idzie parze babelem transpiluje składnię jsx javascriptu a przypadku angulara polecany typescript próg wejścia różny typescript podobieństwa javy ułatwia pisanie skomplikowanych systemów mimo nauce przynajmniej poznałeś kiedyś javę dodanie statycznego typowania javascriptu budzi różne kontrowersje opanowanie jsxa zajęło zdecydowanie więcej czasu na szczęście obu przypadkach składnia sugestią możemy pisać czystym javascripcie jesteśmy odważni idąc tą drogą spodziewajmy dobrych przykładów internecie pytanie jak oceniasz społeczność reactajs angulara czy uważasz któraś bardziej przyjazna pomocna odpowiada krystian pudlik frontend javascript developer oba rozwiązania dużą społeczność jednakże reactem zajmuje zdecydowanie więcej ludzi społeczność bardziej pomocna bardziej dojrzała sama biblioteka dłużej rynku pomoc w przypadku angulara byłem skazany twórców frameworka zakładanie tasków githubie społeczność potrafiła pomóc pewnego momentu dodatkowo wiele rozwiązań podawanych społeczność zawiera złe wzorce odpowiada tomasz senior frontend developer nie uważam któraś społeczności bardziej przyjazna pomocna da ukryć społeczność reactowa zwyczajnie większa wiele konferencji javascriptowych miałem okazję widz prelegent zasadzie przerodziło wydarzenia reactowe względu popularność biblioteki w poznaniu współorganizuję spotkania cyklu react poznań meetup regularnie przychodzi setka ludzi pytanie co poleciłbyś osobie zna javascripta reactajs angulara dlaczego odpowiada krystian pudlik frontend javascript developer jeśli patrzymy kątem szybkości wystartowania tworzenia projektu zdecydowanie react próg wejścia zdecydowanie niższy z kolei poboczny projekt osoba chciałby poszerzyć wiedzę zdecydowanie angular sądzę szczególnie warto poznać typescripta reaktywny paradygmat programowania bazuje angular często kończy poznaniu typescripta ludzie chcą wracać czystego javascriptu reactem odpowiada tomasz kryń senior javascript developer można mieć różne cele zależności celu poleciłbym odpowiedniej kolejności a angular r react v vue szybko znaleźć pracę rav więcej zarabiać rav najszybciej nauczyć vra nauczyć pisać najlepszej jakości kod avr najszybciej wytworzyć mały projekt vra najszybciej wytworzyć duży projekt avr mieć przyjemność pisania vra odpowiada tomasz senior frontend developer moje odpowiedzi dosyć mało obiektywne wielkim fanem reacta między innymi rozumieć naturalny etap drodze rozwoju programisty javascript przez react biblioteką obsługi ui czarnej magii javascript można argumentować jsx pewnego rodzaju abstrakcją spojrzeć html sterydach w swojej karierze miałem okazję spotkać programistów angularowców mieli braki podstaw javascriptu efektem warstwy abstrakcji którą angular ukrywa bebechy nie oczywiście złego nikt wynajdywać koła nowo warto wiedzieć dzieje maską narzędzi używamy odpowiada daria woźnicka programistka ror js wybrałabym angulara dzięki działającym integracjom typescriptem wprowadza typowanie danych javascriptu jest wyjątkowo wygodna użyciu biblioteka jeśli biegle poruszasz javascripcie nauka rx a polecanej biblioteki obsługi zdarzeń problemem mimo zalet react js szerzej znany popularny wsparcie społeczności polecałabym rozejrzeć grupie znajomych programistów wybrać bibliotekę którą znają dzięki czemu uzyskasz wsparcie lepiej szybciej uczy pracy danej technologii patrząc popyt rynku obu rozwiązaniach znajdziesz wystarczającą ilość projektów martwić pracę pytanie czy istnieją dobre narzędzia testowania automatycznego obydwu rozwiązań odpowiada krystian pudlik frontend javascript developer jak najbardziej właściwie rozwiązania testowania automatycznego niejako niezależne technologii a zwłaszcza narzędzia testów e2e wynika samej definicji możemy większości przypadków używać zarówno reacta angulara oczywiście preferencje twórców różne przypadku unit testów angular bazuje stacku karma jasmine natomiast react narzędziu jest udostępnia funkcjonalność snapshot testing z moich doświadczeń spokojnie użyć jesta testowania angulara opcją snapshotów jak jesteśmy angularze warto wspomnieć marble testingu używanego testowania streamów rxjs jest ciekawe podejście testowania asynchronicznych streamów polegające mniej więcej rysowaniu kodzie osi czasu marbles odpowiada tomasz senior frontend developer mówiąc testach automatycznych możemy mieć myśli rzeczy testy e2e end end unit testy jeżeli mowa e2e szczęście jakiegoś czasu istnieje cypress io dzięki narzędziu musimy myśleć jakim frameworku napisana aplikacja a testowanie czysta przyjemność względu brak selenium spodem mówiąc unit testach istnieją dedykowane narzędzia zarówno angulara reacta zalety wady czasami więcej drugich testy pytanie czy dostrzegasz różnice utrzymania dużej aplikacji między reactjs a angular jakie odpowiada krystian pudlik frontend javascript developer podstawową różnicą plusem korzyść angulara moim zdaniem typescript mogę zabrzmieć nieco subiektywnie wyobrażam utrzymywania dużej aplikacji typescripta dołączam aplikacji reactowych statycznie typowana aplikacja dokumentacją samą dzięki czemu nowy programista programista wracający latach projektu stanie poruszać sprawdzając kontrakty między typami w przypadku czystego javascriptu reacta jesteśmy zmuszeni napisać dokumentację używając chociażby jsdoc moim zdaniem połowiczne rozwiązanie typescript dodatkowo stanie wykryć wiele błędów zintegrować edytorem podpowiadać składnię mam wrażenie react napisać brzydki kod mieć jakieś znaczenie utrzymywania aplikacji jeśli dorzucimy typescripta flow reacta aplikacja napisana starannie różnice utrzymywaniu duże angular prostu bardziej restrykcyjny względu typescripta ciężej napisać brzydkiego swoboda jaką daje react wpłynąć negatywnie pozytywnie utrzymywanie dużej aplikacji zależności poziomu zaawansowania programisty odpowiada tomasz senior frontend developer trudność utrzymaniu aplikacji zależy frameworka biblioteki wykorzystanej implementacji można pisać czytelny udokumentowany prosty utrzymaniu kod wykorzystaniem jquery a spaghetti code rozumie autor dwóch godzinach wykorzystaniem angulara reacta w mojej prywatnej opinii kod aplikacji reactowych zrozumienia niekoniecznie oznaczać utrzymaniu warto pamiętać słówku engineering określeniu software engineer końcu zadanie utrzymywać kod programistów google facebooka odpowiada daria woźnicka programistka ror js dobrze napisana aplikacja powinna utrzymaniu niezależnie wybranej technologii zależy bardziej programisty frameworku zdecydowanie aplikacje używające reacta angulara utrzymaniu aplikacje jquery owe używające czystego javascriptu według stopień utrzymania obu przypadkach podobny wydaje szukamy nowego programisty utrzymania naszej aplikacji znaleźć aplikacja napisana react js zapraszamy was drodzy czytelnicy udziały devdebacie odpowiedzcie zadanych wyżej pytań komentarzach jesteśmy ciekawy waszych opinii drugą część devdebaty znajdziecie szczegółowe opisy niektórych mechanizmów końca zrozumiałe póki sami wypróbujemy dlatego postanowiłem stworzyć podsumowanie pokazujące różne sposoby użycia niepoprawnego cookie atrybutami domain path oprócz pokazałem wpływ bezpieczeństwo aplikacji możliwość wykorzystania różnych atakach michał dardas pentester logicaltrust na dzień atakuje psuje aplikacje wszystkim webowe mobilne ex programista niegasnącym zamiłowaniem technologii javowych we współpracy zaufaną trzecią stroną prowadzi szkolenia poświęcone bezpieczeństwu aplikacji webowych mobilnych autor artykułu pt poznajcie needle narzędzie analizy aplikacji mobilnych ios protokół http bezstanowy oznacza podstawowej formie istnieje powiązanie między kolejnymi w efekcie serwer odbiera stanie rozpoznać jakiego klienta pochodzą popularnym rozwiązaniem wykorzystanie mechanizmu cookie pozwala serwerowi zapisać przeglądarce użytkownika niewielkie porcje danych przeglądarka każdym kolejnym serwera załącza przechowywane cookie dzięki serwer stanie rozpoznawać użytkownik komunikuje nie zresztą jedyne zastosowanie mechanizmu cookie wykorzystywane przechowywania wartości stronie użytkownika mniej znaczących ustawień przy standardowym wykorzystaniu cookie przeglądarka dba załączać cookie pochodzące domeny którą komunikuje jednak cookie oferuje możliwość ustawienia specjalnych atrybutów domain path przyjrzyjmy zachowują praktyce mieć wpływ bezpieczeństwo sposób cookie powinno obsługiwane przeglądarki zdefiniowany dokumencie rfc6265 domain jak wyżej cookie domyślnie powiązywane domeną ustawiła jednak stosując atrybut domain możemy utworzyć cookie subdomenom pewnymi ograniczeniami szczegóły dotyczące atrybutu znaleźć sekcjach dokumentu rfc6265 załóżmy serwer znajduje adresem http mail example com ustawia zestaw różnych cookie różnymi kombinacjami opcji domain część ustawień poprawna jest celowy zabieg celu zaprezentowania działa działa cookie mailsession0 posiada ustawienia domain oznacza znajdowało domeny mail example com mailsession1 mailsession2 ustawiają cookie domeny macierzystej wszystkich subdomen oznacza znajdować wszystkich example com wszystkich subdomen example com mailsession3 mailsession4 ustawiane domeny macierzystej najwyższego poziomu zostaną zignorowane mailsession5 mailsession6 ustawiane zupełnie innej domeny zostaną zignorowane mailsession7 mailsession8 ustawiane aktualnej domeny w odróżnieniu mailsession0 trafiać odnoszących subdomen domeny mailsession9 mailsessiona ustawiane subdomeny aktualnej domeny jest niepoprawne ustawienie zostaną zignorowane mailsessionb mailsessionc mailsessiond mailsessione próba ustawienia cookie innych subdomen należących domeny macierzystej te niepoprawne zostaną zignorowane zobaczmy przykładzie różnych domen wykonywane przeglądarki firefox esr decydowała dołączeniu wybranych cookie po wszystkich przeglądarkach podążających standardem powinniśmy spodziewać takiego samego zachowania tabelka podsumowuje ustawienie domain wpływa dołączanie cookie konkretnych domen cookie ustawiane domenę mail example com public suffix rozwijając temat poruszony mailsession3 mailsession4 cookie możemy ustawiać dowolnej nadrzędnej domeny dopóki domena należąca public suffix listy domen pozwalają publiczne rejestrowanie subdomen do takiej listy należą m in domeny com com uk taka lista zmieniać czasem a aktualna wersja dostępna adresem https publicsuffix org list można dodatkowo zaobserwować poniższym przykładzie odpowiedź domeny a b c d e f example com ustawia cookie b c domen example com f example com mogłaby kolejnych a próba ustawienia cookie public suffix powiedzie atak wiedza temat zachowania atrybutu domain przydatna specyficznych atakach w momencie przyda informacja cookie ustawiane serwer nagłówkiem set cookie pomocą javascriptowego atrybutu document cookie załóżmy wspomnianej aplikacji mail example com znajduje podatność typu xss atakujący możemy wstrzykiwać dowolny kod javascript zawartość strony dodatkowo załóżmy chcemy atak przenieść początkowej domeny mail example com inną powiązaną domenę przykładzie niech shop example com czyli moglibyśmy stronie mail example com wstrzykiwać złośliwy kod ustawiałby cookie example com wszystkich subdomen a jakich sytuacjach mogłoby przydatne podatności typu cookie based przykład cookie based sql injection cookie based xss to rodzaj podatności złośliwy payload pochodzi cookie na przykład równoległej subdomenie shop example com mógłby znajdować podatny skrypt w takiej sytuacji następujący kod javascript uruchamiany poziomu domeny mail example com mógłby taką podatność wykorzystywać celu przeprowadzenia kolejnego ataku xss razem kontekście domeny shop example com podatność typu self xss w przypadku typu podatności ofiara przeprowadzić atak wprowadzić aplikacji payload jednym wariantów rodzaju podatności sytuacja payload xss znajduje polu widzi konkretny użytkownik pole swoją nazwą użytkownika opcjach wydawać mogło rodzaj podatności praktycznego zastosowania atakujący przygotować specjalne konto domenie shop example com umieści payload przykład imieniu zaloguje celu wygenerowania cookie sesyjnego a następnie pomocą pierwotnego xssa mail example com zaloguje swoją ofiarę konto dzięki atakujący mógłby wykradać dane kont użytkowników shop example com w rzeczywistości podobne ataki wycelowane m in użytkowników ubera akcje phisingowe jest technicznie prostsza odmiana punktu opiera obecności dodatkowej podatności polega zalogowaniu ofiary podstawione konto licząc ofiara zorientuje wprowadzi wrażliwe dane zapisze swoją kartę kredytową po drodze pojawia problem jeśli domena shop example com ustawiła cookie próbując nadpisać poziomu mail example com pomocą kodu sprawimy przeglądarka serwera wysyłać cookie samej nazwie to oryginalnie ustawione serwer ustawiane poziomu javascriptu jest niepożądane zachowanie gwarancji dwóch cookie serwer weźmie uwagę z powodu próba nadpisania identyfikatora sesji powieść może wyglądać można rozwiązać pomocą sztuczki zwanej cookie jar overflow polega stworzeniu wielu cookie przeglądarka usunie najstarsze a oryginalnie ustawione serwer wykonując kod sprawimy kolejnym przeglądarka dołączy złośliwe cookie zależnie przeglądarki ofiary wymagana inna liczba iteracji path kolejnym atrybutem wartym uwagi path pozwala ograniczyć zakres cookie konkretnego katalogu serwerze może wykorzystane separacji cookie między kilkoma aplikacjami dostępnymi samej domenie szczegóły dotyczące atrybutu znaleźć sekcjach dokumentu rfc6265 załóżmy serwerze example com uruchomione aplikacje pierwsza dostępna adresem example com tasks a druga example com notes chcemy aplikacje widziały między sobą cookie może zostać osiągnięte następujący serwer ustawia następujące cookie global global_2 dołączane wszystkich tasks_session dołączany odnoszących katalogu tasks podkatalogów tasks tasks new itd notes_session analogicznie powyższego dołączany odnoszących katalogu notes podkatalogów możemy zaobserwować następujących można podsumować pomocą tabelki czy mechanizm jakikolwiek wpływ bezpieczeństwo czy przypadku obecności podatności typu xss konfiguracja path uchroniłaby pozostałe aplikacje sprawdźmy omawianym przykładzie załóżmy aplikacji example com tasks istnieje taka podatność atakujący możliwość wstrzyknięcia dowolnego kodu jeżeli próbowałby odczytać cookie prostu odwołując document cookie notes_session byłby widoczny wspominając ustawieniu httponly mogłoby uniemożliwić odczyt któregokolwiek cookie jednak taka sytuacja sprawia atakujący innych możliwości najprostsze takiej sytuacji zrobić stworzyć iframe odwołujący katalogu innej aplikacji ze względu zmienia nazwa katalogu zastosowania restrykcje narzucane same origin policy porównuje schemat hosta numer portu pozostają zmian w efekcie przeglądarka załączy cookie powiązane aplikacją a atakujący mógł wykonywać dowolne imieniu zalogowanego użytkownika odczytywać odpowiedzi wykradać wrażliwe dane użytkownika odczytać token csrf kodu html payload xss poziomu http example com tasks podsumowanie zapoznaliśmy sposobem działania atrybutów domain path domain pozwala przypisywać cookie domeny macierzystej subdomen wyjątkiem public suffix nawet wykorzystujemy atrybutu warto mieć uwadze atakujący wykorzystujący podatność xss pomocą poszerzać zasięg swoich ataków path pozwala ograniczyć zakres cookie wybranego katalogu serwerze ograniczenie pełni funkcji związanej bezpieczeństwem ominięte atakującego dlatego udostępnianie wielu aplikacji poziomu jednej domeny najlepszym pomysłem w omawianych przypadkach problemu potencjalne błędy typu xss eliminacji powinno rozpocząć dbanie aplikację jednak wiedza temat możliwości atakującego dodatkowo podnieść naszą skuteczność zakresie
w docenić pracownika mając dużego budżetu rynek pracy pracodawców nadal wymagający trudno znaleźć swojego zespołu specjalistę a trudniej sprawić nowy pracownik zrezygnował przed hr owcami menedżerami stoi lada wyzwanie bardziej posiada niski budżet co zrobić maksymalnie zmniejszyć niepożądaną rotację pracowników w nagradzać pracowników dużego budżetu co podarować zamiast pieniędzy dzięki czemu członek naszego zespołu chciał odejść wszystkie sposoby poznasz najnowszym wydaniu hellonews persony grupy docelowe strategiczne podejście employer brandingu osoba szukamy procesie rekrutacyjnym posiadać cechy wcześniej opisanego kandydata idealnego jednak komunikat kierujemy większej grupy częścią potencjalny wymarzony pracownik czym różni grupa docelowa persony w dokładnie opisać grupę docelową jak zbudować komunikację uważać ramach działań employer brandingowych więcej temat nadgodziny chleb powszedni polaków z raporty randstad wynika rodaków zostaje pracy godzinach czego badanych osób pracodawca wynagradza ponadto istnieje powszechna opinia przepracowanie miesiącu godzin normę formy zapłaty formą nadużycia jak czas pracy wpływa zdrowie ile procent polaków zostaje dłużej pracy codziennie co mówią procedury więcej temat proste kroki efektywnego zarządzania firmą monika reszko psychologiem biznesu podstawie swoich letnich obserwacji obrazowo opisuje trzy podstawowe zasady prowadzenia biznesu w stworzyć autorytet jednocześnie budując dialog a autorytarny monolog jak osiągnąć postawione cele w prowadzić komunikację dobierać obowiązki budować relację oparciu mocne strony swoich pracowników ludzie pokochali swoją pracę więcej temat humor droga kreatywności innowacji wszystkie firmy szukają sposobów poprawę obszarze kreatywności nowych pomysłów różnych procesów stymulować wydajność zwiększać przychody nie wspominając kultura firmy staje bardziej interesująca potencjalnych kandydatów jak osiągnąć co musisz wiedzieć receptę podaje julie ann sullivan prelegentka liderka warsztatów konsultantka ds kultury autorka planu zaangażowania pracowników podstawowych elementów wywierania wpływu innowacji inspiracji więcej temat widełki płacowe nadal temat tabu chociaż jawność sprawiedliwość wynagrodzeń ostatnio gorącym tematem nadal bardziej teoria praktyka jak zacząć transparentnym publikować widełki wynagrodzenia ofertach pracy o etapach wprowadzania zmian najważniejszych momentach korzyściach idą opowiada magdalena rodzeń dyrektor ds personalnych region emea alight solutions więcej temat w docenić pracownika mając dużego budżetu rynek pracy pracodawców nadal wymagający przed hr owcami menedżerami stoi lada wyzwanie bardziej posiada niski budżet co zrobić maksymalnie zmniejszyć niepożądaną rotację pracowników co podarować zamiast pieniędzy dzięki czemu członek naszego zespołu chciał odejść więcej temat szef wymagający wyrozumiały recenzja książki kima scotta często dużym problemem organizacji komunikacja wewnętrzna zapewne wszyscy zdają sprawę ważności każdemu udaje powodzeniem wprowadzać nierzadko pracownicy odchodzą firmy szefa rosnąca liczba przedsiębiorstw wysokiej kulturze organizacji niska stopa bezrobocia częściej powodują pracownicy zmieniają miejsca czują szczęśliwi szansy wykorzystanie swojego potencjału stawiane pytanie zapobiec co charakteryzuje dobrego szefa jak zbudować zespole zaufanie czym radykalna szczerość więcej temat viii forum dyrektorów hr zgłoś swój udział sierpnia nowoczesne oblicze sektora hr mądre zarządzanie kultura organizacyjna podnoszenie efektywności motto kolejnej edycji wydarzenia forum dyrektorów hr odbędzie dniach października warszawskim hotelu renaissance warsaw airport na scenie wystąpi prelegentów tematy dotyczyć zarówno motywacji pracowników podnoszenia efektywności firmy budowania kultury organizacyjnej mądrego przywództwa wykorzystaniu analitycznych mocy hr rewolucji automatyzacji zarządzania czasem sprawdź tematy cię zainteresują więcej temat personal branding podstawa każdego rekrutera fundamentem kariery zawodowej każdego hr owca silna marka osobista odgrywa szczególną rolę komunikacji wewnętrznej zewnętrznej nawiązywaniu zawodowych relacji międzyludzkich jeśli rekruter odpowiednio buduje stanie mieć realny wpływ swój indywidualny sukces powodzenie całej firmy którą reprezentuje w odpowiednio kreować swój personal branding jakich elementów możesz pominąć więcej temat zawodowe vs prywatne przekraczasz granicę niewątpliwie wielu praca ważną częścią jednym pierwszych pytań zadajemy komuś kim spotykamy robisz zawodowe stanowi część naszej tożsamości jedną dróg wykorzystujemy wyrażania siebie jednak kochasz robisz ważne zachować balans między pracą a prywatnym pozwoli uniknięcie lęku separacyjnego czym lęk separacyjny związany pracą jak uniknąć niezdrowego nadmiernego stresu więcej temat jestem fanką disneya czekam niecierpliwie grudzień premierę frozen tak podskakiwałam ekscytacji oglądałam trailer oczywiście dostrzegam konserwatyzm bajek zachowawczość zmienia faktu uważam walt disney zrewolucjonizował przemysł kinematograficzny nikt odbierze czemu mówię ponieważ wizjonerstwo sięgało dalej prostu tworzenie chwytających serce historii postaci albo inaczej stworzył wynikiem przypadku to efekt między innymi systemu pracy wdrożył to pozwolił tworzyć innowacyjne rozwiązania paulina leja specjalistka spraw rekrutacji it employer brandingu neurosys uwielbia kontakt ludźmi relacje społeczne chce zastanawiać powinien wyglądać a następnie takim tworzyć misję codziennie realizuje hr owiec wyboru bardzo ceni podejście projektowe elastyczność pracy karierę zawodową rozpoczynała firmie outsourcingowej następnie skoncentrowała działalności software house jedną najważniejszych pożądanych cech naszych czasów innowacyjność ta chęć poszukiwania tworzenia nowych rozwiązań wiąże bezpośrednio kreatywnością nietuzinkowe niespotykane rozwiązania genialne swojej prostocie podbijają serca tłumów pozwalając kształtować rzeczywistość firma wprowadzi nowość rynek wiedzie prym pozycjonuje możecie trochę poczytać umysłach odbiorców zgarnia całą pulę wiernych fanów przykładem rozwiązań chociażby usługi przewozu wprowadzone uber a gra pokemon go często później grzyby deszczu pojawiają naśladowcy próbujący zarobić genialnym pomyśle pewnym stopniu udaje jednak zapisują kartach rynkowej historii złotymi zgłoskami również hr employer brandingu procesy kampanie docenianie wiele wiele innych elementów funkcjonują utarty czy najlepszy możliwych sposobów gorąco wierzę wiele stworzone niesamowity nieodkryty pomimo pewnych przyzwyczajeń funkcjonują naszej branży o małpach trwając schematach organizacji pracy wykonujemy najbardziej optymalny impulsem refleksji codziennym funkcjonowaniem eksperyment przeprowadzony g r stephensona badacz zamknął klatce małpek w klatce prócz zwierząt znajdowała drabina eksperyment polegał górze drabiny badacz kładł kiść bananów podopieczni mogli wejść spróbować zjeść haczyk polegał jakaś małpka wchodziła drabinę pyszne banany oblewana lodowatą wodą klapy suficie w końcu zwierzęta nauczyły wchodzić drabinę zaprzestały procederu wtedy badacz postanowił wykonać ruchy po pierwsze oblewał małp wchodzących drabinę po drugie wymienił jedną małp przebywała pory pokoju zupełnie nową znała realiów panujących klatce nowicjusz zobaczył szczycie drabiny wdzięczą banany razu postanowił sięgnąć wtedy pozostała grupa małp rzuciła zaczęła bić powstrzymywać wejściem współtowarzysze dokonywali każdym razem nowy podejmował taką próbę w końcu przestał wtedy naukowiec wymienił kolejną małpę pierwszego składu nową sytuacja powtarzała małpek doświadczyła oblewania została pokoju jednak nowych odważyła sięgnąć banany pomimo miały prawa wiedzieć pierwotnie rozsądnie sięgać jedzenie drabinie michalpasterski jest eksperyment uczy instynktach dostosowywania unikania zagrożeń z pewnością moglibyśmy pogratulować małpom zdolności przekazywania wiedzy potencjalnych zagrożeniach jest otaczająca rzeczywistość dynamicznie zmienia obecnie bardziej premiowanie szukanie alternatywnych rozwiązań albert einstein powiedział głupotą wykonywanie samych czynności samych warunkach oczekiwanie innych rezultatów teraz rzadko warunki niezmienne jak szukać alternatywnych rozwiązań na pomoc przychodzi cecha którą posiada szczyci chyba hr owiec kreatywność a jedną osób historii pobudzała swoją innych kreatywność wspomniany wstępie walt disney ale zanim kreatywność ogóle na podstawie definicji słownikowych ukuć następującą definicję kreatywności kreatywność proces umysłowy pociągający sobą powstawanie nowych idei koncepcji nowych skojarzeń powiązań istniejącymi ideami koncepcjami myślenie kreatywne myślenie prowadzące uzyskania oryginalnych stosownych rozwiązań mowa elemencie nowości idei skojarzeń powstałych kanwie pomysłów innych inna definicja kreatywności gotowość tworzenia nowych pomysłów miliony osób wpadły pomysł w kreatywności ważne szukanie nieoczywistych rozwiązań problemów oderwanie choćby chwilę ograniczeń wyjście typowy schemat działania myślenia co niezwykle istotne wielu ekspertów zajmujących twórczym myśleniem uważa kreatywność cechą ciągłą tzn posiada różnym stopniu analogicznie miejsce wzrostem niskim wysokim mieć mało kreatywności mieć na potwierdzenie słów przytoczyć historię wiem prawdziwa trafia ponoć dawno pewien ambitny szef firmy paliwowej zauważył swoich pracowników połowa stu podwładnych wykazywała niezwykłą kreatywnością dzięki pomysłom firma zarabiała więcej pieniędzy pozostali kreatywni grzeszyli efektywnością dobry szef chciał zwalniać połowy pracowników postanowił zatrudni naukowców zbadali pierwszą grupę dowiedzieli takiego robią czego mógłby nauczyć pozostałych pracowników zatrudnieni psychologowie mieli zadanie odkryć takiego robią pomysłowi pracownicy pomysłowi po dwóch miesiącach testów wywiadów badań okazało wyjątkowa grupa pracowników zasadzie niczym różni pozostałych w zasadzie znaleźli jedną różnicę kreatywni pracownicy wierzyli faktycznie tacy podczas pozostali uważali kreatywne osoby morał opowiastki prosty innowacyjnym kreatywnym próbować robić wierzyć przyniesie efekty a historia wiem prawdziwa przekonuje stosując przesłania najprawdopodobniej wejdzie schemat samospełniającej przepowiedni zwłaszcza wynika umiejętność którą wyćwiczyć warto mieć pamięci powiedział frank zappa umysł spadochron nie działa otwarty kreatywność disneya celem walta disneya maksymalne wykorzystanie kreatywności pracowników współpracując ludźmi zdawał sprawę mózg lubi optymalizować swoją pracę wpadać powtarzalne schematy jeśli dostaje zadanie wymyślić niesamowitego najpierw chwyta rozwiązań zna oczywiste jako przykład podam warsztaty design thinking organizowane google współpracy pfr em zadań narysowanie największej ilości kreatywnych skojarzeń jabłkiem określonym czasie kolejno ułożonych kwadracikach zadanie wykonywaliśmy osobowych grupach mimo osoby różnych branż specjalizacji pierwsze trzy cztery rysunki każdej grupie zbieżne drugim problemem kreatywności małp instynkt pokazany wcześniejszym eksperymencie poczucie czegoś da uniknąć dwóch zagrożeń skonstruował metodę pokojów o trzech pokojach pokój pierwszy pierwszy pokój nazywany pokojem marzeń tu miejsce miała nieskrępowana burza mózgów tworzenie pomysłów premiowana wyobraźnia nieważne pomysł absurdalny szalony niemożliwy słów niemożliwy pokoju założenie możliwe na przykład spada zaangażowanie pracowników co zrobimy zaprosimy abrahama lincolna wygłosił mowę motywacyjną okej lecimy dalej każdy pracownik otrzyma służbowy samochód pomysł pracownicy pracować godzin tygodniu samą pensję doskonale w pokoju miejsce strach negatywne emocje każdy pomysł powinien zapisany komentowany nie miejsca krytykę zastrzeżenia jeżeli uważamy kierunek słuszny powiedzieć super pomyśl zrobilibyśmy trochę inaczej dzięki inspiracji pomysłów innych powstają kolejne kreatywne rozwiązania pokój drugi może was zaskoczę zaproszenie abrahama lincolna baaaaardzo trudne zrealizowania walt disney uważał wcześnie podcinanie pomysłom skrzydeł zabijanie twierdził przeoczyć pomysł wymaga nutki racjonalizacji albo całego wiadra drugi pokój nazywany pokojem logiki powstał uporządkować powstałe pomysły ocenić kątem stworzenia spójnej logicznej całości o chodziło pomyśle czy chodzi mowę autorytetu zastanówmy autorytetem firmie taką mowę przedstawić samochody wszystkich czy naszym pracownikom potrzebne dodatkowe benefity czy problem faktycznie zmotywuje a dodatkowe benefity faktycznie jesteśmy stanie pozwolić w disneya uwzględniono wszystkie szczegółowe wydarzenia cechy poszczególnych postaci w hr zastanowić budżetem czasem zasobami ludzkimi przeprowadzania projektów pokój trzeci kiedy stworzy jakiś pomysł ciężko zauważyć drodze samokrytyki braki przekonanym genialności zwłaszcza poświęciło czemuś pracy serca zwłaszcza biznesu czasem zejść ziemię mocniej zastanowić zrobić czemu powinno robić takie zadanie pełni trzeci pokój nazywany pokojem krytyki tu ograniczeń skupiać niedociągnięciach lukach pomysłu zagrożeniach wszystko pory zostało stworzone oceniane szczerego serca oczywiście doceniać pomysł faktycznie genialny umówmy rzadko dobre mogło lepsze pointa metoda trzech pokojów stworzenie trzech stanów trzech rodzajów nastawienia oczywiście najłatwiej realizują różne zespoły wykorzystaniem naturalnych talentów można poszczególne podejście wdrożyć własne działanie pozwalając czas nieskrępowanej kreacji wyboru najlepszych pomysłów tworzenia planu realizacji przejść podejścia krytycznego często firmach pierwsze podejścia stronie pracowników a trzecie stronie zarządu warto pomagać kształtować mocno krytycznego podejścia wyręczyć z pewnością przedstawienie pomysłu wypadnie bardziej profesjonalnie wskaże razu zagrożenia możliwe rozwiązania czy jedyna taka metoda oczywiście na takim eksperymencie umysłowym tworzenia konkretnych zadań umysłu koncentrować poszczególnych obszarach kolejnych krokach podejść wyników swojej dotychczasowej pracy podchodzi design thinking a dokładnie empatyzacji definiowania problemu szukania rozwiązań testowania prototypowania jest metoda projektowania pomaga przeciwieństwie tradycyjnego podejścia projektowego kładącego nacisk poszukiwanie jednego prawidłowego rozwiązania odpowiedzi pytanie what is right szuka całej puli różnorodnych możliwych odpowiedzi pytanie what works skutecznie stworzyć adekwatny projekt dsschool stanford edu inną metodą metoda kapeluszy edwarda de bono polegająca spojrzeniu dany problem sześciu różnych perspektyw m in poprzez emocje fakty podejście optymistyczne pesymistyczne ccnews warto podkreślić wszystkie techniki powodzeniem wykorzystywać zarówno pracy zespołowej samodzielnym szukaniu rozwiązań problemów po co daje podejście niesamowite nietuzinkowe rozwiązania przewidzenia metod zastosuje więcej przykładów sposobów rozwiązywania problemów a konkretnie podejść problemu problemu projektowego pisałam i dalej podtrzymuję stosując podejście dojść zaskakujących rezultatów takie metody pozwalają ukierunkować umysł kreatywne myślenie idzie innowacyjność nietuzinkowe rozwiązania pozwala tworzyć lepsze wewnętrzne rozwiązania fantastyczne kampanie wizerunkowe nietuzinkowe rekrutacje dlatego zachęcam was wykorzystania takiego podejścia przetestowania praktyce do dzieła posiadasz zespole ludzi zaangażowanych szukają inspiracji otwarte głowy lubią eksperymentować to najważniejsze cechy muszą posiadać pracownicy o wiele wywołać owocną dyskusję pozytywnie nastawieni zadań zmian skutecznym narzędziem burza mózgów wpaść genialny pomysł a przypadku końca posiadasz pełni zaangażowane osoby zespole niezależnie okoliczności przeprowadź kreatywną dyskusję dała najlepsze oczekiwane rezultaty poznaj trzy podstawowe zasady ci pozwolą przeglądając kolejne wydanie hello news kroki kreatywności rozbudzić swój zespół hello news r just geek it ewaluacja pracowników sposoby mierzenia rozwój pracowników postępy pracy zwiększanie efektywności ważne zarówno pracodawców samych pracowników ocena postępów ważna obydwu stron pozwala określenie poziomu zadowolenia współpracy określić cele najbliższy czas jednak wiarygodnie dokonać oceny zatrudnionych osób menedżerowie bądź pracodawcy powinni kierować zestawem jasno sprecyzowanych kryteriów o czym mowa więcej temat czy studenci chcą pracować studia czas dużej mierze decyduje przyszłości młodych ludzi jest wymagający finansowo okres przeprowadzka rodzinnego domu wynajem mieszkania opłaty stałe dojazdy opłacanie a dopiero rozrywka imprezy poznawanie skąd brać pieniądze skupić nauce połączyć studia pracą okazuje studenci problemu znalezieniem pracy większych miastach gdzie najchętniej składają cv które zawody interesują więcej temat rynek pracy grozi w polsce nadal względu tendencje demograficzne możliwy spadek wzrostu gospodarczego obecnie luki rynku pracy zapełniają pracownicy wschodu co zapobiegawczy przestanie sprawdzać ministerstwo inwestycji rozwoju przyznaje r pracodawcy mieli problemy obsadzeniem piątego stanowiska pracy więcej temat pracownik długim stażem niski poziom zaangażowania zapobiec niewątpliwie obserwuje zależność między stażem pracy a zaangażowaniem najczęściej pracownicy pracują najdłużej wykazują mniejsze zainteresowanie zadaniami w literaturze nazywa pracownikami więźniami co powodem takiej sytuacji w zapobiec więcej temat jak marketing pomóc hr owcom employer brandingu każde przedsiębiorstwo stara wizerunek całej organizacji spójny pozytywnie odbierany jednak warto pamiętać odbiór głowach zebranej społeczności stały najmniejsze wydarzenie skutkować negatywną zmianą jak osiągnąć przemyślane komunikaty wzbudzały pożądane postawy emocje odbiorców fundamentem synergia dziedzin hr marketingu pr w skutecznie więcej temat czy emigranci wrócą ojczyzny raport nbp co prawda ostatnich latach emigracja nadal utrzymuje wyższym poziomie przyjazdy kraju częściej osoby wyjeżdżające poszukiwaniu pracy deklarują chęć powrotu ojczyzny czy zwiększy podaż pracy za jaką wysokość wynagrodzenia netto emigranci zdecydowaliby podjąć pracę polsce więcej temat kroki kreatywności rozbudzić swój zespół posiadasz zespole ludzi zaangażowanych szukają inspiracji otwarte głowy lubią eksperymentować to najważniejszy czynnik muszą posiadać pracownicy o wiele wywołać kreatywną dyskusję pozytywnie nastawieni zadań zmian skutecznym narzędziem burza mózgów jak przeprowadzić owocnie więcej temat rekrutacja senior developerów zdobyć największe talenty rekrutacja branży it należy najłatwiejszych programiście pasjonaci najczęściej swój pierwszy pasek kodu piszą nastolatkowie w związku mówimy programiście chciałby ubiegać stanowisko seniora ile doświadczenia powinien mieć człowiek określić takim mianem co rekruter powinien brać uwagę więcej temat zbyt obowiązków zbyt mało czasu wystarczy dobra organizacja stanowiska kierownicze wiążą odpowiednią ilością obowiązków oprócz swojego czasu managerowie odpowiadają organizację czasu pracy innych pracowników kluczem efektywnych działań zarządzanych czasie dobra organizacja w osiągnąć więcej temat zestaw najciekawszych wydarzeń branży hr jeśli masz czasu wyszukiwać najbardziej interesujących konferencji livestreamów spotkań branży hr masz szansę dowiedzieć wszystkiego miejscu jacek krajewski swoim newsletterze opowiada bezpłatnych płatnych wydarzeniach będziesz mógł wziąć udział przełomie sierpnia września października więcej temat miliarda złotych tyle ostatnim kalendarzowym polskie przedsiębiorstwa wydały benefity pracownicze to spora suma ciągle wzrasta zwłaszcza zestawi informacją przedsiębiorstwach powyżej osób jednego pracownika przypadało benefitów przyczyn galopującego rynku pozapłacowych pewnością wskazać wiele pytanie odnaleźć budżet ograniczony i stosunkowo niemałe bądź pieniądze realnie podnieść efektywność swoich pracowników paulina leja specjalistka spraw rekrutacji it employer brandingu neurosys uwielbia kontakt ludźmi relacje społeczne chce zastanawiać powinien wyglądać a następnie takim tworzyć misję codziennie realizuje hr owiec wyboru bardzo ceni podejście projektowe elastyczność pracy karierę zawodową rozpoczynała firmie outsourcingowej następnie skoncentrowała działalności software house zacznijmy początku benefity pracownicze inaczej pozapłacowe najprościej mówiąc pracodawca oferuje pracownikom wynagrodzeniem pieniężnym benefity dzielą prawo wymaga dobrowolne te obowiązkowe przykład pokrycie kosztów badań pracowniczych zakup okularów korekcyjnych zapewnienie odzieży ochronnej napojów posiłków regeneracyjnych konkretnych grup zawodowych natomiast dodatkowe pracodawcy prześcigają ostatnich latach przykład karty sportowe owoce pracy znaleźć eterze głosy studnia benefitów sięgnęła dna wierzę nielimitowaną kreatywność pracodawców czy benefity ogóle sens w andrew t jebb purdue university wraz swoim zespołem przeanalizował gallup world poll badanie miliona respondentów krajów dzięki któremu wskazał minimalną pensję odczuwamy satysfakcję radość ciekawe maksymalną kwotę przekroczeniu jakość spada minimalna kwota pozwalająca odczuwać spokój przyszłość wynosiła złotych rocznie maksymalna zaliczamy zniżkę satysfakcji rocznie zagłębiając badanie odnaleźć poziom wynagrodzenia uszczęśliwia mieszkańców europy wschodniej mianowicie tysięcy dolarów nieco tysięcy rocznie oznacza statystyczny polak najszczęśliwszy zarabiając złotych miesięcznie uważać kwoty przekroczyć wyniki oparte między innymi kosztach poszczególnych krajach oznacza obniżają koszty przyczynić wzrostu zadowolenia oczywiście ktoś zarabia mniej najszczęśliwszym sobą badania dotyczą wyłącznie aspektu wynagrodzenia a statystyka statystyka drugim moment nieco ważniejszym argumentem fakt obecnie benefity stały wymaganiem rynkowym pracownicy oczekują stanowić argument decydujący zmianie pracy ostatnio moim feedzie linkedin pojawił zestaw najdziwniejszych historii rekrutacyjnych kandydacie odrzucił pracę odpowiadała marka samochodu służbowego wszystkie warunki odpowiednie z kolei znajomy znajomego uzależniał przyjęcie oferty pracy zdalnej dowozić domu kosz owoców przyszłej firmie owocowe a pokrzywdzony to sprawia standardowe benefity prywatna opieka medyczna karta sportowa czasem wystarczają a pracownicy czekają dodatkowe dowody firma dba zabiega co zależy stałym podnoszeniu wynagrodzeń przeznaczamy dodatkowe benefity mieści budżecie dany rok można wprowadzić benefity darmo kilka złotych jakie o zdaję sprawę niejednokrotnie przekonanie zarządu osób zarządzających firmą zmian trudne dlatego postarałam da wyszukać was badania możecie użyć argumentując racje darmowe benefity elastyczne godziny pracy każdy lubi wolność możliwość dostosowania swojego rytmu dnia własnych potrzeb niewątpliwie cennym benefitem są osoby rano nogach tą otwierają oczu dodatkowo każdego dotyczą różne obowiązki wydarzenia wizyta lekarza urzędzie wyjazd okoliczności wcześniejsze przyjście wyjście pracy wygodne a daj boże wyskoczy tygodniu spotkanie posiedzi trochę długo warto zadać pytanie lepiej odespać przyjść trochę później punktualnie bezproduktywnie spędzić czas obserwując miarowo przesuwają wskazówki zegara faktem elastycznych godzin da ale pewno ułatwiają work life balance pozwalając traktować pracę jedną aktywności ciągu dnia którą zorganizować jest tyle ważne badaniach polskich studentów absolwentów prawie połowa uważała praca powinna zmuszać rezygnowania innych rzeczy swoim elastyczne godziny pracy pomóc z kolei badaniu firmy michael page młodych chciałoby mieć wpływ wybór godzin wykonywać obowiązki natomiast raporcie deloitte deloitte millennial survey tysiąca przedstawicieli pokolenia y krajów polski jasno zaznaczyło elastyczna praca kluczowych elementów hcmdeck com oczywiście rozwiązań idealnych zwłaszcza zmiana fixed office hours elastyczne godziny wprowadzić nutkę chaosu do zagrożeń wprowadzaniu elastycznych godzinach przykładowo wzbudzić poczucie braku kontroli przełożonych pracownikami faktycznie przepracowali dodatkowo wkraść chaos komunikacyjny brak możliwości spotkania poszczególnymi osobami przychodzą kilka godzin innych z drugiej strony problemów rozwiązania po pierwsze moich doświadczeń wynika daje ludziom odpowiedzialność kontrolę swojego czasu sumienniej przykładają kontrolują godziny wejścia pewno wyrobić minimum godzin jeżeli kogoś przekonuje zastosować rozwiązanie spotkałam kartami rejestrującymi godziny wejścia wyjścia wchodzimy grunt dodatkowej inwestycji rekomenduję spróbować wolnej ręki pracowników w przypadku problemów komunikacyjnych nauczyć wspólnego planowania spotkań organizacji pracy wprowadzić core hours stałe godziny pracownicy muszą przebywać biurze praca zdalna z niedawnego wykresu wynika drugi darmowy benefit docenią pracownicy dla millenialsów elastyczność wyraża pracę zdalną nie momencie kompletna abstrakcja pracowników polsce przyznaje możliwość realizowania swoich obowiązków zdalnie biurem co trzeci badany takiego udogodnienia korzysta minimum cztery razy miesiącu co więcej możliwość pracy domu doceniana polskich pracowników wskazało ankietowanych badaniu michael page natomiast zgodnie wynikami badania przeprowadzonego profesora uniwersytetu stanforda nicholasa blooma pracowników stwierdziło bardziej wydajni pracując zdalnie oznacza większa połowa pracodawców daje możliwość jaką praca odległość warto nadążać funkcjonującymi trendami w powyższym badaniu respondentów przyznało praca zdalna pozytywnie wpływa zachowanie równowagi między prywatnym a zawodowym warto przyznać ankietowanych stwierdziło rozwiązanie negatywnie oddziałuje harmonię mając uwadze dobro pracowników warto spróbować wizji pracę zdalną wiele na rynku spotkać opcje określonym wymiarem pracy funkcjonującym dzień dni tygodniu słyszałam są firmy dają możliwość obowiązek pracy zdalnej przewidują możliwość pracy zarówno biurze dowolnego miejsca taką firmą netguru istnieją przedsiębiorstwa oferujące pracy zdalnej biuro czasem wpaść funkcjonujące biura faktem osób tyle preferencji jakim stylu chcą pracować znam osoby uznają pracy zdalnej wybierają oferty wyłącznie zdalne uważają dni absolutne minimum choć dowolność wyboru pewnością najwygodniejsza wprowadzając firmie rozwiązanie najbezpieczniej zacząć eksperymentalnego dnia tygodniu jeśli sprawdzi pomyśleć testowym zwiększeniem wymiaru dobrym zakomunikowaniu swoich intencji pracownicy pewnością obrażą workacje nazywane pracowakacjami angielsku workation koncept idei idealnie pracę zawodowe polegający pracownicy pracować zdalnie dłuższy okres tygodnie miesiąc taką opcję większość wykorzystuje przykład wynajęcie domu dobrym wi fi hiszpanii pracy spędzać czas plaży taki pomysł wskazaniem godzinach pracownik dostępny sztywnych godzinach biurowych core hours szybko okazać podróż drugą stronę globu idealnym rozwiązaniem pozwala zmienić otoczenie nabrać trochę dystansu jednocześnie rezygnując wykonywania obowiązków oczywiście kolejny krok wersja pracy zdalnej ktoś chciałby prostu popracować miesiąc domu ale benefit odpowiedniej dozie zaufania bezkosztowy a atrakcyjny płatną wersją workacji zabranie wszystkich pracowników wyjazd taką opcję wybrał zarząd platformy cloudsider razy zabiera zespół słoneczne plaże najpiękniejszych europejskich wysp pracują tydzień inna historia benefity prawie darmowe dziecko pracy pracownik zaplanował ważne spotkanie biurze a okazało zaopiekować dzieckiem czasem praca zdalna rozwiązuje wszystkich problemów warto zakomunikować rodzicom kryzysowych sytuacjach przyprowadzić dziecko pracy jest prawie darmowy benefit siłą rzeczy dziecko wprowadzi trochę chaosu braku skupienia części pracowników z drugiej strony rozwiązanie dać poczucia ogromnego wsparcia pracodawca udziela pracownikowi przecież musiał zgodzić co ciekawe rozwiązanie wspierane ministerstwo rodziny pracy polityki społecznej czym przekonać możecie z badań przeprowadzonych firmę pracuj raport rodzice pracy pełen etat wynika znacząca większość rodziców wyraża przekonanie chciałaby mieć zapewnione przedszkole pracy a duże firmy korporacje zdecydować własne firmowe przedszkole oddziałem przy takim modelu taka placówka przeznaczona pracowników danej organizacji w polsce rozwiązania zdecydował między innymi infosys poland fabryki mebli forte s a ostrowi mazowieckiej suwałkach też ciekawym pomysłem byłoby stworzenie przedszkola biurowcu pociechy pracowników różnych firm mogły integrować różnorodnym przyprowadź zwierzę pracy przyjaciół zwierząt pracowników niemiara można wyjść naprzeciw pozwolić zwierzątkom przychodzić pracy czy opłaca na stronie puriny znajdziemy informacje zwierzęta obniżają poziom stresu zwiększa wydajność zaangażowanie powołują poniższe dane purina poszczególne siedziby gigantów amazon google salseforce zdecydowały rozwiązanie również wework chwaliło wprowadzeniem dnia bring your pet work linkedin com faktem fanem zwierzątek miłośnikom wydaje zupełnie nieprawdopodobne ale serio dlatego radziłabym pójść głosem wework zdecydować dzień zobaczyć sprawdzi pozwoli alergikom zwierzętami prostu przebywają dnia pracować zdalnie ewentualnie przeznaczać konkretne części biura zwierzęta przebywać pamiętać wyedukowaniu pracowników pracy przynieść futrzaki faktycznie pozwolą pracować przypadku dzieci należy godzić pewną dozę dekoncentracji oddanie inicjatywy możliwość zorganizowania akcji charytatywnej kolejnym prawie darmowym benefitem zorganizowanie konkursu przeprowadzenie akcji charytatywnej pieczenie sprzedawanie ciast dom dziecka zbieranie koców karmy schroniska przekazywanie cegiełki chorego pozwól pracownikom wspólnie wybrać cel razem zrealizować to da jednej strony możliwość wpływu rzeczywistość poczucie odpowiedzialności z drugiej wszyscy podkreślają człowiek najlepiej czuje pomóc innym znaczący dopływ endorfin poczucie zjednoczenia wspólnej inicjatywie brzmi fajny zysk cenę godzin pracy danego pracownika integracje planszówki jednym elementów najlepszej pracy lubisz spędzać czas współpracownikami o robimy neurosys poczytać możesz z drugiej strony budżety integracje bywają ograniczone wtedy dobrym rozwiązaniem planszówki biurze kosztem trochę więcej prądu wody a przeprowadzony turniej budzić emocje kilka następnych dni benefity kilka złotych osobę toster firmie zakup tostera opiekacza koszt złotych takie rozwiązanie daje większe możliwości przekąskowe przerwie sprawia nigdzie wychodzić zamawiać jedzenia zjeść ciepło sobą wzięło dodatkowo doświadczenie neurosys pokazało niektórych prostu ekscytujące dające radości rozwiązanie w gestii pracodawcy leży dodatkowy zakup chleba sera przecież obowiązkowy a wspomniałam opiekacz prostu cieszy już mówiąc gofrownicy spotify netflix wyboru koszt spotify złotych osób niecałe złotych osobę netflix złote osoby złotych osobę konkurujące hbo go a wchodzący amazon prime kosztować złotych ceny podawane nadal euro jak widać astronomiczne kwoty faktem wchodzą skład kosztów stałych a sporadycznych wydatków z drugiej strony ciekawym niedrogim pomysłem benefit wyboru wspólna pizza wspólna pizza idealna odpowiedź ucieszyć pracowników kilkanaście złotych można połączyć spotkaniem wewnątrz firmowym pracownicy pewno skoncentrują przyswoją przekazywane informacje wewnętrznym meet upem wnosił wartość dodaną rozwój uczestników dzięki uciec kupowania pracownikom całych posiłków a zgromadzić wspólnej przestrzeni integracja pub quiz o zaletach integrowania chyba rozwodzić wynajęcie osoby zawodowo przeprowadza pub quizy wydatek miara jednak poproszenie pracownika back office przygotował pub quiz stanowić osoby miłą odskocznię kilka godzin pracy wspólna grywalizacja pewno wynagrodzi trud drobne upominki czy warto celebrować naprawdę każdą okazję pewnie każda przesada niezdrowa z drugiej strony warto umilać pracownikom na przykład walentynki najbardziej firmowe słońcem a drugiej strony ciężko kompletnie zignorować i neurosys zdecydowaliśmy każdemu podarować pralinkę kształcie serca stworzyć kartki podobnie sprawa muffinką babeczką innymi drukowanymi kartkami balonikami helem koszt sumaryczny kilka złotych uśmiech twarzy pracowników bezcenny benefity wcale drogie letnie piątki letnie piątki rozwiązanie sezonie wakacyjnym skracają liczbę godzin ostatni dzień tygodnia pozwalając pracownikom szybciej wrócić domu z badania przeprowadzonego firmę badawczą gartner wynika politykę letnich piątków wprowadziło amerykańskich firm różnych branż porównania to całkiem imponujący wynik pokazywać trend niedługo stać standardem flynn zaiger dyrektor generalny agencji marketingowej online optimism daje swoim pracownikom cztery półpiątki wyboru sezonie letnim podkreśla letnie piątki zmniejszają liczbę godzin pracy tygodniu powodują wzrost morale rekompensują czas niespędzony biurze większą motywacją dodatkowo rozwiązanie sprawia produktywność pracowników zachowana a wzrasta pozwalając osiągnąć lepsze wyniki dzięki strata firmy de facto następuje oczywiście niestety fikcja przypadku rozliczania bezpośrednio godziny spędzone biurze projektem dodatkowe dni wolnego podobnie letnimi piątkami dodatkowy urlop możliwość sporadycznego wyjścia wcześniej ukończonej szybciej pracy nieoceniona wartość pracowników brak konieczności siedzenia pracy samego faktu przebywania sprawia nikt czuje marnuje czas a samym poczuje rozwija brak restrykcyjnej kontroli wczoraj wyszedłeś minut wcześniej sprawia duża część pracowników potrzeby zostanie pół godziny dłużej ekstremalną wersją benefitu wprowadził netflix ogóle przewiduje urlopu i oznacza pracownicy biorą wolnego po prostu rejestrują czasu samo sprawdzają pracuje jobs netflix com gojtowska com to samo dotyczy skrócenia tygodnia pracy dalekoidąca ingerencja organizację pracy nowozelandzka firma perpetual guardian wprowadziła rozwiązanie dniowego tygodnia pracy codziennego krótszego standard zachowaniu pensji względu zyski przewyższają straty dodatkowe dni wolnego wyjście naprzeciw czego pracownicy najbardziej czasu siebie rodziny praca skutecznie pochłania rozsądne dysponowanie dodatkowymi dniami wolnego samo letnie piątki zwiększają produktywność pozwalają pełne docenianie pracodawcy zaufanie zaufanie chyba najważniejszy najtrudniejszy benefit wprowadzenia nie brzmi naszej podstronie wolnych ofertach pracy wymieniony innych korzyściach pracy firmie jednak zaufanie podstawa pozwalać pracownikom pracować zdalnie przyprowadzać dzieci zwierzęta pracy a zgodzić wyszli trochę wcześniej kontrolowania każdej minuty to wiara chcą wykonywać swoją pracę najlepiej a manager odpowiadają kiedy brakuje zaufania firmie przerażać nierealnym wymysłem jak zaczynałam pracę software house ie opowiedziałam cioci pełni elastyczne godziny pracy przychodzić wychodzić dowolnych porach nikt kontroluje czasu deklaruje spędziło pracy ciocia przerażeniem wywróżyła rychły upadek firmy wiecie firma dalej funkcjonuje a pracując zauważyłam nikogo traktował wybiórczo zegarek taka moc przekazywania odpowiedzialności a zabierania i benefit najmocniej powyższych wierzę tak widzicie mnóstwo możliwości sprawić miejsca pracy lepsze dotychczas powyżej zaprezentowana lista pomysłów oczywiście otwarta budżet a niebo limitem zachęcam was burzy mózgów waszych firmach nieustannie podnosili efektywność swoich pracowników poprzez motywację budowanie fajnego miejsca pracy media pracuj rp innpoland prawo forbes forbes opracyzdalnej porady pracuj fortune com businessinsider com polityka w czasach przeżywamy istny renesans nauki danych patrz model wydaje każda firma zatrudnić data scientist identyfikacja przyciągnięcie zatrudnienie utrzymanie odpowiedniego naukowca większym wyzwaniem przewidują menedżerowie hr dzieje nauka danych złożoną wielodyscyplinarną dziedziną małą aczkolwiek zróżnicowaną pulą talentów zatrudnienia a znalezienie odpowiedniego kandydata wymaga starannego połączenia przygotowań przemyślanego procesu rekrutacyjnego zatem powinien wyglądać proces rekrutacji data scientist dotrzeć zatrudnić najlepszych mateusz bosek founder ceo hubranch dyrektor polskiego oddziału firmy matic dubaju były programista letnim doświadczeniem branży it zdobyte bogate doświadczenie relacjach regionami europy zachodniej bliskiego wschodu doprowadzić hubrancha pozycji lidera budowaniu skalowalnych zespołów wewnętrznych klientów całego polsce granicą jego wizją uczynienie hubranch wiodącym centrum innowacji polsce zbudowanie globalnego kampusu firmy różnych rynków mogły pracować dachem istotną rolę odegra ai zanim przejdziemy zacznijmy podstaw niezależnie jesteś założycielem startupu menadżerem ds rekrutacji musisz pewny szukasz odpowiedniej osoby data science rozległa dziedzina a obszar objęty inną rolą aby przedstawić weźmy lupę przykładowy projekt wykorzystanie machine learning klasyfikacji obrazów tak działają m in tripadvisor foursquare yelp miliony zdjęć umieszczane aplikacjach każdego dnia posortowanie uzyskanie wglądu wewnątrz konkretnej restauracji trudne wszystkie załadowane zdjęcia należą samej kategorii zdjęcia jedzenia budynku restauracji zewnątrz holistyczna ocena wyglądu restauracji wymaga różnego rodzaju zdjęć w takiej sytuacji użyć image recognition processing automatycznie kategoryzować obrazy należą poszczególnej kategorii dobrze przetrenowany algorytm stwierdzić zdjęcie pokazuje restauracje wewnątrz zewnątrz jedzenie serwowane data scientists tworzą model pomóc komputerowi wskazać drogę wykonać zadanie mogą zastanowić jakiego rodzaju danych potrzebowali ręcznie oznaczonych zdjęć słów kluczowych podpisach zdjęć jest zazwyczaj zadanie należące doświadczonego naukowca seniora zarządzają danymi początku końca zajmują wszystkimi naukowymi problemami związanymi nauką danych wyboru algorytmów projektowania inżynieryjnego data engineers tworzą systemy pozyskiwania przechowywania wszystkich danych obrazowych a implementują niektóre algorytmów ułożonych data scientists jest zazwyczaj rola osób silnymi technicznymi umiejętnościami znać teorii matematycznych statycznych bądź znają zasad funkcjonowania branży robią projekt data analysts wyszukują przedstawiają biznesowe konsekwencje wprowadzanych zmian pytania muszą odpowiedzieć czy zmiana podoba użytkownikom ile więcej ruchu wygenerowała aplikacja stronia dzięki ostatniej zmianie następnie przekazują znalezione informacje dalej rola zazwyczaj zajmowana juniorów data science osoby stanowiskach kierowniczych biznesie uczą przedstawiać obserwacje podstawie danych statystycznych jeśli upewniłeś kogo potrzebujesz projektu następnym krokiem znalezienie wyjątkowych ludzi zasilą twój zespół ekspercką wiedzą doprowadzą projekt szybciej szczęśliwego końca jak pozyskać najlepszych wcześniej wspomniałem znalezienie odpowiedniego kandydata wymaga starannego połączenia przygotowań przemyślanego procesu rekrutacyjnego przedstawię ci proces złożony pięciu prostych kroków złap potrafisz po pierwsze odnaleźć talenty wiele firm popełnia etapie błąd wprowadza chaos organizacji kosztuje standardowo czas pieniądze tym błędem szukanie kandydatów dopiero potrzeba ktoś zaraz zapyta hej dlaczego miałoby inaczej jest popyt podaż tak prawda popyt wcześniej przewidzieć podjąć kroki odpowiednio wyprzedzeniem sieć kandydatów rozszerzać cały czas i chodzi wpisywanie linkedinie frazy data scientist robienia baz excelu tworzenie naturalnej sieć kontaktów kulturę organizacyjną zachęcanie pracowników uczestnictwa różnych eventach meetupy spotkania branżowe imprezy towarzyskie opowiadania swojej pracy projektach uczestniczyli uczestniczą nic buduje twojej marki pracodawcy marketing szeptany jeśli zespół czuje wewnętrzną potrzebę dzielenia wiedzą ułatw proces umożliwienie stworzenia prezentacji godzinach pracy współpracy innymi członkami zespołu bycie otwartym swoją pracę a zwłaszcza napotkane problemy projekcie sprawia cała społeczność czuje zaangażowana a następnie bardziej chętna dołączyć pojawi okazja uwierz interesuje naukowców napotykane problemy newsletter stronie careers szukasz obecnie ludzi swojego zespołu projektu pozwól chętnym zostawić kontakt formie cv oprócz tradycyjnych form rekrutacji targi pracy wynajęcie head hunterów zamieszczenie ogłoszenia portalach justjoinit należy pamiętać data scientist osoby doświadczone branży generalnie wiele opcji pracy wyboru zatem niejednoznaczny opis stanowiska dostanie drugiej szansy idąc dalej połączenie promocją docieraniem potencjalnych kandydatów linkedin dzisiejszych czasach opłaca testować bardziej niestandardowe proaktywne metody organizacja własnego meetup konferencji data science dotyczącej konkretnego obszaru analiza konsumenta e commerce dzięki nieustrukturyzowanymi zbiorom danych oczywiście przykład najlepiej tematyka skupiała obszarze istotny planowanym projekcie aktywne uczestnictwo istniejących meetup własne wystąpienie spotkania innymi prelegentami organizacja własnego data hackatonu wybieranie kandydatów spośród uczestników ogłoszenie konkursu przeanalizowanie próbek danych rozwiązanie istniejącego problemu miej względzie konkurs raczej przyciągnie seniorów szukanie kandydatów projektach open sourcowych wielu dobrych naukowców posiada personalne strony internetowe chwalą ostatnimi osiągnięciami pre screening jest zazwyczaj kilka prostych pytań dotyczących ogłoszenia motywacji zaaplikowania po wypełnieniu formularza zazwyczaj prosi dane kontaktowe rzadko cv potrzebne dopiero następnych etapach ten etap opcją dodatkową niektórzy twierdzą przydatny pozwala zredukować ilość nadesłanych formularzy celu odsiania ludzi końca przekonani oferty jakość ilość samym oszczędzić czas osób odpowiedzialnych rekrutacje zoptymalizować dalszy proces rekrutacji drudzy kolei twierdzą należy etap pominąć uprościć proces podanie formularza kontaktowego to oszczędza cenny czas najważniejszym powodem dokonywać wstępnego sprawdzenia usunięcie ogromnego początkowego błędu wielu niesamowicie utalentowanych kandydatów miało doświadczenia związanego rekrutacją oznacza przegrywasz odrzucając wstępie ukryte talenty zaciekle rywalizujesz kandydatów wyglądają papierze wszyscy inni chcą tech challenge kandydaci zapraszani wykonania niewielkiego wyzwania zawiera pewne cechy charakterystyczne pracy którą musieli wykonać ma formę mini kaggle wykonywanego kandydatów zdalnie przykładowy test znaleziony internecie docs google com document w trakcie całego procesu kluczowa transparentność kandydaci wykonali zdania poprawnie informowani ci wykonali zadanie poprawnie wiemy przejdą następnego etapu informowani wyprzedzeniem dostają informację ilu kandydatów pozostało ilu przejdzie posiadamy taką informację podczas oceny wyników starać unikać bądź bądź nieświadomych uprzedzeń kandydat ka nazwa uniwersytetu dobra istotne wcześniejsze zdefiniowanie kryteriów oceny zapomnieć jakimś wymiarze oceny przeceniać innych co istotne raczej powinno oceniać kandydatów podstawie kodu podstawie organizacji pracy a szczególności zdolności przekazywania danych kandydaci mocni aspekcie słabi innych zazwyczaj wybierani układając pytania weź uwagę praktyczność przeznacz tyle czasu pytania dotyczące konkretnego obszaru zajmują czasu rzeczywistości pytania dot modelowania powinno zająć całego testu realistycznie odsetek czasu naukowcy spędzają wybierając optymalizując modele wywiad f2f tu spotykam dwoma podejściami jedno tradycyjne ocenianie zadawanie pytań drugie rzadziej spotykane spotkanie wprowadzenie działalności firmy poznanie motywacji kandydata tradycyjne interview powinien zająć godzin interview najczęściej składa rozmowy obejmującej aspekty znajomość modeli statystycznych matematycznych programowania modelowania algorytmów wizualizacji danych zachowanie kandydata dopasowanie kultury organizacyjnej rozwiązywanie problemów trochę pamiętać wybierać skupiać aspektach największe znaczenie branży firmy projektu przydatne porady etapie zadawaj zbyt wielu pytań dotyczących jednego obszaru ciebie ważny męczy a kandydat zna odpowiedzi pytanie powiedz wiedzieć wszystkiego zmień kontekst unikaj sytuacji kandydat czuje rozmowa idzie słabo stan emocjonalny ograniczyć zdolność dalszych poprawnych odpowiedzi po przykładowe pytania odsyłam zestawienia dodam zdaję sprawę niedoskonałości zestawień pytania sformułowane wyobraź słyszysz poprawną odpowiedź technicznych pytań czy zatrudnisz podstawie czy fragment całej układanki rozwiązaniem problemu poproszenie kandydata wyjaśnił odpowiedź bardziej dogłębny przeszedł proces myślowy pomocy tablicy zazwyczaj sprawdza demo day po kandydat zaliczył tech challenge kolejnym wyzwaniem przekonanie przyszedł rozmowę kwalifikacyjną demo day cały dzień kilka godzin pracy spędzony zespole bardziej otwartym wyzwaniem zupełnie inaczej podczas tech challenge kończący prezentacją swojej pracy całej grupie jest angażujący proces strony pewne chcą współpracować sobą długi czas kolejna inwestycja przyszłość pozwala wyeliminować długi kosztowny proces rekrutacji momencie któraś stron spełnia wymagań danym czasie niestety większość kandydatów oczekiwać tradycyjnej rozmowy kwalifikacyjnej podczas spędzą więcej godziny biurze pewno cały dzień konieczne przekonać warto poświęcić czas najważniejszym podczas demo day kandydatem wyrażasz możliwości oferujesz opisujesz przygotowujesz aplikanta demo day wszystko powinno ukierunkowane zbudowanie zainteresowania entuzjazmu czas ocenę umiejętności każdy kandydat motywowany innymi czynnikami ważne abyś uważnie słuchał kierował rozmowę tematy dbają najbardziej takimi czynnikami ogólny potencjał produktu firmy jak wygląda organizacja projektu data science główne szanse wyzwania projekty którymi dział data science pracował najbliższej przyszłości jak dział data science współpracuje innymi działami rodzaj wielkość jakość posiadanych danych szanse dalsze zdobywanie jak zespół zarządza swoją pracą współpracuje zakresie ustalania priorytetów tworzenia decyzji konkretne narzędzia technologie wykorzystywane dział data science docelowo znajdziesz kandydatów stanie chcą umówić zaplanować swojego demo day demo day sercem takiego procesu rekrutacji dobrze wykonany zawiera końcową ocenę techniczną umiejętności kandydata wraz analizą dopasowania kultury z odpowiednim przygotowaniem osiągnąć większego zaangażowania czasowego twojej strony twojego zespołu byłoby wymagane tradycyjną rozmowę kwalifikacyjną organizacja dobrego demo day rozległym tematem pewnością poruszę przyszłości selekcja w końcu ostateczna selekcja najpierw skontaktuj najlepszymi kandydatami upewnij nadal chętni zostać częścią twojego zespołu powinieneś założyć wszyscy kandydaci przeprowadzają rozmowy wielu firmach jednocześnie zamiast wierzyć masz kandydata wyłączność a praca ciebie spełnienie marzeń zaproś najlepszych kandydatów spotkanie zespołem zbierz opinie zadaj więcej pytań temat postrzegania kultury organizacyjnej wyznawanych wartości osobistych ambicji kariery jest dobry moment zadanie podchwytliwych pytań momencie mógłbyś rozmowie pracę konkurencji wybrałeś ofertę co istotne kandydat przenigdy odejść ostatecznej odpowiedzi wszyscy kandydaci otrzymują indywidualną spersonalizowaną pozytywną negatywną informację zwrotną pytanie zostali wybrani jeśli traktujesz kandydatów zasoby odrzucić zasługujesz zatrudnianie największych talentów jeśli traktujesz swoich kandydatów chciałbyś traktowany osiągniesz everest kultury zatrudniania jednocześnie zatrudniasz najlepszych jesteś rekomendowanym pracodawcą rekruterem ludzi starania stanowisko odrzuciłeś profesjonalnie uzasadnieniem aplikowanie firmy trudnym potencjalnie zmieniającym procesem powinien traktowany poważnie osoby podejmujące ostateczną decyzję aby znaleźć zatrudnić utalentowanych data scientist konkurencyjnym rynku pracy stara najlepszych kandydatów wykazać proaktywnością kreatywnością całym procesie rekrutacyjnym zaczynając znalezienia kandydatów a najefektywniej dokonać bywając najlepsi ludzie poświęcają swój wolny czas naukę dzielenia kochają swoją pasję kończąc prowadzeniu rozmów rekrutacyjnych zasadzie partner partner a pracodawca pracownik rekrutacja niezwykle istotny etap budowania doświadczeń kandydata candidate experience to podczas kandydat pierwszy wchodzi dłuższy bezpośredni kontakt firmą dowiaduje czym zajmuje zbiera pierwsze informacje panującej kulturze organizacyjnej doprecyzować wizję siebie firmie paulina leja specjalistka spraw rekrutacji it employer brandingu neurosys uwielbia kontakt ludźmi relacje społeczne chce zastanawiać powinien wyglądać a następnie takim tworzyć misję codziennie realizuje hr owiec wyboru bardzo ceni podejście projektowe elastyczność pracy karierę zawodową rozpoczynała firmie outsourcingowej następnie skoncentrowała działalności software house o cechy idealnego procesu rekrutacyjnego pisałam natomiast samej rozmowy przygotować powinien rekruter dziś chciałabym odpowiedzieć pytania wychodzące nieco dalej utarte ramy rekrutacji chociaż zdarza trzymanie standardów niektórych firm czasami problemem zainteresowanych odsyłam dwóch poprzednich artykułów mianowicie chciałabym pochylić kwestią elementy sprawić rekrutacja pojmowana szeroki długotrwały proces nadzwyczajna lepsza normalna podczas kandydat pomyśli proces outside the box a jednocześnie zachowując wysoką skuteczność działań szybciej lepiej mocniej wiele nagłówków krzyczy instant millenialsi chcą mieć czy faktycznie mieć temat inną dywagację faktem natomiast funkcjonujemy rzeczywistości dużego popytu rynkowego wykwalifikowanych specjalistów a jednocześnie niedostosowywanie nastrojów społecznych zachowań potencjalnych pracowników przynieść strat pozbawić dostępu ekspertów be mobile zacznijmy podstaw zwłaszcza latem maleje liczba godzin spędzanych laptopem a wzrasta przeglądanie stron internetowych telefonie byłoby wykorzystać trendów korzystania społeczeństwa internetu wyjść naprzeciw kandydatom jak korzystają internetu za mają gojtowską powołać wykres korzystania poszczególnych urządzeń gojtowska com możemy dodać użytkowników wróci stronę wyświetlała wersji mobilnej powyższe dane jednoznacznie laptop komputer niekoniecznie pierwszym wyborem kandydata a wnioski płyną rekruterów takie zakładka kariera oprócz super projektu wersję webową powinna zaprojektowana wersji mobilnej poprawnie wyświetlać kandydat wpadnie messengerze ofertę firmy przejdzie laptopa poziomu urządzenia mobilnego searchował daną firmę jeśli wersji mobilnej zrazi możliwe ucieknie be easy czy zdecydowanie zakładamy kandydat dostał stronę znajduje formularz wypełnienia wieloetapowa przesłania cv przecież zwykle telefonach potrafi stanąć aplikującym drodze warto rozważyć opcję dzięki załączyć wyłącznie link linkedin a chmurowego dysku kandydat wrzucił cv konieczności załączania dokumentu wszystkie chwyty dozwolone sprawią formularz rekrutacyjny najbardziej uproszczony dzięki potencjalny przyszły pracownik zdąży zdemotywować odłożyć przygotowywania wysyłania cv później według social press powołuje elevato kandydaci pasywni wszystkich pracowników nie szukają aktywnie pracy wyświetli ciekawego mogliby rozważyć takie osoby gotowego cv uniemożliwienie zaaplikowania najprostszy pozbawić firmę kandydatury a przecież założyć pomimo kandydatami pasywnymi znajdują potencjalnie wartościowi pracownicy be for them czy zrobić lepiej otóż tu dochodzimy pointy pełnej dostępności organizacji spotkań kandydatów chodzi akcję kandydaci zadać wszystkie nurtujące pytania najistotniejsze dostają natychmiastową odpowiedź jest moment firma pełni otwarta chętna pomocy odpowiadała pytania dotyczące projektów pomagała cv juniorom szukającym pomocy doborze zawodowej podobny mechanizm wykorzystuje przykład capgemini podczas dyżurów rekrutacyjnych greatdigital idea prosta godzinne spotkania promowane specjalistów obsługujące firmowe media społecznościowe prowadzone rekruterów employer brandingowców po pięciu pilotażowych spotkaniach firma zdecydowała organizację dyżurów miesiącu najmniej końca chcecie wiedzieć więcej całkiem fajnie opisane pozytywny feedback zebrała akcja potwierdza kandydaci chcą najprostszego najszybszego procesu rekrutacyjnego sneak peak zmiana pracy niezwykle emocjonująca stresująca wielu kandydatów najgorszy wysoki poziom niepewności brak danych dotyczących firmie którą kandydat zdecydować naprawdę mój przyjaciel ostatnio tłumacząc swojej babci czym zajmuję powiedział paulina stara pracownicy firmie szczęśliwi i niemal pełni prawda zależy zadowoleniu kandydatów myślę większość rekruterów hr owców skoro wiemy problem brak wiedzy kandydata danej firmie faktycznie możemy wyjść naprzeciw o technologii pierwszym rozwiązaniem obecność dodatkowej osoby rekrutacji nie takiej zadawać pytania a pracownika projektu rekrutowany dołączyć dzięki przekazać informacje swoją perspektywę projekt pierwszej ręki słowami specjalisty a rekrutera managera dzięki przyszły pracownik zadać wszystkie nurtujące pytania odnośnie merytorycznej części o teamie nie samą technologią merytoryką człowiek wśród oczekiwań kandydatów stosunku przyszłego miejsca pracy niezmiennie królują odpowiedzi oczekuję rozwoju super atmosfery oczekuję super atmosfery rozwoju dowiedzieć kim pracować zasadzie poznać to natomiast zrobić sposoby pierwszy polega pozytywnym przejściu procesu rekrutacyjnego a swoją finalną decyzją kandydat zapraszany wspólne popołudnie teamem można iść planszówki zrobić grilla dzięki sprawdzić atmosfera panująca pomiędzy członkami zespołu odpowiednia inaczej odpowiadająca wyobrażeniom kandydata jest drugi polega przejściu pozytywnie procesu a podjęciem ostatecznej decyzji zaprasza kandydata wspólny dzień pracy nie dniem idealnym pojawi pewna dysproporcja polegająca braku wdrożenia projekt jednak będąc teamu przyglądając zadaniom rytmowi kandydat poczuć atmosferę teamie oczywiście opcja angażuje energii zarówno stronie kandydata a zespołu managera firmy z drugiej strony dać spojrzenia okiem firmę cenny feedback a ogrom wiedzy mniej niepewności o szefie nie współpracuje ceo wszyscy pewnym stopniu zależni taka rola szefa warto zorganizować spotkanie finalną decyzją dzięki ceo wpływ załogę płynie statkiem zaprezentować dać kandydatowi możliwość poznania sam rekrutowany mógł nieco bardziej poznać wartości panują firmie chyba szef lubi mówić zastanowić osoba którą choćby sporadycznie współpracować oferta odrzucenia robert frontendowiec tygodni męczył pracy toksyczna atmosfera niskie wynagrodzenie słabe projekty w zeszłą otrzymał linkedinie ofertę zatrudnienia wszystko brzmiało ciekawie zrażony obecnym doświadczeniem dosyć sceptycznie podchodził wszystkich obietnic wybrał spotkanie rekrutacyjne podczas rekruterka mówiła firmie szczerze dużym zaangażowaniem a robertowi chyba poszło całkiem nieźle z drugiej strony znał najstarszy rekruterze poszedł dzień próbny nieba piekła racjonalnie wybrał piekło a następnego dnia okazało okropnie poprzednio dzień próbny ku zadowoleniu dostał zaproszenie weryfikację techniczną koniec przyszedł reactowiec pracujący projekcie trafić bez ogródek opowiedział super denerwuje zważył plusy minusy ostatecznie brzmiało fajnie tymczasem natalia rekruterka software housie ostatnio testuje publikacje ofert pracy linkedinie otrzymała tydzień cv reactowca na początku nieufny szybko rozkręcił chwili rozmowy wiedziała super pasował zespołu zmotywowany zmiany pracy super projekty koncie oprócz ostatnich miesięcy wiedziała przejdzie pozytywnie weryfikację techniczną nie myliła wiecie zwykle kończy taka historia telefonem mailem ofertą super wszyscy zadowoleni ale wiecie zakończyć telefonem kandydata przyjdzie paczka i domu ewentualnie zamaskowana paczka pracy a pisemne gratulacje oferta pierwsza część welcomepacku kandydat pozytywnie przeszedł rekrutację wiedział stać częścią firmy wtedy kandydat ofertę odrzuci chociaż takiej zrezygnował codziennie pić kawę firmowego kubka ciepło myśleć takiej niesamowitej ofercie rekrutacji którą przeszedł jeśli natomiast przyjmie początku budować relację firmą prywatnym gruncie i want play a game czy rozmowa ulubiony prezentowania kandydatów niekoniecznie czasem woleliby zaprezentować umiejętności zwłaszcza przypadku analitycznego strategicznego myślenia jak pozwolić wykorzystać grywalizację jest wykorzystanie schematów gier innych kontekstach przykład pomocą rozgrywki sprawdzić poziom zaangażowania reakcję sukcesy porażki kandydatów przykładem grywalizacji zastosowanej rekrutacji rozgrywka stworzona firmę l oreal studenci absolwenci mogli wejść rzeczywistość firmy a osiągali najlepsze wyniki wychwytywani rekruterów mogli lepiej zaplanować karierę filmik zobaczenia natomiast firma luxoft stworzyła grę klimacie rpg uczestnicy rozwiązywali kolejne zadania mogli sukcesy najlepszych uczestników graj kartami masz czasem wszystkie rozwiązania wydają oklepane wtedy przenieść uwagę siebie jesteś firmą it posiadacie niesamowity produkt daj powszechny dostęp poproś rozwiązanie rozwiązanego problemu rekrutacja służy darmowej siły roboczej sponsorujesz wspierasz schronisko może rozmowa odbyć spacerze psem jesteś firmą marketingową spotkaj kandydatami evencie czy firma produkcyjna wiesz ugryźć a wszyscy kandydaci wspólną pasję oglądania meczów najlepiej porozmawiać piwku meczyku w końcu kandydat prędzej zacznie czuć swobodnie oglądając mecz spotkanie fanów footballu sprawi rozmowa lepsza oczywiście rozwiązania powinny dobrowolne miłośnikiem psów niektórych rekrutacja powinna formalna należy uszanować jedną firm wykorzystała możliwości mercedes benz zaproponowała przeprowadzenie rekrutacji swoich samochodów kandydat wsiadał auta prowadzonego sprawnego kierowcę wykorzystywał pełni możliwości maszyny w czasie kandydat speed dating ceo lisbońskiego oddziału filmik wrażenia specjalistów możecie zobaczyć ktoś widział serdecznie polecam innym przykładem firmy wykorzystała swój potencjał heineken nie postanowił przeprowadzić rozmowę rekrutacyjną inna wszystkie wykorzystał sponsorem champions league podsumowanie procesu możecie zobaczyć podsumowując czy pomysły zgodne naszymi branżowymi przyzwyczajeniami niestety ciężko zaakceptować rekrutację cv chociaż miejscu warto dodać rozumiem argumenty wskazujące zależy ci zmianie pracy dasz radę przygotować strony swojego resume którą cały zespół wkłada energię zakończoną pierwszymi dodatkowymi nakładami finansowymi kandydata oferty przyjął ale możliwe sprawić firma postrzegana bardziej wyjątkowa nastawiona kandydata zdecydowanie do osób zarządzających budżetem należy wybór nagroda warta ceny co zrobić rekruterzy każdego dnia dzień starając ulepszyć rekrutację odpowiadać aplikacje kandydatów ciągu samego maksymalnie dwóch dni wiem możliwe warto starać proponować terminy spotkań rekrutacyjnych nieodległym czasie starać dostosować godzinowo proponować możliwość przeprowadzenia zdalnie chętnych zapraszać minut osoby projektu kandydat trafić poznali dodatkową perspektywę obowiązków w całym pośpiechu pamiętać mieć czas spokojnie skupieniem pochylić aplikacją kandydata samym w końcu interesu firmy priorytetem pulshr nofluffjobs com adnext już niebawem największy portal społecznościowy wprowadzi restrykcyjny system reklamowy wszystkich ogłoszeń a związanych zatrudnieniem nowy system ogłoszeń pracę zostanie oddzielony strumienia wszystkich innych reklam targetowanych pracodawcy mogli przeglądać osób według wieku płci kodu pocztowego zmienić musiały algorytmy facebooka oprócz inaczej wyglądać ograniczenia prawne nowe narzędzie dostępne jaki miało wpływ przebieg rekrutacji co dokładnie zmieni szczegółów możesz dowiedzieć przeglądając kolejne wydanie hello news jak radzić nadmiernymi zwolnieniami lekarskimi pracowników polska dłuższego przekracza europejską chodzi absencję chorobową jakie rodzaje dlaczego pracownicy nadużywają l4 rodzi konflikty linii pracownik pracodawca wzbudza poczucie niesprawiedliwości sprzeciw wszystkich współpracowników dowiedz mierzyć utrzymać wysokość absencji chorobowej odpowiedniej wysokości więcej temat finansów należy kobiet mimo branża finansowa zdominowana kobiety zarządzają dlaczego nadal stanowiskach kierowniczych większy procent stanowią mężczyźni przyczyn wiele a nadal krąży przekonanie kobieta zbyt wrażliwa zarządzać strukturami organizacji trudniej przychodzi podejmowanie decyzji o roli kobiety branży opowiada magdalena bylinowicz hrk sa więcej temat marzy ci stworzenie firmy przetrwa wystarczą kroki dynamicznie rozwijająca gospodarka wysoka konkurencja sprzyjają pokonaniu barier wejścia dany rynek we współczesnym trudno tworzyć rozwijać nową własną markę co zrobić firma rozwijała skrzydła utrzymywała lata więcej temat generacja jutra rekrutować pokolenie urodziło całkowicie cyfrowym generacja z stawia wyzwania wszystkim rekruterom z wielu badań wynika doskonale wiedzą chcą pracować lubią wydawać zarobione pieniądze zmusi przyszłych hr owców wyjścia utarte schematy stereotypy maja gojtowska podaje gotowe wskazówki pracodawców więcej temat stwórz swój employee value proposition robi google nike evp unikalny zestaw pracownik otrzymuje zamian umiejętności kompetencje doświadczenie wnosi firmy polega zdefiniowaniu istoty firmy czyni wyjątkową kryje poznaj kluczowe działania pozwolą efektywną rekrutację utrzymanie pracowników pozytywnie wpływać budowanie marki siłę poznaj gotowe rozwiązania zobacz robią największe marki więcej temat jesteś specjalistą działu kadr płac rusza konferencja kadry biznesu jest idealne wydarzenie osób poszukujących prawdziwych inspiracji wiedzy doświadczenia będzie okazja wymienić wspólnymi spostrzeżeniami gronie samych specjalistów branży usłyszysz nowych rozwiązaniach a między innymi efektywnie działy kadr biznesu wyzwania polityki personalnej rozstać pracownikiem zabezpieczyć interes pracodawcy wydarzenie odbędzie października warszawie sprawdź całą listę prelegentów czego możesz nauczyć więcej temat współpraca działów hr marketingu fundament sukcesu niestety zauważa dużej części przedsiębiorstw poszczególne działy zamiast współpracować rywalizują sobą czy zdrowe organizacji odpowiedź wydaje oczywista dlaczego wciąż brakuje dobrej komunikacji sił niektórzy twierdzą kluczowym aspektem warunkującym zdrową organizację współpraca działu hr marketingu dlaczego zacząć owocne relacje więcej temat pracowniczy plan kapitałowy kluczowe wyzwania podczas wdrażania ppk obejmuje największych pracodawców polsce lipca jedną największych kadr pracowniczych polskim rynku posiadają agencje pracy tymczasowej chociaż duża rotacja pracowników powszechna naturalna wdrażaniu obsłudze ppk stwarza ogrom dodatkowej pracy jak sprostać wyzwaniom więcej temat facebook ogłoszenia pracę finalne zmiany już niebawem największy portal społecznościowy wprowadzi restrykcyjny system reklamowy wszystkich ogłoszeń a związanych zatrudnieniem nowy system ogłoszeń pracę zostanie oddzielony strumienia wszystkich innych reklam targetowanych oprócz zmienią ograniczenia prawne jaki miało wpływ przebieg rekrutacji więcej temat zfśs wolno a czego zmieniły przepisy kodeksu pracy ustawie zfśs jest burzliwy temat hr owców menedżerów w związku rozporządzeniem parlamentu europejskiego rady ue maja weszła ustawa zapewnia stosowanie przepisów rodo poznaj nowy zakres danych osobowych jakich pracodawca potencjalnego pracownika przebiegu procesu rekrutacyjnego więcej temat w szybko rozwijającym pracy pojawiające technologie wydają błogosławieństwem przekleństwem błogosławieństwem usprawniają procesy przekleństwem wymagają przyjęcia całej firmie pozyskanie wsparcia strony pracowników wyzwaniem samym co liderzy powinni rozważyć wdrożeniem nowego systemu zarządzania talentami co zrobić zespoły hr wdrożenie zakończyło sukcesem jaka twoja tajna broń pozyskiwania talentów organizacji spadek stopy bezrobocia spowodował rynek pracy przesunął korzyść osób kandydujących teraz specjaliści liderzy działu hr muszą wykazywać dużą kreatywnością metodach pozyskiwania pracowników wykorzystywane przeróżne sztuczki wyszukiwarkami czym sourcing reddit jak wykorzystywać rodzaj serwisów społecznościowych na pytania odpowiada erin mathew specjalistka ds pozyskiwania talentów blogerka specjalistka ds rekrutacji więcej temat inteligentna automatyzacja możesz zwiększyć efektywność działań działu hr hr wolniej przyjmuje podejście oparte danych części biznesu częściowo tradycyjnie dyscyplina dotycząca empatii a faktów jednakże strategiczne decyzje dotyczące pracowników kierowane raczej serią dyskusji jakąkolwiek formą danych mieć wpływ naturalne uprzedzenia heurystykę robotyka inteligentna automatyka należą największych motorów nowej przyszłości pracy dowiedz wykorzystać szeroko pojętej dziedzinie hr więcej temat jak powinieneś przechowywać dane osobowe działy hr wypełnione przeróżnymi danymi pracowników kandydatów sprzedawców obecnych dawnych przyszłych dlatego powinny posiadać swoją własną politykę zakresie opracować odpowiednie podejście marketingowe o czym należy pamiętać zwrócić szczególną uwagę jakich zasad przestrzegać poznaj kilka prostych reguł dzięki unikniesz niepotrzebnego ryzyka więcej temat learning management system zwiększyć akceptację użytkowników trakcie wdrożeniu w szybko rozwijającym pracy pojawiające technologie wydają błogosławieństwem przekleństwem błogosławieństwem usprawniają procesy przekleństwem wymagają przyjęcia całej firmie co liderzy hr powinni rozważyć wdrożeniem nowego systemu zarządzania talentami więcej temat kim pracownik przyszłości dynamicznie rozwijająca technologia zwiastuje czwartą rewolucję przemysłową z powodu niewątpliwie zmieni miejsce forma charakter pracy pracowników a samym zmienią oczekiwania dotyczące cech kompetencji zawodach przyszłości ile obecnie wykonywanych zawodów zniknie co kryje kompetencjami przyszłości jak zmieni rynek definicja pracy więcej temat spadek zasobów siły roboczej oznacza polskiej gospodarki z powodu spadku siły roboczej przestrzeni ostatnich twierdziło niemożliwe utrzymanie potencjału rozwojowego gospodarki polsce jednak według nbp problemów rynku pracy rośnie efektywność firm jakie dalsze prognozy więcej temat multitasking wróg przyjaciel efektywności na przestrzeni wielozadaniowość zdobyła wielu sympatyków nadal cieszy dużą popularnością jednak podnosi produktywność naszych działań okazuje multitasking czasochłonny niekorzystnie wpływa pracę umysłu według badań wielozadaniowość pochłania więcej czasu skupiona praca jedną rzeczą chcesz zwiększyć efektywność swojej pracy poznaj eksperckich rad według matthew jenkina więcej temat fun at work podnosi jakość pracy raport międzynarodowy krajobraz radości pracy dowodzi radość pracy znaczenie badanie zostało przeprowadzone krajach europy chinach atrakcyjne zarobki wymieniane dopiero czwarta pozycja co naprawdę motywuje zwiększa efektywność pracy więcej temat work life balance znaczenie współczesnych organizacji wielu pracowników zadaje pytanie pogodzić bycie rodzicem karierą zawodową okazuje obecnie kluczowym czynnikiem wyborze nowej pracy elastyczność kryterium ważniejsze wysokość wynagrodzenia work life balance ważnym aspektem matek ojców firmy postawią politykę prorodzinną wygrać walkę niejeden talent dowiedz benefity oferują przedsiębiorstwa pozyskać cennych pracowników więcej temat dlaczego kandydaci przychodzą spotkania rekrutacyjne często spotyka sytuacje potencjalni pracownicy przychodzą pierwszy etap rekrutacji według badań prawie połowa kandydatów uprzedza swojej rezygnacji dlaczego pojawia problem jak zaradzić poznaj przyczyny zastosuj kilka cennych porad usprawnią cały proces komunikacji między stronami więcej temat czy znasz odpowiedź pytanie wydać pozyskać specjalistę jest niezwykle istotna kwestia zarządzaniu budżetem hr owym budżetem firmy podczas pracownika istotne jaka kwota zmianie pracy pojawi koniec miesiąca koncie pracodawcy nowa osoba kolejna pensja co więcej kwota rękę pracownika kropla morzu kosztów generuje paulina leja specjalistka spraw rekrutacji it employer brandingu neurosys uwielbia kontakt ludźmi relacje społeczne chce zastanawiać powinien wyglądać a następnie takim tworzyć misję codziennie realizuje hr owiec wyboru bardzo ceni podejście projektowe elastyczność pracy karierę zawodową rozpoczynała firmie outsourcingowej następnie skoncentrowała działalności software house dlaczego rekruter powinien wiedzieć kształtują ukryte koszty rekrutacji bardziej konsekwencji swoich propozycji umieć zarządzać budżetem zanim pochylimy kwestią wydatków zaznaczyć istotne kwestie po pierwsze rekrutację przeprowadzić wewnętrznie zlecić zewnątrz a zależności wyboru rozkład kosztów przedstawia różnie jest oczywiste warte zaznaczenia po drugie proces rekrutacji mocno zmienia wraz wzrostem organizacji startup zatrudniający osób rekrutuje zupełnie inaczej korporacja ciągłe zapotrzebowanie poziomie kilkunastu kilkudziesięciu specjalistów samo dotarcie kandydata niezwykle kluczowe celem dotarcie jednego specjalisty nakład pracy rozkłada inaczej potrzebujemy w drugim przypadku wliczyć koszty marketingu rekrutacyjnego narzędzi analitycznych dodatkowym elementem kwestia pozycji marki pracodawcy a konkretniej kandydaci darzą zaufaniem oferta pracy wiarygodną obietnicą mówiąc nieco bardziej obrazowo statystyczny specjalista deep learningu otrzyma propozycję openai większym prawdopodobieństwem zareaguje pozytywnie przekłada wysoką konwersję ofert pracy ilość przesłanych wartościowych aplikacji zapoznaniu zobaczy ofertę p h u januszex dlatego chciałabym zaznaczyć jednej stałej kwoty którą ponieść rekrutacji ba możliwe przeprowadzenie jednej rekrutacji mocno mówi kosztach jednak chcąc ustandaryzować proces rekrutacji mieć dynamiczny stabilny pipeline kandydatów liczyć kosztami zasadzie da uniknąć a warto pamiętać czas więcej szczegółów kalkulatory dłoń lecimy zacznijmy kosztów rekrutacji jak wspomniałam rekrutację przeprowadzić wewnętrznie zewnętrznie różnym kosztem zacznijmy rekrutacji przeprowadzonej wewnętrznie rekrutacja darmo być spotkaliście protekcjonalnym podejściem pracy rekrutera narzędzi potrzebujecie albo podejściem sumie rekruter potrzebny szef zrobić bezkosztowo jak rekrutować niemalże darmo nic prostszego ceo przygotowuje ofertę pracy wrzuca dedykowane grupy facebooku czeka w optymistycznej wersji historii projekt konkurencyjne warunki finansowe dostaje kilkanaście aplikacji nic prostszego teraz zapoznać dokonać selekcji osób wyglądają ciekawie spotkać kilkoma nagle okazać aranżowanie spotkań wyzwaniem końcu dogaduje być udokumentować wnioski spotkaniach przyszłości móc wrócić kalkuluje wynagrodzenie składa ofertę najlepszemu kandydatowi jeśli szczęście odbędzie dodatkowych negocjacji pytań ponadto nowy rynku uda uniknąć konieczności zakupienia komputera firma pracuje wyłącznie zdalnie jednak wzbudzić zaufanie kandydatów najczęściej aspekty niemożliwe jeśli rozkręca swój biznes potrzebę stworzenia nowego stanowiska siebie firmie koszty rosną przecież oczywiste chociażby dokupić biurko krzesło a komputer dodatkowy monitor ceny najtańszych biurek wyglądają miały chwilę rozpaść oscylują granicach złotych monitor zdobyć złotych krzesło kolejne złotych w miarę sensowny komputer programisty cena złotych ponadto warto zauważyć ktoś miejsce pracy przygotować powierzchnia biurowa oparciu przepisy związane minimum metrów kwadratowych pracownika biuro wrocławiu obrzeżach miasta kosztuje netto vat metr oczywiście centrum cena powierzchni biurowych potrafi przekraczać metr wszystkie wydatki powodują przeliczeniu comiesięcznej pensji pracownika doliczyć minimum złotych jednak wspomniane zaokrągleniu stanowi największy problem a czas mógłby mogłaby zajmować czymś innym realizacją swoich projektów zadań krótko mówiąc zarabiać wyżej opisane czynności dużym pośpiechu zajmą zakładając trzy spotkania rekrutacyjne godzin jest zatem dzień spędzony pozyskaniu specjalisty a kandydaci przysłali wielu aplikacji oczywiście możesz wejść linkedin ceo firmy spory odzew tu pojawia podstawowe pytanie biorąc uwagę swoją stawkę godzinową wycenia swoją pracę właśnie tyle stracił straciła rekrutacja wewnętrzna dobrze prosperujące większe firmy zadały pytanie dotyczące sposobu rekrutacji zatrudniają rekruterów rekruterki wolą zapłacić specjalistom szybciej skuteczniej pozyskują talenty płacąc jednocześnie mniej ceo stracił poświęcając swój czas wykonując zadania widełki rekruterów branży it ciągle rosną obecnie przeciętnie wynoszą złotych brutto umowie pracę oczywiście oferty powyżej poniżej widełek znalazła oferta netto b2b mówimy osobach zajmują wyłącznie rekrutacją przypadku innych kompetencji widełki przedstawiają inaczej koszty pracodawcy wynoszą wówczas złotych załóżmy znalazłeś aś fajnego pracownika któremu płacisz stawkę dokładnie pośrodku kwoty twoje miesięczne koszty wynoszą nieco złotych komputer powierzchnię biurko krzesło powiedzmy rekrutacja zajmuje dni roboczych włączając przygotowanie oferty publikację portalach dedykowanych grupach facebooku direct search spotkania rekrutacyjne komunikację kandydatem umawianie weryfikację techniczną przygotowania podsumowań kandydatów to oznacza rekrutacja koszt zaokrągleniu złotych trzeba pamiętać rekruterowi pracy potrzebne narzędzia podstawowym ogłoszenia pracę najczęściej płatne na przykład portalu justjoin it ogłoszenie kosztuje portalu pracuj wciąż najpopularniejszych portali ogłoszeń zapłacimy złotych kolejnym linkedin wersji rekruterskiej wersja lite bardziej podstawowych uprawniająca wysłania inmaili miesiącu kosztuje euro miesięcznie rekruter corporate złotych miesięczny dostęp powiedzmy rekruter szeroką sieć kontaktów a rekrutacje rozbudowane koszt plasuje poziomie złotych miesięcznie załóżmy naszym scenariuszu firmie zależy dotarciu wyłącznie programistów koszt narzędzi podczas rekrutacji złotych trzecim narzędzi kosztów ats rekruter dokumentować swoją pracę ceny systemów różne złotych możemy przyjąć kosztują złotych rekrutacja miała sens potrzebne dokładne zdefiniowanie potrzeb firmy a podczas następnych kroków weryfikacja techniczna przeprowadzona leadów technicznych seniorów danej technologii oszacujmy pierwszy aspekt koszt pół godziny godziny pracy project managera hiring managera nazwijmy ogólnie pm ami stawki tychże pm obecnie różnią rynku przyjmijmy ułatwienia obliczeń stawkę złotych w przypadku weryfikacji technicznej każdorazowo koszt dwóch godzin pracy programisty przygotować sprawdzić git a zadanie przekazać swoją ocenę w związku doświadczona osoba przyjmijmy zarabia h przy weryfikacji osób złotych koszt takiej rekrutacji wynosi złotych plus jednorazowo złotych sprzęt rekrutera dopiero szukał nowych pracowników koszt sprzętu podwaja dodajmy koszt sprzętu nowego zrekrutowanego pracownika opisałam wcześniej stawka dobija złotych sam sprzęt ktoś przygotować warto wspomnieć kosztach dodatkowych artykułów spożywczych typu woda herbata czystości biorąc uwagę ostatnie koszty dobijmy złotych przy rekrutacji wewnętrznej wiele firm wewnętrzny system poleceń oscyluje granicach między a skuteczne polecenie tę kwotę niekiedy uwzględnić rozliczeniach rekrutacja zewnętrzna tak wspomniałam rekrutację zlecić firmie zewnętrznej stawki firm outsourcingowych mocno zróżnicowane duża część proponuje kwoty między miesięcznego wynagrodzenia kandydata mniej złotych często pracują zasadach success fee zlecając rekrutację ponosi dodatkowych kosztów uśredniając kwotę oczywiście zależy stanowiska zatrudniamy mówić kwotach tysięcy złotych wynagrodzenia agencji zakładając szukamy programisty poziomie mid wynagrodzenie złotych przyjmijmy kwota wynosi złotych dodatkowo kandydaci agencji zewnętrznej weryfikowani programistę rekrutera powiedzmy kosztuje złotych wciąż pamiętać sprzęcie kandydata wysokości min złotych koszt rekrutacji kandydata wynosi złotych onboarding już boli cię głowa sum to koniec każdy nowy pracownik wiąże obowiązkami firmy w przypadku osób zatrudnionych umowę pracę mówimy badaniach medycyny pracy przypadku braku czynników szkodliwych złotych szkolenie bhp korzysta usługodawców złotych kadry płace osobę miesięcznie dni urlopu de facto miesiąc wypłaty pracy obsługa dokumentów pracowniczych mówiąc przygotowaniu samej umowy te elementy możemy zlecić zewnętrznej firmie oczywiście płacąc obowiązki wygenerują konieczność zatrudnienia dodatkowej osoby office managera poświęci elementy przygotuje plan pierwszego dnia pracy dzień stawka zlecenia elementów usługodawcom jednego dnia pracy takiej osoby wynosić złotych chociaż zasadzie sky is the limit dodatkowo pierwszy dzień obfituje szkolenia narzędzi wprowadzenie projektu itp nawet uznamy project manager poświęca pierwszego dnia danej osobie godziny złotych a senior programista godzinę złotych czasie przynoszą bezpośredniego zysku firmie swoją pracą spędzają wdrażaniu kolejnej osoby wiemy kończy słyszałam kiedyś pracownik korporacyjny zaczyna zarabiać siebie trzech miesiącach wcześniej porusza narzędziach sprawnie ważniejsze zajmuje czas innych wydajnych pracowników potwierdzenie stwierdzenia znaleźć możemy stronie e recruitera powołuje raport best practices for onboarding ensuring successful assimilation opublikowanego human capital institute przeczytać możemy raportu wynika osoba wchodząca nową rolę organizacji pierwsze trzy miesiące konsumuje wartość równą trzem miesiącom swojej późniejszej pracy po przekroczeniu progu praca zaczyna przynosić organizacji wartość dodaną dopiero upływie sześciu miesięcy pracy pracownik dostarcza większą wartość uprzednio pochłonął przyjmując bardziej optymistyczną wersję dodajmy kosztów zatrudnienia trzy miesiące pensji nowego pracownika wynagrodzenie czas najważniejszy koszt wynagrodzenie z osobami nawiązują współpracę zasadach b2b sprawa kosztem kwota netto fakturze co prawda stronie programisty kwestia opłacenia ubezpieczenia społecznego zdrowotnego podatku zatrudniającego interesuje powszechną praktyką uwzględnianie obciążeń kwocie netto zawartej wystawionej fakturze tym samym kandydat mieć rękę według kalkulatory nf wystawić fakturę wysokości netto vat warto dodać mówimy współpracy urlopów dodatkowych typu urlop chorobowy uznajmy budżet pracodawcy złotych osoba zmieścić budżecie umowie pracę otrzymać złotych kwota brutto umowy natomiast koszt pracodawcy uwzględniający składkę ubezpieczenie emerytalne rentowe dobrowolne ubezpieczenie chorobowe ubezpieczenie zdrowotne zaliczkę podatek wyniesie złotych pracownik osoba zatrudniona umowę pracę chciałby dostać rękę złotych umowie pracę kosztować pracodawcę uff podsumowanie kosztów przyjmijmy kandydat zgodził mniejszą kwotę netto b2b rękę jeżeli osoba zrekrutowana wewnętrznie pracownikiem wliczam kosztu sprzętu rekrutera sumując wcześniej wyszczególnione kwoty ukryty koszt rekrutacji wyniósł złotych wliczając wynagrodzenia danej osoby jeżeli płacimy złotych polecenie stawkę uwzględnić jeżeli osoba zrekrutowana agencję koszt takiej osoby sięga złotych licząc wypłaty warto pamiętać nawiązanie współpracy zasadach umowy b2b najtańsze chyba rekrutujemy agencję wówczas zapłacimy mniej odnosząc kwoty brutto a kosztów pracodawcy dochodzi obowiązków zakresie dokumentów większa odpowiedzialność pracodawcy pracownika muszę podkreślić przedstawiałam mocno wypośrodkowane ograniczone kwoty wzrost pracodawcy wymusza rozwiązania bardziej złożone dawno wyczytałam całkowity koszt rekrutacji wysoko wykwalifikowanego pracownika złotych korporacji liczba najbardziej prawdziwa zwłaszcza większy pracodawca większe nakłady przeznaczać marketing rekrutacyjny płatne kampanie wówczas kwoty przekroczyć zespół marketingu rekrutacyjnego postaci osób stawką złotych płatne kampanie facebooku linkedinie etc oczywiście część kosztów rozkłada wiele rekrutacji linkedin rekruterski system ats inne sprzęt amortyzować czasie z drugiej strony pracodawca ponosi ryzyko rekruter skuteczny zobowiązany wypłacić wynagrodzenie jak wspomniałam początku ciężko wskazać jednoznaczny koszt wliczając trzymiesięcznego okresu kandydat siebie zarabia ograniczonych kosztach wypłaty prawie rekrutacja wewnętrzna outsourcing złotych a bardziej rozbudowanych działaniach bardziej zaawansowanym sprzęcie wykupieniu dodatkowych narzędzi kwoty podwoić dopiero kwoty doliczyć możemy wynagrodzenie co związku po pierwsze najważniejsze proponując rozpoczęcie rekrutacji kwot a osoby odpowiedzialne zarządzanie budżetem muszą gotowe koszt większości da zniwelować warto zastanowić koszty gotowym celu pozyskania odpowiedniego talentu w momencie skoncentrować badaniu rynku przemyśleć publikację odpowiedniego zakresu zadań widełek mając rozminięcie dostępnymi talentami przyniesie kolejne koszty można rozważać ewentualne podniesienie widełek liczyć zamortyzują kontekście szybkiego zamknięcia procesu rekrutacji posługując tymi liczbami przekonać rozwiązań szefów po drugie warto dbać swoich zatrudnionych pracowników awansować wyższe stanowiska dzięki rekrutacja otwierana wyłącznie niemal wyłącznie przypadku rozwoju firmy a względu odejścia dodatkowo rekrutacja wyższe stanowiska najczęściej bardziej kosztowna zwłaszcza przypadku korzystania pomocy agencji może argument intensywniejszego długoterminowego inwestowania talenty po trzecie należy dbać hr chociaż komu mówię zajmuje pozyskaniem utrzymaniem talentów warto uświadomić strategiczną pozycję możliwość dużego ograniczenia kosztów firmy przypadku sprawnych skutecznych działań wspaniale obaj gracze rynku pracy postaci firm pracowników uświadomili pozycje kandydaci doceniali pracodawców inwestycję jaką drudzy poczyniają rzecz starali wybierać miejsca pracy nadzieją ustalono inaczej długofalowe relacje warto mieć zupełne oderwanie racjonalnej oceny rynkowej wartości swoich kompetencji doprowadzić dalekiej perspektywie raczej upadku pracodawców eldorado niebotycznych wynagrodzeń wszystkich z drugiej strony warto pracodawcy uświadomili lepiej tworzyć szczere przemyślane oferty pracy należycie wynagradzane stanowiska obranie przeciwnego niedopłacanie pracowników pracę nierealnym wymiarem zadań dalszej perspektywie przyczyni wzrostu rotacji nakładu ogromnych kosztów trzeba godzić taniości prosperującej firmy zbuduje gotowym zainwestować kapitał ludzki
jestem fanką disneya czekam niecierpliwie grudzień premierę frozen tak podskakiwałam ekscytacji oglądałam trailer oczywiście dostrzegam konserwatyzm bajek zachowawczość zmienia faktu uważam walt disney zrewolucjonizował przemysł kinematograficzny nikt odbierze czemu mówię ponieważ wizjonerstwo sięgało dalej prostu tworzenie chwytających serce historii postaci albo inaczej stworzył wynikiem przypadku to efekt między innymi systemu pracy wdrożył to pozwolił tworzyć innowacyjne rozwiązania paulina leja specjalistka spraw rekrutacji it employer brandingu neurosys uwielbia kontakt ludźmi relacje społeczne chce zastanawiać powinien wyglądać a następnie takim tworzyć misję codziennie realizuje hr owiec wyboru bardzo ceni podejście projektowe elastyczność pracy karierę zawodową rozpoczynała firmie outsourcingowej następnie skoncentrowała działalności software house jedną najważniejszych pożądanych cech naszych czasów innowacyjność ta chęć poszukiwania tworzenia nowych rozwiązań wiąże bezpośrednio kreatywnością nietuzinkowe niespotykane rozwiązania genialne swojej prostocie podbijają serca tłumów pozwalając kształtować rzeczywistość firma wprowadzi nowość rynek wiedzie prym pozycjonuje możecie trochę poczytać umysłach odbiorców zgarnia całą pulę wiernych fanów przykładem rozwiązań chociażby usługi przewozu wprowadzone uber a gra pokemon go często później grzyby deszczu pojawiają naśladowcy próbujący zarobić genialnym pomyśle pewnym stopniu udaje jednak zapisują kartach rynkowej historii złotymi zgłoskami również hr employer brandingu procesy kampanie docenianie wiele wiele innych elementów funkcjonują utarty czy najlepszy możliwych sposobów gorąco wierzę wiele stworzone niesamowity nieodkryty pomimo pewnych przyzwyczajeń funkcjonują naszej branży o małpach trwając schematach organizacji pracy wykonujemy najbardziej optymalny impulsem refleksji codziennym funkcjonowaniem eksperyment przeprowadzony g r stephensona badacz zamknął klatce małpek w klatce prócz zwierząt znajdowała drabina eksperyment polegał górze drabiny badacz kładł kiść bananów podopieczni mogli wejść spróbować zjeść haczyk polegał jakaś małpka wchodziła drabinę pyszne banany oblewana lodowatą wodą klapy suficie w końcu zwierzęta nauczyły wchodzić drabinę zaprzestały procederu wtedy badacz postanowił wykonać ruchy po pierwsze oblewał małp wchodzących drabinę po drugie wymienił jedną małp przebywała pory pokoju zupełnie nową znała realiów panujących klatce nowicjusz zobaczył szczycie drabiny wdzięczą banany razu postanowił sięgnąć wtedy pozostała grupa małp rzuciła zaczęła bić powstrzymywać wejściem współtowarzysze dokonywali każdym razem nowy podejmował taką próbę w końcu przestał wtedy naukowiec wymienił kolejną małpę pierwszego składu nową sytuacja powtarzała małpek doświadczyła oblewania została pokoju jednak nowych odważyła sięgnąć banany pomimo miały prawa wiedzieć pierwotnie rozsądnie sięgać jedzenie drabinie michalpasterski jest eksperyment uczy instynktach dostosowywania unikania zagrożeń z pewnością moglibyśmy pogratulować małpom zdolności przekazywania wiedzy potencjalnych zagrożeniach jest otaczająca rzeczywistość dynamicznie zmienia obecnie bardziej premiowanie szukanie alternatywnych rozwiązań albert einstein powiedział głupotą wykonywanie samych czynności samych warunkach oczekiwanie innych rezultatów teraz rzadko warunki niezmienne jak szukać alternatywnych rozwiązań na pomoc przychodzi cecha którą posiada szczyci chyba hr owiec kreatywność a jedną osób historii pobudzała swoją innych kreatywność wspomniany wstępie walt disney ale zanim kreatywność ogóle na podstawie definicji słownikowych ukuć następującą definicję kreatywności kreatywność proces umysłowy pociągający sobą powstawanie nowych idei koncepcji nowych skojarzeń powiązań istniejącymi ideami koncepcjami myślenie kreatywne myślenie prowadzące uzyskania oryginalnych stosownych rozwiązań mowa elemencie nowości idei skojarzeń powstałych kanwie pomysłów innych inna definicja kreatywności gotowość tworzenia nowych pomysłów miliony osób wpadły pomysł w kreatywności ważne szukanie nieoczywistych rozwiązań problemów oderwanie choćby chwilę ograniczeń wyjście typowy schemat działania myślenia co niezwykle istotne wielu ekspertów zajmujących twórczym myśleniem uważa kreatywność cechą ciągłą tzn posiada różnym stopniu analogicznie miejsce wzrostem niskim wysokim mieć mało kreatywności mieć na potwierdzenie słów przytoczyć historię wiem prawdziwa trafia ponoć dawno pewien ambitny szef firmy paliwowej zauważył swoich pracowników połowa stu podwładnych wykazywała niezwykłą kreatywnością dzięki pomysłom firma zarabiała więcej pieniędzy pozostali kreatywni grzeszyli efektywnością dobry szef chciał zwalniać połowy pracowników postanowił zatrudni naukowców zbadali pierwszą grupę dowiedzieli takiego robią czego mógłby nauczyć pozostałych pracowników zatrudnieni psychologowie mieli zadanie odkryć takiego robią pomysłowi pracownicy pomysłowi po dwóch miesiącach testów wywiadów badań okazało wyjątkowa grupa pracowników zasadzie niczym różni pozostałych w zasadzie znaleźli jedną różnicę kreatywni pracownicy wierzyli faktycznie tacy podczas pozostali uważali kreatywne osoby morał opowiastki prosty innowacyjnym kreatywnym próbować robić wierzyć przyniesie efekty a historia wiem prawdziwa przekonuje stosując przesłania najprawdopodobniej wejdzie schemat samospełniającej przepowiedni zwłaszcza wynika umiejętność którą wyćwiczyć warto mieć pamięci powiedział frank zappa umysł spadochron nie działa otwarty kreatywność disneya celem walta disneya maksymalne wykorzystanie kreatywności pracowników współpracując ludźmi zdawał sprawę mózg lubi optymalizować swoją pracę wpadać powtarzalne schematy jeśli dostaje zadanie wymyślić niesamowitego najpierw chwyta rozwiązań zna oczywiste jako przykład podam warsztaty design thinking organizowane google współpracy pfr em zadań narysowanie największej ilości kreatywnych skojarzeń jabłkiem określonym czasie kolejno ułożonych kwadracikach zadanie wykonywaliśmy osobowych grupach mimo osoby różnych branż specjalizacji pierwsze trzy cztery rysunki każdej grupie zbieżne drugim problemem kreatywności małp instynkt pokazany wcześniejszym eksperymencie poczucie czegoś da uniknąć dwóch zagrożeń skonstruował metodę pokojów o trzech pokojach pokój pierwszy pierwszy pokój nazywany pokojem marzeń tu miejsce miała nieskrępowana burza mózgów tworzenie pomysłów premiowana wyobraźnia nieważne pomysł absurdalny szalony niemożliwy słów niemożliwy pokoju założenie możliwe na przykład spada zaangażowanie pracowników co zrobimy zaprosimy abrahama lincolna wygłosił mowę motywacyjną okej lecimy dalej każdy pracownik otrzyma służbowy samochód pomysł pracownicy pracować godzin tygodniu samą pensję doskonale w pokoju miejsce strach negatywne emocje każdy pomysł powinien zapisany komentowany nie miejsca krytykę zastrzeżenia jeżeli uważamy kierunek słuszny powiedzieć super pomyśl zrobilibyśmy trochę inaczej dzięki inspiracji pomysłów innych powstają kolejne kreatywne rozwiązania pokój drugi może was zaskoczę zaproszenie abrahama lincolna baaaaardzo trudne zrealizowania walt disney uważał wcześnie podcinanie pomysłom skrzydeł zabijanie twierdził przeoczyć pomysł wymaga nutki racjonalizacji albo całego wiadra drugi pokój nazywany pokojem logiki powstał uporządkować powstałe pomysły ocenić kątem stworzenia spójnej logicznej całości o chodziło pomyśle czy chodzi mowę autorytetu zastanówmy autorytetem firmie taką mowę przedstawić samochody wszystkich czy naszym pracownikom potrzebne dodatkowe benefity czy problem faktycznie zmotywuje a dodatkowe benefity faktycznie jesteśmy stanie pozwolić w disneya uwzględniono wszystkie szczegółowe wydarzenia cechy poszczególnych postaci w hr zastanowić budżetem czasem zasobami ludzkimi przeprowadzania projektów pokój trzeci kiedy stworzy jakiś pomysł ciężko zauważyć drodze samokrytyki braki przekonanym genialności zwłaszcza poświęciło czemuś pracy serca zwłaszcza biznesu czasem zejść ziemię mocniej zastanowić zrobić czemu powinno robić takie zadanie pełni trzeci pokój nazywany pokojem krytyki tu ograniczeń skupiać niedociągnięciach lukach pomysłu zagrożeniach wszystko pory zostało stworzone oceniane szczerego serca oczywiście doceniać pomysł faktycznie genialny umówmy rzadko dobre mogło lepsze pointa metoda trzech pokojów stworzenie trzech stanów trzech rodzajów nastawienia oczywiście najłatwiej realizują różne zespoły wykorzystaniem naturalnych talentów można poszczególne podejście wdrożyć własne działanie pozwalając czas nieskrępowanej kreacji wyboru najlepszych pomysłów tworzenia planu realizacji przejść podejścia krytycznego często firmach pierwsze podejścia stronie pracowników a trzecie stronie zarządu warto pomagać kształtować mocno krytycznego podejścia wyręczyć z pewnością przedstawienie pomysłu wypadnie bardziej profesjonalnie wskaże razu zagrożenia możliwe rozwiązania czy jedyna taka metoda oczywiście na takim eksperymencie umysłowym tworzenia konkretnych zadań umysłu koncentrować poszczególnych obszarach kolejnych krokach podejść wyników swojej dotychczasowej pracy podchodzi design thinking a dokładnie empatyzacji definiowania problemu szukania rozwiązań testowania prototypowania jest metoda projektowania pomaga przeciwieństwie tradycyjnego podejścia projektowego kładącego nacisk poszukiwanie jednego prawidłowego rozwiązania odpowiedzi pytanie what is right szuka całej puli różnorodnych możliwych odpowiedzi pytanie what works skutecznie stworzyć adekwatny projekt dsschool stanford edu inną metodą metoda kapeluszy edwarda de bono polegająca spojrzeniu dany problem sześciu różnych perspektyw m in poprzez emocje fakty podejście optymistyczne pesymistyczne ccnews warto podkreślić wszystkie techniki powodzeniem wykorzystywać zarówno pracy zespołowej samodzielnym szukaniu rozwiązań problemów po co daje podejście niesamowite nietuzinkowe rozwiązania przewidzenia metod zastosuje więcej przykładów sposobów rozwiązywania problemów a konkretnie podejść problemu problemu projektowego pisałam i dalej podtrzymuję stosując podejście dojść zaskakujących rezultatów takie metody pozwalają ukierunkować umysł kreatywne myślenie idzie innowacyjność nietuzinkowe rozwiązania pozwala tworzyć lepsze wewnętrzne rozwiązania fantastyczne kampanie wizerunkowe nietuzinkowe rekrutacje dlatego zachęcam was wykorzystania takiego podejścia przetestowania praktyce do dzieła miliarda złotych tyle ostatnim kalendarzowym polskie przedsiębiorstwa wydały benefity pracownicze to spora suma ciągle wzrasta zwłaszcza zestawi informacją przedsiębiorstwach powyżej osób jednego pracownika przypadało benefitów przyczyn galopującego rynku pozapłacowych pewnością wskazać wiele pytanie odnaleźć budżet ograniczony i stosunkowo niemałe bądź pieniądze realnie podnieść efektywność swoich pracowników paulina leja specjalistka spraw rekrutacji it employer brandingu neurosys uwielbia kontakt ludźmi relacje społeczne chce zastanawiać powinien wyglądać a następnie takim tworzyć misję codziennie realizuje hr owiec wyboru bardzo ceni podejście projektowe elastyczność pracy karierę zawodową rozpoczynała firmie outsourcingowej następnie skoncentrowała działalności software house zacznijmy początku benefity pracownicze inaczej pozapłacowe najprościej mówiąc pracodawca oferuje pracownikom wynagrodzeniem pieniężnym benefity dzielą prawo wymaga dobrowolne te obowiązkowe przykład pokrycie kosztów badań pracowniczych zakup okularów korekcyjnych zapewnienie odzieży ochronnej napojów posiłków regeneracyjnych konkretnych grup zawodowych natomiast dodatkowe pracodawcy prześcigają ostatnich latach przykład karty sportowe owoce pracy znaleźć eterze głosy studnia benefitów sięgnęła dna wierzę nielimitowaną kreatywność pracodawców czy benefity ogóle sens w andrew t jebb purdue university wraz swoim zespołem przeanalizował gallup world poll badanie miliona respondentów krajów dzięki któremu wskazał minimalną pensję odczuwamy satysfakcję radość ciekawe maksymalną kwotę przekroczeniu jakość spada minimalna kwota pozwalająca odczuwać spokój przyszłość wynosiła złotych rocznie maksymalna zaliczamy zniżkę satysfakcji rocznie zagłębiając badanie odnaleźć poziom wynagrodzenia uszczęśliwia mieszkańców europy wschodniej mianowicie tysięcy dolarów nieco tysięcy rocznie oznacza statystyczny polak najszczęśliwszy zarabiając złotych miesięcznie uważać kwoty przekroczyć wyniki oparte między innymi kosztach poszczególnych krajach oznacza obniżają koszty przyczynić wzrostu zadowolenia oczywiście ktoś zarabia mniej najszczęśliwszym sobą badania dotyczą wyłącznie aspektu wynagrodzenia a statystyka statystyka drugim moment nieco ważniejszym argumentem fakt obecnie benefity stały wymaganiem rynkowym pracownicy oczekują stanowić argument decydujący zmianie pracy ostatnio moim feedzie linkedin pojawił zestaw najdziwniejszych historii rekrutacyjnych kandydacie odrzucił pracę odpowiadała marka samochodu służbowego wszystkie warunki odpowiednie z kolei znajomy znajomego uzależniał przyjęcie oferty pracy zdalnej dowozić domu kosz owoców przyszłej firmie owocowe a pokrzywdzony to sprawia standardowe benefity prywatna opieka medyczna karta sportowa czasem wystarczają a pracownicy czekają dodatkowe dowody firma dba zabiega co zależy stałym podnoszeniu wynagrodzeń przeznaczamy dodatkowe benefity mieści budżecie dany rok można wprowadzić benefity darmo kilka złotych jakie o zdaję sprawę niejednokrotnie przekonanie zarządu osób zarządzających firmą zmian trudne dlatego postarałam da wyszukać was badania możecie użyć argumentując racje darmowe benefity elastyczne godziny pracy każdy lubi wolność możliwość dostosowania swojego rytmu dnia własnych potrzeb niewątpliwie cennym benefitem są osoby rano nogach tą otwierają oczu dodatkowo każdego dotyczą różne obowiązki wydarzenia wizyta lekarza urzędzie wyjazd okoliczności wcześniejsze przyjście wyjście pracy wygodne a daj boże wyskoczy tygodniu spotkanie posiedzi trochę długo warto zadać pytanie lepiej odespać przyjść trochę później punktualnie bezproduktywnie spędzić czas obserwując miarowo przesuwają wskazówki zegara faktem elastycznych godzin da ale pewno ułatwiają work life balance pozwalając traktować pracę jedną aktywności ciągu dnia którą zorganizować jest tyle ważne badaniach polskich studentów absolwentów prawie połowa uważała praca powinna zmuszać rezygnowania innych rzeczy swoim elastyczne godziny pracy pomóc z kolei badaniu firmy michael page młodych chciałoby mieć wpływ wybór godzin wykonywać obowiązki natomiast raporcie deloitte deloitte millennial survey tysiąca przedstawicieli pokolenia y krajów polski jasno zaznaczyło elastyczna praca kluczowych elementów hcmdeck com oczywiście rozwiązań idealnych zwłaszcza zmiana fixed office hours elastyczne godziny wprowadzić nutkę chaosu do zagrożeń wprowadzaniu elastycznych godzinach przykładowo wzbudzić poczucie braku kontroli przełożonych pracownikami faktycznie przepracowali dodatkowo wkraść chaos komunikacyjny brak możliwości spotkania poszczególnymi osobami przychodzą kilka godzin innych z drugiej strony problemów rozwiązania po pierwsze moich doświadczeń wynika daje ludziom odpowiedzialność kontrolę swojego czasu sumienniej przykładają kontrolują godziny wejścia pewno wyrobić minimum godzin jeżeli kogoś przekonuje zastosować rozwiązanie spotkałam kartami rejestrującymi godziny wejścia wyjścia wchodzimy grunt dodatkowej inwestycji rekomenduję spróbować wolnej ręki pracowników w przypadku problemów komunikacyjnych nauczyć wspólnego planowania spotkań organizacji pracy wprowadzić core hours stałe godziny pracownicy muszą przebywać biurze praca zdalna z niedawnego wykresu wynika drugi darmowy benefit docenią pracownicy dla millenialsów elastyczność wyraża pracę zdalną nie momencie kompletna abstrakcja pracowników polsce przyznaje możliwość realizowania swoich obowiązków zdalnie biurem co trzeci badany takiego udogodnienia korzysta minimum cztery razy miesiącu co więcej możliwość pracy domu doceniana polskich pracowników wskazało ankietowanych badaniu michael page natomiast zgodnie wynikami badania przeprowadzonego profesora uniwersytetu stanforda nicholasa blooma pracowników stwierdziło bardziej wydajni pracując zdalnie oznacza większa połowa pracodawców daje możliwość jaką praca odległość warto nadążać funkcjonującymi trendami w powyższym badaniu respondentów przyznało praca zdalna pozytywnie wpływa zachowanie równowagi między prywatnym a zawodowym warto przyznać ankietowanych stwierdziło rozwiązanie negatywnie oddziałuje harmonię mając uwadze dobro pracowników warto spróbować wizji pracę zdalną wiele na rynku spotkać opcje określonym wymiarem pracy funkcjonującym dzień dni tygodniu słyszałam są firmy dają możliwość obowiązek pracy zdalnej przewidują możliwość pracy zarówno biurze dowolnego miejsca taką firmą netguru istnieją przedsiębiorstwa oferujące pracy zdalnej biuro czasem wpaść funkcjonujące biura faktem osób tyle preferencji jakim stylu chcą pracować znam osoby uznają pracy zdalnej wybierają oferty wyłącznie zdalne uważają dni absolutne minimum choć dowolność wyboru pewnością najwygodniejsza wprowadzając firmie rozwiązanie najbezpieczniej zacząć eksperymentalnego dnia tygodniu jeśli sprawdzi pomyśleć testowym zwiększeniem wymiaru dobrym zakomunikowaniu swoich intencji pracownicy pewnością obrażą workacje nazywane pracowakacjami angielsku workation koncept idei idealnie pracę zawodowe polegający pracownicy pracować zdalnie dłuższy okres tygodnie miesiąc taką opcję większość wykorzystuje przykład wynajęcie domu dobrym wi fi hiszpanii pracy spędzać czas plaży taki pomysł wskazaniem godzinach pracownik dostępny sztywnych godzinach biurowych core hours szybko okazać podróż drugą stronę globu idealnym rozwiązaniem pozwala zmienić otoczenie nabrać trochę dystansu jednocześnie rezygnując wykonywania obowiązków oczywiście kolejny krok wersja pracy zdalnej ktoś chciałby prostu popracować miesiąc domu ale benefit odpowiedniej dozie zaufania bezkosztowy a atrakcyjny płatną wersją workacji zabranie wszystkich pracowników wyjazd taką opcję wybrał zarząd platformy cloudsider razy zabiera zespół słoneczne plaże najpiękniejszych europejskich wysp pracują tydzień inna historia benefity prawie darmowe dziecko pracy pracownik zaplanował ważne spotkanie biurze a okazało zaopiekować dzieckiem czasem praca zdalna rozwiązuje wszystkich problemów warto zakomunikować rodzicom kryzysowych sytuacjach przyprowadzić dziecko pracy jest prawie darmowy benefit siłą rzeczy dziecko wprowadzi trochę chaosu braku skupienia części pracowników z drugiej strony rozwiązanie dać poczucia ogromnego wsparcia pracodawca udziela pracownikowi przecież musiał zgodzić co ciekawe rozwiązanie wspierane ministerstwo rodziny pracy polityki społecznej czym przekonać możecie z badań przeprowadzonych firmę pracuj raport rodzice pracy pełen etat wynika znacząca większość rodziców wyraża przekonanie chciałaby mieć zapewnione przedszkole pracy a duże firmy korporacje zdecydować własne firmowe przedszkole oddziałem przy takim modelu taka placówka przeznaczona pracowników danej organizacji w polsce rozwiązania zdecydował między innymi infosys poland fabryki mebli forte s a ostrowi mazowieckiej suwałkach też ciekawym pomysłem byłoby stworzenie przedszkola biurowcu pociechy pracowników różnych firm mogły integrować różnorodnym przyprowadź zwierzę pracy przyjaciół zwierząt pracowników niemiara można wyjść naprzeciw pozwolić zwierzątkom przychodzić pracy czy opłaca na stronie puriny znajdziemy informacje zwierzęta obniżają poziom stresu zwiększa wydajność zaangażowanie powołują poniższe dane purina poszczególne siedziby gigantów amazon google salseforce zdecydowały rozwiązanie również wework chwaliło wprowadzeniem dnia bring your pet work linkedin com faktem fanem zwierzątek miłośnikom wydaje zupełnie nieprawdopodobne ale serio dlatego radziłabym pójść głosem wework zdecydować dzień zobaczyć sprawdzi pozwoli alergikom zwierzętami prostu przebywają dnia pracować zdalnie ewentualnie przeznaczać konkretne części biura zwierzęta przebywać pamiętać wyedukowaniu pracowników pracy przynieść futrzaki faktycznie pozwolą pracować przypadku dzieci należy godzić pewną dozę dekoncentracji oddanie inicjatywy możliwość zorganizowania akcji charytatywnej kolejnym prawie darmowym benefitem zorganizowanie konkursu przeprowadzenie akcji charytatywnej pieczenie sprzedawanie ciast dom dziecka zbieranie koców karmy schroniska przekazywanie cegiełki chorego pozwól pracownikom wspólnie wybrać cel razem zrealizować to da jednej strony możliwość wpływu rzeczywistość poczucie odpowiedzialności z drugiej wszyscy podkreślają człowiek najlepiej czuje pomóc innym znaczący dopływ endorfin poczucie zjednoczenia wspólnej inicjatywie brzmi fajny zysk cenę godzin pracy danego pracownika integracje planszówki jednym elementów najlepszej pracy lubisz spędzać czas współpracownikami o robimy neurosys poczytać możesz z drugiej strony budżety integracje bywają ograniczone wtedy dobrym rozwiązaniem planszówki biurze kosztem trochę więcej prądu wody a przeprowadzony turniej budzić emocje kilka następnych dni benefity kilka złotych osobę toster firmie zakup tostera opiekacza koszt złotych takie rozwiązanie daje większe możliwości przekąskowe przerwie sprawia nigdzie wychodzić zamawiać jedzenia zjeść ciepło sobą wzięło dodatkowo doświadczenie neurosys pokazało niektórych prostu ekscytujące dające radości rozwiązanie w gestii pracodawcy leży dodatkowy zakup chleba sera przecież obowiązkowy a wspomniałam opiekacz prostu cieszy już mówiąc gofrownicy spotify netflix wyboru koszt spotify złotych osób niecałe złotych osobę netflix złote osoby złotych osobę konkurujące hbo go a wchodzący amazon prime kosztować złotych ceny podawane nadal euro jak widać astronomiczne kwoty faktem wchodzą skład kosztów stałych a sporadycznych wydatków z drugiej strony ciekawym niedrogim pomysłem benefit wyboru wspólna pizza wspólna pizza idealna odpowiedź ucieszyć pracowników kilkanaście złotych można połączyć spotkaniem wewnątrz firmowym pracownicy pewno skoncentrują przyswoją przekazywane informacje wewnętrznym meet upem wnosił wartość dodaną rozwój uczestników dzięki uciec kupowania pracownikom całych posiłków a zgromadzić wspólnej przestrzeni integracja pub quiz o zaletach integrowania chyba rozwodzić wynajęcie osoby zawodowo przeprowadza pub quizy wydatek miara jednak poproszenie pracownika back office przygotował pub quiz stanowić osoby miłą odskocznię kilka godzin pracy wspólna grywalizacja pewno wynagrodzi trud drobne upominki czy warto celebrować naprawdę każdą okazję pewnie każda przesada niezdrowa z drugiej strony warto umilać pracownikom na przykład walentynki najbardziej firmowe słońcem a drugiej strony ciężko kompletnie zignorować i neurosys zdecydowaliśmy każdemu podarować pralinkę kształcie serca stworzyć kartki podobnie sprawa muffinką babeczką innymi drukowanymi kartkami balonikami helem koszt sumaryczny kilka złotych uśmiech twarzy pracowników bezcenny benefity wcale drogie letnie piątki letnie piątki rozwiązanie sezonie wakacyjnym skracają liczbę godzin ostatni dzień tygodnia pozwalając pracownikom szybciej wrócić domu z badania przeprowadzonego firmę badawczą gartner wynika politykę letnich piątków wprowadziło amerykańskich firm różnych branż porównania to całkiem imponujący wynik pokazywać trend niedługo stać standardem flynn zaiger dyrektor generalny agencji marketingowej online optimism daje swoim pracownikom cztery półpiątki wyboru sezonie letnim podkreśla letnie piątki zmniejszają liczbę godzin pracy tygodniu powodują wzrost morale rekompensują czas niespędzony biurze większą motywacją dodatkowo rozwiązanie sprawia produktywność pracowników zachowana a wzrasta pozwalając osiągnąć lepsze wyniki dzięki strata firmy de facto następuje oczywiście niestety fikcja przypadku rozliczania bezpośrednio godziny spędzone biurze projektem dodatkowe dni wolnego podobnie letnimi piątkami dodatkowy urlop możliwość sporadycznego wyjścia wcześniej ukończonej szybciej pracy nieoceniona wartość pracowników brak konieczności siedzenia pracy samego faktu przebywania sprawia nikt czuje marnuje czas a samym poczuje rozwija brak restrykcyjnej kontroli wczoraj wyszedłeś minut wcześniej sprawia duża część pracowników potrzeby zostanie pół godziny dłużej ekstremalną wersją benefitu wprowadził netflix ogóle przewiduje urlopu i oznacza pracownicy biorą wolnego po prostu rejestrują czasu samo sprawdzają pracuje jobs netflix com gojtowska com to samo dotyczy skrócenia tygodnia pracy dalekoidąca ingerencja organizację pracy nowozelandzka firma perpetual guardian wprowadziła rozwiązanie dniowego tygodnia pracy codziennego krótszego standard zachowaniu pensji względu zyski przewyższają straty dodatkowe dni wolnego wyjście naprzeciw czego pracownicy najbardziej czasu siebie rodziny praca skutecznie pochłania rozsądne dysponowanie dodatkowymi dniami wolnego samo letnie piątki zwiększają produktywność pozwalają pełne docenianie pracodawcy zaufanie zaufanie chyba najważniejszy najtrudniejszy benefit wprowadzenia nie brzmi naszej podstronie wolnych ofertach pracy wymieniony innych korzyściach pracy firmie jednak zaufanie podstawa pozwalać pracownikom pracować zdalnie przyprowadzać dzieci zwierzęta pracy a zgodzić wyszli trochę wcześniej kontrolowania każdej minuty to wiara chcą wykonywać swoją pracę najlepiej a manager odpowiadają kiedy brakuje zaufania firmie przerażać nierealnym wymysłem jak zaczynałam pracę software house ie opowiedziałam cioci pełni elastyczne godziny pracy przychodzić wychodzić dowolnych porach nikt kontroluje czasu deklaruje spędziło pracy ciocia przerażeniem wywróżyła rychły upadek firmy wiecie firma dalej funkcjonuje a pracując zauważyłam nikogo traktował wybiórczo zegarek taka moc przekazywania odpowiedzialności a zabierania i benefit najmocniej powyższych wierzę tak widzicie mnóstwo możliwości sprawić miejsca pracy lepsze dotychczas powyżej zaprezentowana lista pomysłów oczywiście otwarta budżet a niebo limitem zachęcam was burzy mózgów waszych firmach nieustannie podnosili efektywność swoich pracowników poprzez motywację budowanie fajnego miejsca pracy media pracuj rp innpoland prawo forbes forbes opracyzdalnej porady pracuj fortune com businessinsider com polityka rekrutacja niezwykle istotny etap budowania doświadczeń kandydata candidate experience to podczas kandydat pierwszy wchodzi dłuższy bezpośredni kontakt firmą dowiaduje czym zajmuje zbiera pierwsze informacje panującej kulturze organizacyjnej doprecyzować wizję siebie firmie paulina leja specjalistka spraw rekrutacji it employer brandingu neurosys uwielbia kontakt ludźmi relacje społeczne chce zastanawiać powinien wyglądać a następnie takim tworzyć misję codziennie realizuje hr owiec wyboru bardzo ceni podejście projektowe elastyczność pracy karierę zawodową rozpoczynała firmie outsourcingowej następnie skoncentrowała działalności software house o cechy idealnego procesu rekrutacyjnego pisałam natomiast samej rozmowy przygotować powinien rekruter dziś chciałabym odpowiedzieć pytania wychodzące nieco dalej utarte ramy rekrutacji chociaż zdarza trzymanie standardów niektórych firm czasami problemem zainteresowanych odsyłam dwóch poprzednich artykułów mianowicie chciałabym pochylić kwestią elementy sprawić rekrutacja pojmowana szeroki długotrwały proces nadzwyczajna lepsza normalna podczas kandydat pomyśli proces outside the box a jednocześnie zachowując wysoką skuteczność działań szybciej lepiej mocniej wiele nagłówków krzyczy instant millenialsi chcą mieć czy faktycznie mieć temat inną dywagację faktem natomiast funkcjonujemy rzeczywistości dużego popytu rynkowego wykwalifikowanych specjalistów a jednocześnie niedostosowywanie nastrojów społecznych zachowań potencjalnych pracowników przynieść strat pozbawić dostępu ekspertów be mobile zacznijmy podstaw zwłaszcza latem maleje liczba godzin spędzanych laptopem a wzrasta przeglądanie stron internetowych telefonie byłoby wykorzystać trendów korzystania społeczeństwa internetu wyjść naprzeciw kandydatom jak korzystają internetu za mają gojtowską powołać wykres korzystania poszczególnych urządzeń gojtowska com możemy dodać użytkowników wróci stronę wyświetlała wersji mobilnej powyższe dane jednoznacznie laptop komputer niekoniecznie pierwszym wyborem kandydata a wnioski płyną rekruterów takie zakładka kariera oprócz super projektu wersję webową powinna zaprojektowana wersji mobilnej poprawnie wyświetlać kandydat wpadnie messengerze ofertę firmy przejdzie laptopa poziomu urządzenia mobilnego searchował daną firmę jeśli wersji mobilnej zrazi możliwe ucieknie be easy czy zdecydowanie zakładamy kandydat dostał stronę znajduje formularz wypełnienia wieloetapowa przesłania cv przecież zwykle telefonach potrafi stanąć aplikującym drodze warto rozważyć opcję dzięki załączyć wyłącznie link linkedin a chmurowego dysku kandydat wrzucił cv konieczności załączania dokumentu wszystkie chwyty dozwolone sprawią formularz rekrutacyjny najbardziej uproszczony dzięki potencjalny przyszły pracownik zdąży zdemotywować odłożyć przygotowywania wysyłania cv później według social press powołuje elevato kandydaci pasywni wszystkich pracowników nie szukają aktywnie pracy wyświetli ciekawego mogliby rozważyć takie osoby gotowego cv uniemożliwienie zaaplikowania najprostszy pozbawić firmę kandydatury a przecież założyć pomimo kandydatami pasywnymi znajdują potencjalnie wartościowi pracownicy be for them czy zrobić lepiej otóż tu dochodzimy pointy pełnej dostępności organizacji spotkań kandydatów chodzi akcję kandydaci zadać wszystkie nurtujące pytania najistotniejsze dostają natychmiastową odpowiedź jest moment firma pełni otwarta chętna pomocy odpowiadała pytania dotyczące projektów pomagała cv juniorom szukającym pomocy doborze zawodowej podobny mechanizm wykorzystuje przykład capgemini podczas dyżurów rekrutacyjnych greatdigital idea prosta godzinne spotkania promowane specjalistów obsługujące firmowe media społecznościowe prowadzone rekruterów employer brandingowców po pięciu pilotażowych spotkaniach firma zdecydowała organizację dyżurów miesiącu najmniej końca chcecie wiedzieć więcej całkiem fajnie opisane pozytywny feedback zebrała akcja potwierdza kandydaci chcą najprostszego najszybszego procesu rekrutacyjnego sneak peak zmiana pracy niezwykle emocjonująca stresująca wielu kandydatów najgorszy wysoki poziom niepewności brak danych dotyczących firmie którą kandydat zdecydować naprawdę mój przyjaciel ostatnio tłumacząc swojej babci czym zajmuję powiedział paulina stara pracownicy firmie szczęśliwi i niemal pełni prawda zależy zadowoleniu kandydatów myślę większość rekruterów hr owców skoro wiemy problem brak wiedzy kandydata danej firmie faktycznie możemy wyjść naprzeciw o technologii pierwszym rozwiązaniem obecność dodatkowej osoby rekrutacji nie takiej zadawać pytania a pracownika projektu rekrutowany dołączyć dzięki przekazać informacje swoją perspektywę projekt pierwszej ręki słowami specjalisty a rekrutera managera dzięki przyszły pracownik zadać wszystkie nurtujące pytania odnośnie merytorycznej części o teamie nie samą technologią merytoryką człowiek wśród oczekiwań kandydatów stosunku przyszłego miejsca pracy niezmiennie królują odpowiedzi oczekuję rozwoju super atmosfery oczekuję super atmosfery rozwoju dowiedzieć kim pracować zasadzie poznać to natomiast zrobić sposoby pierwszy polega pozytywnym przejściu procesu rekrutacyjnego a swoją finalną decyzją kandydat zapraszany wspólne popołudnie teamem można iść planszówki zrobić grilla dzięki sprawdzić atmosfera panująca pomiędzy członkami zespołu odpowiednia inaczej odpowiadająca wyobrażeniom kandydata jest drugi polega przejściu pozytywnie procesu a podjęciem ostatecznej decyzji zaprasza kandydata wspólny dzień pracy nie dniem idealnym pojawi pewna dysproporcja polegająca braku wdrożenia projekt jednak będąc teamu przyglądając zadaniom rytmowi kandydat poczuć atmosferę teamie oczywiście opcja angażuje energii zarówno stronie kandydata a zespołu managera firmy z drugiej strony dać spojrzenia okiem firmę cenny feedback a ogrom wiedzy mniej niepewności o szefie nie współpracuje ceo wszyscy pewnym stopniu zależni taka rola szefa warto zorganizować spotkanie finalną decyzją dzięki ceo wpływ załogę płynie statkiem zaprezentować dać kandydatowi możliwość poznania sam rekrutowany mógł nieco bardziej poznać wartości panują firmie chyba szef lubi mówić zastanowić osoba którą choćby sporadycznie współpracować oferta odrzucenia robert frontendowiec tygodni męczył pracy toksyczna atmosfera niskie wynagrodzenie słabe projekty w zeszłą otrzymał linkedinie ofertę zatrudnienia wszystko brzmiało ciekawie zrażony obecnym doświadczeniem dosyć sceptycznie podchodził wszystkich obietnic wybrał spotkanie rekrutacyjne podczas rekruterka mówiła firmie szczerze dużym zaangażowaniem a robertowi chyba poszło całkiem nieźle z drugiej strony znał najstarszy rekruterze poszedł dzień próbny nieba piekła racjonalnie wybrał piekło a następnego dnia okazało okropnie poprzednio dzień próbny ku zadowoleniu dostał zaproszenie weryfikację techniczną koniec przyszedł reactowiec pracujący projekcie trafić bez ogródek opowiedział super denerwuje zważył plusy minusy ostatecznie brzmiało fajnie tymczasem natalia rekruterka software housie ostatnio testuje publikacje ofert pracy linkedinie otrzymała tydzień cv reactowca na początku nieufny szybko rozkręcił chwili rozmowy wiedziała super pasował zespołu zmotywowany zmiany pracy super projekty koncie oprócz ostatnich miesięcy wiedziała przejdzie pozytywnie weryfikację techniczną nie myliła wiecie zwykle kończy taka historia telefonem mailem ofertą super wszyscy zadowoleni ale wiecie zakończyć telefonem kandydata przyjdzie paczka i domu ewentualnie zamaskowana paczka pracy a pisemne gratulacje oferta pierwsza część welcomepacku kandydat pozytywnie przeszedł rekrutację wiedział stać częścią firmy wtedy kandydat ofertę odrzuci chociaż takiej zrezygnował codziennie pić kawę firmowego kubka ciepło myśleć takiej niesamowitej ofercie rekrutacji którą przeszedł jeśli natomiast przyjmie początku budować relację firmą prywatnym gruncie i want play a game czy rozmowa ulubiony prezentowania kandydatów niekoniecznie czasem woleliby zaprezentować umiejętności zwłaszcza przypadku analitycznego strategicznego myślenia jak pozwolić wykorzystać grywalizację jest wykorzystanie schematów gier innych kontekstach przykład pomocą rozgrywki sprawdzić poziom zaangażowania reakcję sukcesy porażki kandydatów przykładem grywalizacji zastosowanej rekrutacji rozgrywka stworzona firmę l oreal studenci absolwenci mogli wejść rzeczywistość firmy a osiągali najlepsze wyniki wychwytywani rekruterów mogli lepiej zaplanować karierę filmik zobaczenia natomiast firma luxoft stworzyła grę klimacie rpg uczestnicy rozwiązywali kolejne zadania mogli sukcesy najlepszych uczestników graj kartami masz czasem wszystkie rozwiązania wydają oklepane wtedy przenieść uwagę siebie jesteś firmą it posiadacie niesamowity produkt daj powszechny dostęp poproś rozwiązanie rozwiązanego problemu rekrutacja służy darmowej siły roboczej sponsorujesz wspierasz schronisko może rozmowa odbyć spacerze psem jesteś firmą marketingową spotkaj kandydatami evencie czy firma produkcyjna wiesz ugryźć a wszyscy kandydaci wspólną pasję oglądania meczów najlepiej porozmawiać piwku meczyku w końcu kandydat prędzej zacznie czuć swobodnie oglądając mecz spotkanie fanów footballu sprawi rozmowa lepsza oczywiście rozwiązania powinny dobrowolne miłośnikiem psów niektórych rekrutacja powinna formalna należy uszanować jedną firm wykorzystała możliwości mercedes benz zaproponowała przeprowadzenie rekrutacji swoich samochodów kandydat wsiadał auta prowadzonego sprawnego kierowcę wykorzystywał pełni możliwości maszyny w czasie kandydat speed dating ceo lisbońskiego oddziału filmik wrażenia specjalistów możecie zobaczyć ktoś widział serdecznie polecam innym przykładem firmy wykorzystała swój potencjał heineken nie postanowił przeprowadzić rozmowę rekrutacyjną inna wszystkie wykorzystał sponsorem champions league podsumowanie procesu możecie zobaczyć podsumowując czy pomysły zgodne naszymi branżowymi przyzwyczajeniami niestety ciężko zaakceptować rekrutację cv chociaż miejscu warto dodać rozumiem argumenty wskazujące zależy ci zmianie pracy dasz radę przygotować strony swojego resume którą cały zespół wkłada energię zakończoną pierwszymi dodatkowymi nakładami finansowymi kandydata oferty przyjął ale możliwe sprawić firma postrzegana bardziej wyjątkowa nastawiona kandydata zdecydowanie do osób zarządzających budżetem należy wybór nagroda warta ceny co zrobić rekruterzy każdego dnia dzień starając ulepszyć rekrutację odpowiadać aplikacje kandydatów ciągu samego maksymalnie dwóch dni wiem możliwe warto starać proponować terminy spotkań rekrutacyjnych nieodległym czasie starać dostosować godzinowo proponować możliwość przeprowadzenia zdalnie chętnych zapraszać minut osoby projektu kandydat trafić poznali dodatkową perspektywę obowiązków w całym pośpiechu pamiętać mieć czas spokojnie skupieniem pochylić aplikacją kandydata samym w końcu interesu firmy priorytetem pulshr nofluffjobs com adnext czy znasz odpowiedź pytanie wydać pozyskać specjalistę jest niezwykle istotna kwestia zarządzaniu budżetem hr owym budżetem firmy podczas pracownika istotne jaka kwota zmianie pracy pojawi koniec miesiąca koncie pracodawcy nowa osoba kolejna pensja co więcej kwota rękę pracownika kropla morzu kosztów generuje paulina leja specjalistka spraw rekrutacji it employer brandingu neurosys uwielbia kontakt ludźmi relacje społeczne chce zastanawiać powinien wyglądać a następnie takim tworzyć misję codziennie realizuje hr owiec wyboru bardzo ceni podejście projektowe elastyczność pracy karierę zawodową rozpoczynała firmie outsourcingowej następnie skoncentrowała działalności software house dlaczego rekruter powinien wiedzieć kształtują ukryte koszty rekrutacji bardziej konsekwencji swoich propozycji umieć zarządzać budżetem zanim pochylimy kwestią wydatków zaznaczyć istotne kwestie po pierwsze rekrutację przeprowadzić wewnętrznie zlecić zewnątrz a zależności wyboru rozkład kosztów przedstawia różnie jest oczywiste warte zaznaczenia po drugie proces rekrutacji mocno zmienia wraz wzrostem organizacji startup zatrudniający osób rekrutuje zupełnie inaczej korporacja ciągłe zapotrzebowanie poziomie kilkunastu kilkudziesięciu specjalistów samo dotarcie kandydata niezwykle kluczowe celem dotarcie jednego specjalisty nakład pracy rozkłada inaczej potrzebujemy w drugim przypadku wliczyć koszty marketingu rekrutacyjnego narzędzi analitycznych dodatkowym elementem kwestia pozycji marki pracodawcy a konkretniej kandydaci darzą zaufaniem oferta pracy wiarygodną obietnicą mówiąc nieco bardziej obrazowo statystyczny specjalista deep learningu otrzyma propozycję openai większym prawdopodobieństwem zareaguje pozytywnie przekłada wysoką konwersję ofert pracy ilość przesłanych wartościowych aplikacji zapoznaniu zobaczy ofertę p h u januszex dlatego chciałabym zaznaczyć jednej stałej kwoty którą ponieść rekrutacji ba możliwe przeprowadzenie jednej rekrutacji mocno mówi kosztach jednak chcąc ustandaryzować proces rekrutacji mieć dynamiczny stabilny pipeline kandydatów liczyć kosztami zasadzie da uniknąć a warto pamiętać czas więcej szczegółów kalkulatory dłoń lecimy zacznijmy kosztów rekrutacji jak wspomniałam rekrutację przeprowadzić wewnętrznie zewnętrznie różnym kosztem zacznijmy rekrutacji przeprowadzonej wewnętrznie rekrutacja darmo być spotkaliście protekcjonalnym podejściem pracy rekrutera narzędzi potrzebujecie albo podejściem sumie rekruter potrzebny szef zrobić bezkosztowo jak rekrutować niemalże darmo nic prostszego ceo przygotowuje ofertę pracy wrzuca dedykowane grupy facebooku czeka w optymistycznej wersji historii projekt konkurencyjne warunki finansowe dostaje kilkanaście aplikacji nic prostszego teraz zapoznać dokonać selekcji osób wyglądają ciekawie spotkać kilkoma nagle okazać aranżowanie spotkań wyzwaniem końcu dogaduje być udokumentować wnioski spotkaniach przyszłości móc wrócić kalkuluje wynagrodzenie składa ofertę najlepszemu kandydatowi jeśli szczęście odbędzie dodatkowych negocjacji pytań ponadto nowy rynku uda uniknąć konieczności zakupienia komputera firma pracuje wyłącznie zdalnie jednak wzbudzić zaufanie kandydatów najczęściej aspekty niemożliwe jeśli rozkręca swój biznes potrzebę stworzenia nowego stanowiska siebie firmie koszty rosną przecież oczywiste chociażby dokupić biurko krzesło a komputer dodatkowy monitor ceny najtańszych biurek wyglądają miały chwilę rozpaść oscylują granicach złotych monitor zdobyć złotych krzesło kolejne złotych w miarę sensowny komputer programisty cena złotych ponadto warto zauważyć ktoś miejsce pracy przygotować powierzchnia biurowa oparciu przepisy związane minimum metrów kwadratowych pracownika biuro wrocławiu obrzeżach miasta kosztuje netto vat metr oczywiście centrum cena powierzchni biurowych potrafi przekraczać metr wszystkie wydatki powodują przeliczeniu comiesięcznej pensji pracownika doliczyć minimum złotych jednak wspomniane zaokrągleniu stanowi największy problem a czas mógłby mogłaby zajmować czymś innym realizacją swoich projektów zadań krótko mówiąc zarabiać wyżej opisane czynności dużym pośpiechu zajmą zakładając trzy spotkania rekrutacyjne godzin jest zatem dzień spędzony pozyskaniu specjalisty a kandydaci przysłali wielu aplikacji oczywiście możesz wejść linkedin ceo firmy spory odzew tu pojawia podstawowe pytanie biorąc uwagę swoją stawkę godzinową wycenia swoją pracę właśnie tyle stracił straciła rekrutacja wewnętrzna dobrze prosperujące większe firmy zadały pytanie dotyczące sposobu rekrutacji zatrudniają rekruterów rekruterki wolą zapłacić specjalistom szybciej skuteczniej pozyskują talenty płacąc jednocześnie mniej ceo stracił poświęcając swój czas wykonując zadania widełki rekruterów branży it ciągle rosną obecnie przeciętnie wynoszą złotych brutto umowie pracę oczywiście oferty powyżej poniżej widełek znalazła oferta netto b2b mówimy osobach zajmują wyłącznie rekrutacją przypadku innych kompetencji widełki przedstawiają inaczej koszty pracodawcy wynoszą wówczas złotych załóżmy znalazłeś aś fajnego pracownika któremu płacisz stawkę dokładnie pośrodku kwoty twoje miesięczne koszty wynoszą nieco złotych komputer powierzchnię biurko krzesło powiedzmy rekrutacja zajmuje dni roboczych włączając przygotowanie oferty publikację portalach dedykowanych grupach facebooku direct search spotkania rekrutacyjne komunikację kandydatem umawianie weryfikację techniczną przygotowania podsumowań kandydatów to oznacza rekrutacja koszt zaokrągleniu złotych trzeba pamiętać rekruterowi pracy potrzebne narzędzia podstawowym ogłoszenia pracę najczęściej płatne na przykład portalu justjoin it ogłoszenie kosztuje portalu pracuj wciąż najpopularniejszych portali ogłoszeń zapłacimy złotych kolejnym linkedin wersji rekruterskiej wersja lite bardziej podstawowych uprawniająca wysłania inmaili miesiącu kosztuje euro miesięcznie rekruter corporate złotych miesięczny dostęp powiedzmy rekruter szeroką sieć kontaktów a rekrutacje rozbudowane koszt plasuje poziomie złotych miesięcznie załóżmy naszym scenariuszu firmie zależy dotarciu wyłącznie programistów koszt narzędzi podczas rekrutacji złotych trzecim narzędzi kosztów ats rekruter dokumentować swoją pracę ceny systemów różne złotych możemy przyjąć kosztują złotych rekrutacja miała sens potrzebne dokładne zdefiniowanie potrzeb firmy a podczas następnych kroków weryfikacja techniczna przeprowadzona leadów technicznych seniorów danej technologii oszacujmy pierwszy aspekt koszt pół godziny godziny pracy project managera hiring managera nazwijmy ogólnie pm ami stawki tychże pm obecnie różnią rynku przyjmijmy ułatwienia obliczeń stawkę złotych w przypadku weryfikacji technicznej każdorazowo koszt dwóch godzin pracy programisty przygotować sprawdzić git a zadanie przekazać swoją ocenę w związku doświadczona osoba przyjmijmy zarabia h przy weryfikacji osób złotych koszt takiej rekrutacji wynosi złotych plus jednorazowo złotych sprzęt rekrutera dopiero szukał nowych pracowników koszt sprzętu podwaja dodajmy koszt sprzętu nowego zrekrutowanego pracownika opisałam wcześniej stawka dobija złotych sam sprzęt ktoś przygotować warto wspomnieć kosztach dodatkowych artykułów spożywczych typu woda herbata czystości biorąc uwagę ostatnie koszty dobijmy złotych przy rekrutacji wewnętrznej wiele firm wewnętrzny system poleceń oscyluje granicach między a skuteczne polecenie tę kwotę niekiedy uwzględnić rozliczeniach rekrutacja zewnętrzna tak wspomniałam rekrutację zlecić firmie zewnętrznej stawki firm outsourcingowych mocno zróżnicowane duża część proponuje kwoty między miesięcznego wynagrodzenia kandydata mniej złotych często pracują zasadach success fee zlecając rekrutację ponosi dodatkowych kosztów uśredniając kwotę oczywiście zależy stanowiska zatrudniamy mówić kwotach tysięcy złotych wynagrodzenia agencji zakładając szukamy programisty poziomie mid wynagrodzenie złotych przyjmijmy kwota wynosi złotych dodatkowo kandydaci agencji zewnętrznej weryfikowani programistę rekrutera powiedzmy kosztuje złotych wciąż pamiętać sprzęcie kandydata wysokości min złotych koszt rekrutacji kandydata wynosi złotych onboarding już boli cię głowa sum to koniec każdy nowy pracownik wiąże obowiązkami firmy w przypadku osób zatrudnionych umowę pracę mówimy badaniach medycyny pracy przypadku braku czynników szkodliwych złotych szkolenie bhp korzysta usługodawców złotych kadry płace osobę miesięcznie dni urlopu de facto miesiąc wypłaty pracy obsługa dokumentów pracowniczych mówiąc przygotowaniu samej umowy te elementy możemy zlecić zewnętrznej firmie oczywiście płacąc obowiązki wygenerują konieczność zatrudnienia dodatkowej osoby office managera poświęci elementy przygotuje plan pierwszego dnia pracy dzień stawka zlecenia elementów usługodawcom jednego dnia pracy takiej osoby wynosić złotych chociaż zasadzie sky is the limit dodatkowo pierwszy dzień obfituje szkolenia narzędzi wprowadzenie projektu itp nawet uznamy project manager poświęca pierwszego dnia danej osobie godziny złotych a senior programista godzinę złotych czasie przynoszą bezpośredniego zysku firmie swoją pracą spędzają wdrażaniu kolejnej osoby wiemy kończy słyszałam kiedyś pracownik korporacyjny zaczyna zarabiać siebie trzech miesiącach wcześniej porusza narzędziach sprawnie ważniejsze zajmuje czas innych wydajnych pracowników potwierdzenie stwierdzenia znaleźć możemy stronie e recruitera powołuje raport best practices for onboarding ensuring successful assimilation opublikowanego human capital institute przeczytać możemy raportu wynika osoba wchodząca nową rolę organizacji pierwsze trzy miesiące konsumuje wartość równą trzem miesiącom swojej późniejszej pracy po przekroczeniu progu praca zaczyna przynosić organizacji wartość dodaną dopiero upływie sześciu miesięcy pracy pracownik dostarcza większą wartość uprzednio pochłonął przyjmując bardziej optymistyczną wersję dodajmy kosztów zatrudnienia trzy miesiące pensji nowego pracownika wynagrodzenie czas najważniejszy koszt wynagrodzenie z osobami nawiązują współpracę zasadach b2b sprawa kosztem kwota netto fakturze co prawda stronie programisty kwestia opłacenia ubezpieczenia społecznego zdrowotnego podatku zatrudniającego interesuje powszechną praktyką uwzględnianie obciążeń kwocie netto zawartej wystawionej fakturze tym samym kandydat mieć rękę według kalkulatory nf wystawić fakturę wysokości netto vat warto dodać mówimy współpracy urlopów dodatkowych typu urlop chorobowy uznajmy budżet pracodawcy złotych osoba zmieścić budżecie umowie pracę otrzymać złotych kwota brutto umowy natomiast koszt pracodawcy uwzględniający składkę ubezpieczenie emerytalne rentowe dobrowolne ubezpieczenie chorobowe ubezpieczenie zdrowotne zaliczkę podatek wyniesie złotych pracownik osoba zatrudniona umowę pracę chciałby dostać rękę złotych umowie pracę kosztować pracodawcę uff podsumowanie kosztów przyjmijmy kandydat zgodził mniejszą kwotę netto b2b rękę jeżeli osoba zrekrutowana wewnętrznie pracownikiem wliczam kosztu sprzętu rekrutera sumując wcześniej wyszczególnione kwoty ukryty koszt rekrutacji wyniósł złotych wliczając wynagrodzenia danej osoby jeżeli płacimy złotych polecenie stawkę uwzględnić jeżeli osoba zrekrutowana agencję koszt takiej osoby sięga złotych licząc wypłaty warto pamiętać nawiązanie współpracy zasadach umowy b2b najtańsze chyba rekrutujemy agencję wówczas zapłacimy mniej odnosząc kwoty brutto a kosztów pracodawcy dochodzi obowiązków zakresie dokumentów większa odpowiedzialność pracodawcy pracownika muszę podkreślić przedstawiałam mocno wypośrodkowane ograniczone kwoty wzrost pracodawcy wymusza rozwiązania bardziej złożone dawno wyczytałam całkowity koszt rekrutacji wysoko wykwalifikowanego pracownika złotych korporacji liczba najbardziej prawdziwa zwłaszcza większy pracodawca większe nakłady przeznaczać marketing rekrutacyjny płatne kampanie wówczas kwoty przekroczyć zespół marketingu rekrutacyjnego postaci osób stawką złotych płatne kampanie facebooku linkedinie etc oczywiście część kosztów rozkłada wiele rekrutacji linkedin rekruterski system ats inne sprzęt amortyzować czasie z drugiej strony pracodawca ponosi ryzyko rekruter skuteczny zobowiązany wypłacić wynagrodzenie jak wspomniałam początku ciężko wskazać jednoznaczny koszt wliczając trzymiesięcznego okresu kandydat siebie zarabia ograniczonych kosztach wypłaty prawie rekrutacja wewnętrzna outsourcing złotych a bardziej rozbudowanych działaniach bardziej zaawansowanym sprzęcie wykupieniu dodatkowych narzędzi kwoty podwoić dopiero kwoty doliczyć możemy wynagrodzenie co związku po pierwsze najważniejsze proponując rozpoczęcie rekrutacji kwot a osoby odpowiedzialne zarządzanie budżetem muszą gotowe koszt większości da zniwelować warto zastanowić koszty gotowym celu pozyskania odpowiedniego talentu w momencie skoncentrować badaniu rynku przemyśleć publikację odpowiedniego zakresu zadań widełek mając rozminięcie dostępnymi talentami przyniesie kolejne koszty można rozważać ewentualne podniesienie widełek liczyć zamortyzują kontekście szybkiego zamknięcia procesu rekrutacji posługując tymi liczbami przekonać rozwiązań szefów po drugie warto dbać swoich zatrudnionych pracowników awansować wyższe stanowiska dzięki rekrutacja otwierana wyłącznie niemal wyłącznie przypadku rozwoju firmy a względu odejścia dodatkowo rekrutacja wyższe stanowiska najczęściej bardziej kosztowna zwłaszcza przypadku korzystania pomocy agencji może argument intensywniejszego długoterminowego inwestowania talenty po trzecie należy dbać hr chociaż komu mówię zajmuje pozyskaniem utrzymaniem talentów warto uświadomić strategiczną pozycję możliwość dużego ograniczenia kosztów firmy przypadku sprawnych skutecznych działań wspaniale obaj gracze rynku pracy postaci firm pracowników uświadomili pozycje kandydaci doceniali pracodawców inwestycję jaką drudzy poczyniają rzecz starali wybierać miejsca pracy nadzieją ustalono inaczej długofalowe relacje warto mieć zupełne oderwanie racjonalnej oceny rynkowej wartości swoich kompetencji doprowadzić dalekiej perspektywie raczej upadku pracodawców eldorado niebotycznych wynagrodzeń wszystkich z drugiej strony warto pracodawcy uświadomili lepiej tworzyć szczere przemyślane oferty pracy należycie wynagradzane stanowiska obranie przeciwnego niedopłacanie pracowników pracę nierealnym wymiarem zadań dalszej perspektywie przyczyni wzrostu rotacji nakładu ogromnych kosztów trzeba godzić taniości prosperującej firmy zbuduje gotowym zainwestować kapitał ludzki
jakoś trzu lata doszły słuchy unii europejskiej miliona nieobsadzonych wakatów branży it niestety przewidywania sprawdziły już końcówce początku dobito takiej liczby część stanowisk stanowią administratorzy część testerzy część programiści analitycy dalej rafał kozłowski senior software engineer credit suisse posiada grubo profesjonalnego doświadczenia zbliżającego nieubłaganie pracuje głównie technologiach net zarówno framework core wielkim sympatykiem angulara architektury używającej mikroserwisy zagorzały zwolennik domain driven design command query responsibility segregation single page application część ludzi zaliczają it rozumie czymże it bo wiedzieć dla it osobnik umie komputerem dogadać wymienić wentylator robi głośny albo windowsa umie zainstalować ewentualnie każdego dnia klika komputer pieniądze zarabia mógłby pożytecznego zrobić przykład zostać hydraulikiem mechanikiem a bardziej poważnie to ludzie spoza it wiedzą wiele dziwi nikogo ja chirurgii naczyniowej wiem zbyt wydaje niemal jakąś magią wiedzą tajemną prostu znam gorzej ludzie pracują naszej branży sami wiedzą czymże powstała serio zdarzają tacy kiedyś słyszałem jednego człowieka branży it skrót informatyka nic bardziej mylnego it skrót information technology co znaczy ludzkie to znaczy tyle it innego nauka temat przechowywać przetwarzać przesyłać informacje głównie pomocą urządzeń elektronicznych zwanych komputerami komputery same siebie przetwarzają konkretnych informacji to głupie pudełka a dzięki wynalezieniu jakiś czas pierwszych programowalnych mikrokontrolerów możemy programować przekazać sekwencję instrukcji dzięki wykonają jakieś polecenie jak kiedyś wytwarzano oprogramowanie dobra komputer alfą omegą mieć oprogramowanie ułatwia ludziom tak działa to ludzie uruchamiają bierze ekranie kosmosu ktoś musiał wymyślić napisać przetestować sprzedać dostarczyć jeśli jesteś osobą pracującą it masz pojęcia wygląda proces wytwarzania oprogramowania to chociaż czasem zdarza jakiś kujon siedzi swoim pokoju wypiekami twarzy pisze jakiś program w przypadku większości dużych rozwiązań takiego mogło powstać tle stoi cały sztab ludzi w latach dziewięćdziesiątych niektóre firmy trzymają chociaż podejściu wróżę przyszłości wytwarzanie oprogramowania wyglądało prawie samo produkcja czegokolwiek czyli proces wielomiesięcznej analizy dyskutowano stworzyć działać następnie proces wielomiesięcznej a raczej wieloletniej implementacji całe zastępy programistów po faza testów poprawek czasami przeplatana akceptacją strony góry dzięki takiemu rozwiązaniu latach wymyślenia hiper mega fajnego pomysłu program wydaniu milionów dolarów analizę implementację testy poprawki dumą przerażeniem oczach stwierdzić zostało dostarczone nieaktualne konkurencja oddała podobne oprogramowanie rok wcześniej zagarniając większość rynku poza oprogramowanie pomimo wielomiesięcznych testów dalej niedoskonałości rozwiązania różnią autorzy mieli myśli aczkolwiek oprogramowanie robiło dokładnie rozpisane wielostronnicowej analizie przygotowanej całe zastępy analityków szukano rozwiązania miesiącach pracy pokazać szefostwu co zatem poszło gdzie popełniono błąd wiele osób próbowało odpowiedzieć pytanie wiele osób poległo jednak znalazła grupa osób branży it udało zbliżyć odpowiedzi może ustalili poszło ustalili robić prawdopodobieństwo sukcesu zwiększało czasem a zmniejszało miejsce podejściu dziewięćdziesiątych waterfall w waterfall fazę planowania analizy a następnie implementacji następuje faza testów wdrożenia wielkim uproszczeniu każda faz obarczona ryzykiem ktoś zrozumie ktoś zinterpretuje ktoś zaimplementuje ktoś przetestuje rysunku poniżej tak narodził agile idea zachęcała mieć krótki sprint biegiem gonimy mety naszym zadaniem dowieźć cokolwiek dlaczego cokolwiek bo lepsze wcześniejsze wielomiesięczne dowożenie niczego w związku każda faza obarczona ryzykiem a systemy budowano razu kombajny robiące włącznie kawą pianką rysunkami koniec projektu cieszono dowieziono mniej funkcjonalności dlatego grupa zebrała a m in martin fowler kent beck robert c martin innych dobrym alkoholu próbując znaleźć rozwiązanie i udało tak narodził agile wraz agile manifesto jego głównym założeniem odróżnieniu klasycznego podejścia wytwarzać oprogramowanie krótkich okresach zwanych sprintach biegiem gonimy mety naszym zadaniem zespołu dowieźć cokolwiek dosłownie cokolwiek dlaczego mało bo więcej dowiezienie niczego cyklu wielomiesięcznym zdarzało podejściu waterfall pierwsze sprinty trwały tygodni pomyślenia następnie skracano miewamy sprinty tygodniowe a czasem krótsze na tamte czasy krótko znaczyło tygodni dosłownie uważano sześciotygodniowy sprint prawdziwy sprint dziś potrafimy mieć sprinty tygodniowe a czasem krótsze nie razu rzym zbudowano naście zaczęto okresu akceptowalny ogółu nikt uwierzyłby przecież wcześniej zajmowało dosłownie lata skrócone miesięcy tygodni te tygodni okresem tyle krótkim biznes managerowie cała reszta stanie uwierzyć zostanie zrobione po udowodnieniu podejście działa stopniowo skracano okres czasem sprinty trwające godziny problem agile zbyt dosłowną implementacją dziś ciężko wyobrazić pracować agile niemal każdej ofercie programistów testerów metodyka wymieniana atutów w innych brak wymienienia domyśle agile gdzieś bo niby cóż innego na niedziałającym waterfallu zbyt wielu przejechało aczkolwiek garstka trzymają może akurat działa kto metodyka wygląda doskonałe remedium problemów wytwarzaniem oprogramowania pewno czy minusów potrafią zamiast usprawniać psuć młody dynamiczny zespół składający sześciu osób prawdopodobny częsty cząstkowy opis występujący propozycjach pracy i grup omawiana technika sprawdza doskonale samoorganizujące zespoły sprawdzają momentu ktoś bierze agile zbyt dosłownie traktuje wszystkie zasady literalnie jakie problemy generuje agile takie literalne przesadne podążanie pryncypiami wygenerować następujące problemy przykładów mnożyć mnożyć czy znaczy pracy zły nic bardziej mylnego chodzi prostu zachować umiar każde ekstremum groźne dążące raczej samozagłady dostąpienia mitycznej nirvany ważne zachować umiar tak wszystkim zasad agile należy stosować zbyt dosłownie zamiast pomóc rozwiązaniu problemów zaszkodzić zakładając robione przesadności omawiana technika potrafi generować zaskakujące efekty można dostarczać rozwiązania szybko sprawnie ale jakieś wszystko pięknie działa poziomie pojedynczego zespołu a przypadku współpracy wielu zespołów pracujących takim systemie zgodnie zasadami agile zespół dostarczać wartość bazując informacji zwrotnej dostarczać wartość robić wdrożenie produkcję da przy zespole działa perfekcyjnie przy wielu działa hmm naprawdę nikt końca można powiedzieć przecież wiedza działa i wiedza zawsze możesz wiedzieć jakim etapie pojedynczy zespół ale jakim etapie całe oprogramowanie pracuje przykład grup zwłaszcza dochodzi zależności między zależy drugiego drugi piątego a piąty siódmego nie wspominając siódmy zależy pierwszego tak mnożyć kółko scrum of scrums spotkania managerów przedstawicieli zespołów ustalić jesteśmy ale obarczone ryzykiem przedstawiciel scrum master product manager mieć niepełną wiedzę wiedzę zafałszowaną takie rozwiązania pomagają komplikują cały system podwaliną prostota między innymi chodziło ojcom założycielom agile waterfall obarczony ryzykiem zbyt elementów pośrednich analiza deweloperzy testerzy managerowie zarząd klient itp a element zwiększająca złożoność większa szansa porażkę jak problemy obejść a rozwiązać problemy w prosty prostu usiąść rozwiązać a bardziej poważnie przypadku problemów zbyt literalnym traktowaniem zasad należy poluźnić trochę szelki rozwiązać krawat rozpiąć górny guzik koszuli następnie wziąć głęboki oddech przypomnieć mówi agile ludzie interakcje ważniejsi procesy narzędzia działające oprogramowanie ważniejsze dobra jakakolwiek dokumentacja techniczna współpraca klientem ważniejsza negocjacji zrzucania winy reagowanie zmiany ważniejsze sztywne trzymanie planu taki trochę paradoks zlikwidować problemy generuje agile pomocą zasad promuje tenże agile metodyka została wymyślona reagować zmieniające dostosowywać zmian inaczej będziemy mieć swoistą formę zamiatania problemu dywan jeśli ktoś zespole mówi ktoś otoczenia członkiem zespołu prawda znak ktoś podchodzić zbyt dosłownie zasad agile jeśli ktoś zespole mówi zespół niezależną jednostką decyduje wszystkim wewnątrz dzieje pomimo rację znaczy tyle ktoś zbyt dosłownie podchodzi procesów zaczyna przedkładać ludzi interakcje jeśli ktoś zespole mówi robił tamtego agile scrum kanban znak pora poluzować guzik koszuli rozwiązać trochę krawat wziąć głęboki wdech ktoś prostu zaczyna dosłownie traktować zasady mówiące m in traktować zbyt dosłownie a przypadku kilkunastu zespołów pracujących używając metody jak zgrać po pierwsze trzymać agile mówi nazbyt dosłownie drugie testuj reaguj zmiany próbuj nowych rozwiązań jak działają zmień a działają utrzymaj pamiętaj szaleniec robić dokładnie samo oczekiwać różnych rezultatów nikt dobrego rozwiązania takiego problemu waterfall doskonały czerpać pewne rozwiązania przykład planowanie milestone mimo lubianego zespoły zwinne przypadku współpracy grup zadziałać a zadziała to zmienić nieco zobaczyć działało kolejnym tygodniu sprincie reagować zmiany ważniejsze sztywne trzymanie planu to działało zadziała twoim przypadku gwarantuję agile doskonałą metodą pracy lepszej wynaleziono dlatego próbuj dziel swoją wiedzą doświadczeniem członkami projektu może razem zbudujecie działać możliwe zastosowania innych projektach firmach podobnie stało agile budzisz rano podnosisz telefon wyłączasz budzik zanim wstawisz czajnik kawę sprawdzisz szybko swojego instagrama gdy pijesz kawę wzrok opuszcza ekranu telefonu a kciuk wykonuje mechaniczny ruch dół góra dół góra w drodze pracy sprawdzasz nikt skomentował twojego postu wczoraj wstawiłeś naprawdę nikt widział mojego postu najpierw trochę przykro potem zaczynasz pocić myślisz usunięciu posta ktoś weźmie zobaczy mało masz lajków pomyśli jesteś ta forma wewnętrznego dialogu niczym rzadkim mierzy większość użytkowników social media jest powód mniej przejmujemy jakością osobistą wartością kontentu dzielimy social media a bardziej popularnością atencją jaką cieszy strony innych użytkowników kilka miesięcy instagram ogłosił druzgocącą niektórych ludzi wiadomość ukrywał użytkownikami liczbę lajków każdym postem oprócz własnych jak pewnie domyślić ogłoszenie rozpętało internetową burzę w artykule przedstawimy szczegóły afery lajkowej czym podjęciu decyzji kierował instagram ogóle pomóc walce uzależnieniem social media głównym celem przedsięwzięcia stworzenie wirtualnego mniej kompetytywne mniej skupione popularności liczbie lajków a bardziej kreatywności dzieleniu kontentem względu osobistą wartość jednak niektórzy użytkownicy wszystkim influencerzy oskarżają inicjatywę instagrama zamach dochodu dochrapali potem krwią powyższa inicjatywa jedyną zmianą nastąpić strukturze social media zaledwie kilka dni amerykański senator josh hawley zaproponował ustawę social media addiction reduction technology act mającą celu walkę uzależnieniem social media poprzez zakazanie platformom typu instagram stosowanie technik mających celu najdłużej utrzymać uwagę użytkownika techniki m in bezkońcowe skrolowanie autoodtwarzanie filmików video ponadto platformy social media byłyby zobowiązane wprowadzenia elementów stopping points momenty dalsze skrolowanie uniemożliwione czy którekolwiek powyższych zmian strukturze social media miałoby jakiekolwiek znaczenie walce uzależnieniem problemami mentalnymi doprowadzają pozostaje tematem debaty social media a zdrowie psychiczne jak powstały media społecznościowe pojawienie social mediów naszym nierozerwalnie związane pojawieniem internetu latach sześćdziesiątych siedemdziesiątych już momencie internet stawiał pierwsze kroki podstawowym założeniem ułatwienie komunikacji wymieniania pomysłami a wspieranie rozwoju nowych idei nic dziwnego social media narzędzie stworzone wszystkim celu komunikowania dzielenia wydarzeniami szybko zyskało popularności w użytkownicy social media stanowili populacji stanów zjednoczonych a większość miała pojęcia czym dziś dostęp social media miliarda osób tj populacji staliśmy zależni social media spędzamy godziny dziennie social media niosą sobą wiele możliwości zagrożeń począwszy facebooka youtube a twitter tumblr pinterest instagram każda platform swój unikalny charakter założenie target typ użytkowników są idealnym medium komunikacji wspierania kreatywności dzielenia pomysłami zdjęciami filmikami ponadto platformy facebook twitter głównych informacji jednakże nierozważne nadmierne użytkowanie platform doprowadzić wielu problemów psychiczno fizycznych ponadto social media stanowić potężne narzędzie biznesowe społeczno polityczne zostać użyte przeciwko wpływ naszą osobowość niemalże samego początku social media obiektem niezliczonej ilości badań analiz artykułów naukowych wywiadów itp przeprowadzonych naukowców całym zgodnie doszli konkluzji social media mieć potężny wpływ psychiczne fizyczne zdrowie o dziwo czego reguły słyszy wszystkich debatach nt social media mieć pozytywny wpływ social media ułatwić kontakt znajomymi rodziną wzbudzić poczucie przynależymy zmniejszając samym uczucie samotności pomaga znaleźć inspiracje motywacje pozwala lepiej zarządzać swoim zdrowiem pomocą dostępnych przepisów zestawów jednakże powyższych pozytywnych efektów social media wciąż doprowadzić m in uzależnienia stanów lękowych depresji braku aktywności zaburzeń problemów snem utrudnionej komunikacji twarzą twarz może wprowadzenie zmian mających celu regulację sposobu social media używane użytkowników takim złym pomysłem w media społecznościowe powodują uzależnienie uzależnienie social media działa mniej więcej uzależnienie hazardu alkoholu kokainy winna dopamina dopamina neuroprzekaźnik uwalniany zakończeń nerwowych odpowiedzialny polepszenie humoru zwiększenie motywacji działania jest uwalniana skutek czynności sprawiają radość zjedzenie dobrego posiłku wypicie alkoholu aktywność fizyczna interakcje społeczne można powiedzieć dopamina nagradza zachowania rodzaju motywuje powtarzania tak dzieje przypadku naszej interakcji social media czujemy satysfakcję motywację swoimi postami widzimy miłe komentarze rosnącą liczbę lajków serduszek jednak momencie widzimy a ktoś otrzymuje x polubień zaczynamy kwestionować naszą własną popularność decyzje miejsce społeczeństwie jednym słowem zaczynamy kwestionować naszą wartość poza wpływem poczucie wartości social media zatruwa tj poprzez trenowanie niemalże ciągłego sprawdzania danej aplikacji nadzieją ciągu ostatnich pięciu minut przybyło lajków nie a uzależnienie rodzi przypadkach nagroda tj lajki przyznawana wobec konkretnego schematu raczej dzieje losowo jesteśmy stanie przewidzieć w zaczynamy notorycznie sprawdzać telefon mając nadzieję przeciągu ostatnich pięciu minut przybyło lajków czy ukrywanie lajków pomoże walce uzależnieniem jak widać powyżej istnieje dobry powód warto zastanowić sposobem walki uzależnieniem social media jednakże istnieje pytanie ukrywanie lajków rzeczywiście pomoże walce uzależnieniem niektórzy nastawieni sceptycznie rozwiązania twierdząc marki polegające instagramie narzędziu marketingu znajdą bardziej wyrafinowane techniki influencer marketing ponadto pojawiły głosy twierdzące walka uzależnieniem social media niekoniecznie powinna odpowiedzialnością tychże platform jak wypowiedziała laura albertin influencerka tysiącami followersów ukrywanie lajków wspomoże walki ludzie siak znajdą wskaźniki walidacji społecznej myślę spróbować zadbać zdrowie mentalne problem sięga wiele dalej lajki nytimes com theguardian com prweek com sitn hms harvard edu cnet com allpsychologyschools com
jeżeli wykonywanie obecnego zawodu sprawia ci satysfakcji wydaje ci zarabiasz zbyt mało artykuł cię zainteresować postaram najlepszy możliwy opisać skutecznie możesz przebranżowić programistę nie wymaga nakładu finansowego podejmowania studiów informatycznych w większości przypadków wystarczy systematyczna praca przebranżowienie programistę zasięgu ręki odpowiednim podejściem powinno zająć ci dłużej rok karol trybulec software engineer hsbc w ukończył technikum informatyczne w uzyskał tytuł magistra inżyniera wydziale mechanicznym politechniki krakowskiej informatyka specjalizacją inżynieria oprogramowania interesuje informatyką pojęciu ogólnym szczególności programowaniem c c c net elementy assemblera tworzeniem aplikacji internetowych xhtml html css sass sql javascript jquery angular2 asp net mvc net core node js zabezpieczeniami komputerowymi dlaczego warto przebranżowić jeżeli ktoś lubi pracę biurową praca programisty wydaje idealna programowanie potrafi pracą bezstresową dającą jednocześnie ogromną satysfakcję jest zawód naddający kobiet paradoksalnie kobiet it mało szczególnie stanowiskach typowo programistycznych szereg benefitów większość firm działających obszarze it przeważnie naprawdę dochodowe biznesy biura sprzęt całe pracy dzięki doinwestowane wysokim poziomie pracownicy firm it praktycznie posiadają szereg benefitów próżno szukać indziej są m in darmowe owoce kawa herbata znajduje kuchni pokoje relaksu prywatna opieka zdrowotna wysokie permie darmowe szkolenia sprzęt wysokiej jakości ergonomiczne krzesła klimatyzowane biura możliwość podróży wiele innych czasem porównuję miejsca szkół praca nauczyciela przychodni szpitali praca lekarza tam odpadają płytki a człowiek siedzi starym drewnianym taborecie wtedy stwierdzam ciężko dobre warunki pracy gdziekolwiek indziej it dodatkowo większości firm obowiązują elastyczne godziny pracy naprawdę wygodnie godzić zawodowe różnymi obowiązkami po zdobyciu odpowiedniego doświadczenia pracować zdalnie domu niesamowitym dodatkowym atutem wysokie zarobki zawód programisty obecnych czasach zawodem płatnym według agencji sedlak sedlak mediana zarobków młodszego programisty brutto a eksperta brutto statystyki r wydaje dużych miastach sprzyjających okolicznościach odpowiednie technologie wynagrodzenie potrafi znacznie większe można całą pewnością przyznać zarobków naszym kraju da osiągnąć innym zawodzie jednoczesnym małym progu wejścia branży proces przebranżowienia ostatnio pomagałem przebranżowić mojej dziewczynie tak wielu innych ludzi polsce stwierdziła pomimo posiadania technicznego wykształcenia wyższego stanie znaleźć pracy naszym kraju korzystając własnego doświadczenia wniosków rozmów innymi programistami starałem znaleźć optymalną przebranżowienia poniżej opiszę prostych krokach krok wybierz obszar programowanie zbyt duże rozległe uczyć wszystkiego musisz zdecydować pewną wąską dziedzinę zaczniesz szkolić przede wszystkim powinien wybór pomiędzy front endem a back endem czym różni drugiego opisałem innym wpisie nazwie nauczyć programowania pokrótce dodam szybciej dasz radę nauczyć front endu aby opanować front end będziesz potrzebował mniej wiedzy teoretycznej it wybór powinien podyktowany twoimi predyspozycjami decydując front end fajnie mieć jakieś poczucie estetyki z kolei programista back endu powinien mieć predyspozycje analitycznego myślenia powyższej przedstawiłem przykładowe zestawy technologii musisz umieć celując dany zawód są przykłady istnieje wiele więcej stanowisk wszystkie przedstawione przeze zestawy ang technology stacks dotyczą wytwarzania aplikacji internetowych wydaje obecnych czasach lepiej celować aplikacje internetowe ang web applications aplikacje okienkowe ang desktop applications trend obecnie firmy przenoszą chmur internetu zdecydowanie odradzam natomiast język c język niskiego poziomu obecnie niszowy nietypowych zastosowań nie naddaje kogo przebranżowić raczej specjalistów branży nie polecałbym php visual basica pascala języków funkcyjnych chyba wiesz celujesz jakiegoś powodu ci potrzebne krok ustal czasu poświęcisz naukę moim skromnym zdaniem jesteś stanie przebranżowić okresie miesięcy celujesz wąską dziedzinę jedną konkretną technologię język nauka programowania trudna chińskie znaki im więcej będziesz bardziej zacznie sklejać jedną logiczną całość jeżeli myślisz przebranżowieniu programistę poważnie obierz strategię nauki nauka dziennie oprócz weekendów idealne rozwiązanie pracujesz możesz pozwolić pracować daj siebie podczas nauki programowania siedź cały dzień jakbyś wykonywał jakieś obowiązki pracy po nauki chcę ci uczyć czy samo powiedziałbyś pracy nauka pracy weekendy bądź naprawdę ciężkie a nauka zajmie ci wiele dłużej sam pracę pełny etat programowanie studiami uczelni trybie dziennym politechnika krakowska trwało lata chwilami byłem zmuszony przeskakiwać etatu a mieszkaniu całymi dnami taki tryb służy nauce jeżeli masz taką możliwość ucz programowania całymi dnami gwarantuję ci sukces jeżeli musisz pracować wiedz zajmie ci razy dłużej drodze zniechęcisz nawet obiecasz systematyczną naukę pracy oszukasz zmęczenia wydłużysz doby powyższa infografika trywialna obrazuje ciężko znaleźć czas naukę innymi obowiązkami wypełnianie czasu wolnego nauką weekendy oczywiście da ci dodatkowy czas spędzony przyswajaniu wiedzy jednocześnie działać zniechęcająco dłuższą metę wyciągnąć wnioski szacujmy nauka programowania pierwszym przypadku zajmie ci miesięcy naukę pracą zajmie ci miesięcy a odliczysz weekendy prawie lata jakiejkolwiek drogi byś wybrał postaw systematyczność ustal grafik wszelką cenę staraj przestrzegać systematyczność ważna nauce programowania a odrywając tematyki dni prawdopodobnie zapomnisz czego uczyłeś kilka dni jeżeli sądzisz szacowanie miesięcy realne weź uwagę nieważne jakąkolwiek liczbę wymyślisz chodzi raczej liniową zależność wydłużającego okresu nauki a konkretną liczbę dokładnością miesięcy krok wiedzy jeżeli wybrałeś konkretną technologię przyjąłeś jakąś strategię nauki zastanów będziesz czerpał wiedzę decydując naukę programowania musisz umieć uczyć nie innej możliwości zdecydowanie zawód programisty zdecydowanie ciągłą systematyczną naukę poszerzanie swojej wiedzy gdybym zdefiniować programowanie komuś zielonego pojęcia powiedziałbym skuteczność jaką potrafisz rozwiązywać problemy ang problem solving użyciem internetu ogólnodostępnych narzędzi języków programowania nikt broni ci używać internetu szukać gotowych rozwiązań czegoś umiesz problemem problem zaczyna czegoś umiesz a dodatkowo masz zielonego pojęcia znaleźć rozwiązanie moim skromnym zdaniem szkoły programowania strata czasu niezastąpionymi wiedzy natomiast książki danej technologii języku filmy postaci kursów artykuły dostępne internecie dlaczego szkoły programowania przede wszystkim drogie po drugie kurs wcześniej później kończy a ty znowu wracasz punktu wyjścia musisz nauczyć uczyć samemu wykładowca poświęci ci całego swojego czasu a dodatek każdej szkole występować duże nierówności grupie pieniądze przeznaczyłbyś szkołę programowania proponuję ci wydać książki kursy wideo uwierz słowo działy programowaniu rozumie pierwszym przeczytaniu są osobiście wracam kilka miesięcy każdą rozmową rekrutacyjną a później znowu zapominam działało taka zaleta książki kursu wideo możesz wiele razy wrócić możesz czytać tyle razy zrozumiesz krok naucz systemu kontroli wersji git system kontroli wersji absolutna podstawa każdego rozpocząć przygodę programowaniem co typowy projekt programistyczny trwa tygodni kilkunastu miesięcy przeważnie projektem pracuje programistów zdarzają duże systemy którymi pracują dziesiątki programistów wiele czy wyobrażasz ciężko integrować sobą pracę wielu ludzi programiści nieświadomie nawzajem usuwają psują własne istniejące fragmenty kodu często dopisując nową funkcjonalność przypadkowo dotykają funkcjonalności którą zrobił wcześniej ktoś takie integracje dużych ilości kodu postaci zwykłego tekstu integrować sobą jakimś narzędziem właśnie służą systemy kontroli wersji oprócz systemy kontroli wersji zapewniają wersjonowanie wspierają przenoszenie kodu pomiędzy komputerami dodatkowo stanowią zabezpieczenie istniejącego kodu utratą powodu awarii dysku twardego generalnie rzecz biorąc narzędzie niezbędne codziennej pracy nieważne będziesz młodszym starszym programistą najpopularniejszym programem kontroli wersji git można obsługiwać zarówno linii poleceń polecam graficznymi programami możesz zainstalować systemie windows warto założyć konto systemie github com darmo tworzyć własne projekty przechowywać kod oprócz możesz działanie gita rozpoczęciem pracy programisty jeżeli chcesz przebranżowić programistę powinieneś stworzyć własne repozytorium kodu systemie github com wrzucić kilka swoich projektów następnie opis projektów powinieneś dołączyć swojego cv wraz linkiem repozytorium szukając pracy junior programista ktoś sprawdzi twoje programy a pozwoli poznać twoje umiejętności krok zbuduj portfolio projektów ten punkt trochę powiązany poprzednim zbudować portfolio projektów musisz umieć jakiś system kontroli wersji nie zastanawiaj innym oprócz gita jest sprawa niezwykle ważna posiadasz doświadczenia wykształcenia informatycznego w takim wypadku portfolio własnych projektów absolutny must have pozwoli ci wejść branży it nie wyobrażam jakiej zasadzie miałoby odbywać przyjęcie kandydata ukończył studiów it doświadczenia pracy stanowisku programisty własne proste projekty idealna informacja pracodawcy umiesz programować jakiejś technologii umiesz system kontroli wersji pracy będziesz korzystał dnia pierwszy dzień podłączenie komputera przebranżowienie zmianę zawodu traktujesz poważnie podchodzisz profesjonalnie sam poszukiwaniem pierwszej pracy oczywiście posiadałem portfolio własnych projektów jednak oprócz projektów pomógł swój blog studia it znajomość wielu technologii interesowałem programowaniem dziecka gdy byłem mały nikt doradził projekty umieścić githubie szkoda zrobiłem co ciekawe pytania gita podstawową obsługę zostały zadane mojej pierwszej rozmowie pracę studiów krok przygotowanie teoretyczne rozmowy jeżeli umiesz jakąś technologię podstawowym zakresie posiadasz kilka małych projektów czas zainteresowanie teorią niestety rozmowa rekrutacyjna większości przypadków przepytanie kandydata teorii w przypadków zadawane pytania dotyczyć danego języka technologii programistą jesteś jak przygotować etapu twoje powodzenie zależy oczywiście stopnia jakim przyswoiłeś dany język programowania pytań rozmowy rekrutacyjne wyszukuj internecie hasłami java interview questions znajdziesz naprawdę użytecznych informacji te pytania umieszczane razem odpowiedziami będzie ciebie dodatkowej wiedzy szansa pewne uporządkowanie niejasności jak rozłożyć czasie wszystkie powyższe kroki idealnie byłoby gdybyś posiadał kogoś znajomego umie programować mógłby odpowiadać wszelkie twoje niejasności z takiej opcji skorzystała dziewczyna wydaje nauka programowania przyśpieszyła kosmicznym tempie zacząłem tłumaczyć pewne mechanizmy pomocą historyjek codziennego przyznajmy wprost nauczycielem znam odpowiedniej metodyki nauki programowania tylko biorąc uwagę szybkość rozwoju branży taka ogóle istnieje wraz moją dziewczyną przyjęliśmy następujący plan nauki aż chwili obecnej sprawdza idealnie mogę powiedzieć obecnie znajdujemy wspólnie końcowym etapie jako doświadczony programista wydaje przebranżowienie przebiegło pomyślnie miesiące czy rzeczywiście stało zweryfikują prawdopodobnie zbliżające rozmowy rekrutacyjne czy przebranżowienie programistę moim daniem czasach idealnych zostawić swój dotychczasowy zawód zabrać programowanie wynika małego progu wejścia zawodu kolei spowodowany ogromnym deficytem pracowników jeżeli chcesz zostać programistą najlepiej zacznij myśleć być kilka kilkadziesiąt trend rynku it odwróci a dostanie branży opłacalne artykuł został pierwotnie opublikowany p programowanie zacznijmy początku czym właściwie python jego twórca guido van rossum definiuje zaawansowany język programowania filozofia designu polega czytelności kodu syntaksie pozwalającym programistom wyrazić dane koncepcje niewielkiej ilości linijek kodu leandro tk software engineer quintoandar inżynier oprogramowania redaktor the renaissance developer autor tekstów programowaniu medium freecodecamp w artykule tk opowiada swoim doświadczeniu pythonem przedstawia strukturę działanie niezwykle przystępny osób początkujących polecamy każdemu zastanawia podjęciem nauki języka poniższy tekst został przetłumaczony zgodą autora pierwszym powodem zacząłem uczyć pythona fakt rzeczywistości piękny język programowania do nauki zachęcało pozwalał kodować wyrażać myśli kolejnym powodem pythona możemy użyć wieloraki nauki danych tworzenia stron internetowych samouczenie maszyn dodatkowo ogromne serwisy quora pinterest spotify używają pythona nadzieję przekonało ciebie poznania języka co warto wiedzieć początku podstawy variables o zmiennych myśleć słowach przechowują jakąś wartość w pythonie zdefiniować zmienną ustawić wartość wyobraź chcesz przechować liczbę zmiennej nazwie zróbmy prawda proste właśnie przypisałeś wartość zmiennej możesz przypisać jakąkolwiek inną wartość jakiejkolwiek innej zmiennej jak widać powyższej tabeli zmienna two przechowuje liczbę a some_number przechowuje poza liczbami możemy użyć booleans true false strings float wiele innych typów danych control flow conditional statements if wyrażeniem używanym ocenienia dany statement prawdą fałszem jeśli prawda zostanie wykonane zostało zawarte statement if na przykład ponieważ większe metoda print zostanie wykonana jeśli wyrażenie if fałszywe zamian zostanie wykonany statement else ponieważ większe kod zawarty statement else został wykonany możesz użyć elif statement looping iterator w pythonie możemy iterować różny w artykule będę mówił dwóch sposobach while for while looping stwierdzenie prawdą kod bloku zostanie wykonany wywoła numery while loop potrzebuje loop condition jeśli pozostanie prawdziwe dalej iterowało w przykładzie num równa loop condition false kolejny kawałek kodu lepiej zrozumieć myśli loop condition true nadal iterować momentu przestawimy false jeśli chodzi for looping musisz zaaplikować zmienną num bloku a for statement przeiteruje ten kod wydrukuje samo while code proste prawda zakres zaczyna elementu dziesiąty element list collection array data structure wyobraź chcesz przechować liczbę zmiennej ale chcesz przechować i czy jakiś przechować wszystkie liczby chcesz milionach zmiennych zgadłeś rozwiązanie listto zbiór zostać użyty przechowywania listy wartości przykład wybrane liczby użyjmy zatem jak widzisz naprawdę proste stworzyliśmy szereg zapisaliśmy przechowania my_integer być zapytasz jak mogę otrzymać jakąś wartość szeregu jest dobre pytanie list zawiera koncepcję zwaną indeksem pierwszy element otrzymuje index zero drugi otrzymuje itd aby uściślić możemy przedstawić szereg element indeksem pozwól narysuję używając syntaksu pythona równie zrozumienia wyobraź chcesz przechowywać liczb a strings przykład listę imion twoich krewnych moja wyglądałaby działa liczby nieźle prawda właśnie nauczyliśmy działają indeksy lists za chwilę pokażę możemy dodać element struktury danych lists najbardziej powszechna metoda dodawania nowych wartości listsnazywa append zobaczmy działa append prosty po prostu musisz zaaplikować element the effective engineer parametr append no wystarczy lists pogadajmy kolejnej strukturze danych dictionary key value data structure teraz wiemy listssą indeksowane liczbami ale chcemy użyć liczby indeks niektóre struktury danych chcemy użyć numeryczne string poświęćmy trochę czasu strukturze danych dictionary zbiorem par key value wygląda klucz indeksem wskazującym wartość jak możemy uzyskać dostęp dictionary value zgadłeś używając key spróbujmy stworzyłem dictionary samym moje imię nickname narodowość te atrybuty dictionary tak uczyliśmy uzyskać dostęp list pomocą indeksu możemy użyć indeksu uzyskać dostęp wartości przechowywanej dictionary w przykładzie wydrukowałem frazę używając wszystkich wartości przechowanych dictionary całkiem proste prawda kolejną fajną rzeczą dictionary możemy użyć wszystkiego chcemy wartość w stworzonym przeze dictionary chcę dodać klucz wiek prawdziwy wiek postaci liczby tu parę key wiek value używając string key liczbę value tak zrobiliśmy lists nauczmy dodawać elementy dictionary klucz wskazujący wartość dużą częścią czym dictionary sprawdza mowa dodawaniu elementów potrzebujemy przypisać wartość klucza dictionary nic skomplikowanego prawda iteration looping through data structures jak nauczyliśmy podstawach pythona iteracja list prosta my developerzy pythona powszechnie używamy for looping dla każdej książki półce wywołujemy metodę print całkiem proste intuicyjne zwyczajnie python dla hash data structure możemy użyć for loop zaaplikujemy key to przykład użyć dla każdego key dictionary możemy użyć print key przypisanej value kolejny zrobić użycie metody iteritems mimo nazwaliśmy powyższe parametry key value potrzebne możemy nazwać chcemy spójrzmy można zobaczyć użyliśmy atrybutów parametr dictionary key działa powinno super klasy obiekty trochę teorii obiekty reprezentacja realnych obiektów samochody psy rowery dzielą główne cechy dane zachowanie samochody dane przykład liczba kół drzwi ilość miejsc siedzących wykazują zachowanie przyspieszyć zatrzymać pokazać paliwa zostało wiele innych w programowaniu object oriented dane identyfikujemy atrybuty a zachowanie metody dane atrybuty zachowanie metody klasa natomiast planem według obiekty tworzone w prawdziwym istnieje wiele obiektów takim samym typie przykład samochody wszystkie podobną konstrukcję wszystkie silnik koła drzwi itd mało identyczne python object oriented programming mode on python język programowania object oriented posiada koncepcje klasę obiekt klasa planem modelem obiektu pomaga zdefiniować atrybuty zachowania mówiliśmy sekcji poświęconej teorii na przykład klasa pojazdów własne atrybuty definiują obiekty pojazdami ilość kół pojemność zbiornika ilość miejsc siedzących maksymalna prędkość przykładowe atrybuty pojazdu mając uwadze spójrzmy syntaks pythona klas klasy definiujemy pomocą class statement tyle proste prawda obiekty elementy klas element kreujemy poprzez nazwanie klas w przykładzie car obiektem klasy vehicle pamiętajmy klasa pojazdów cztery atrybuty ilość kół pojemność zbiornika ilość miejsc siedzących maksymalna prędkość wszystkie atrybuty ustawiliśmy tworząc obiekt pojazd definiujemy naszą klasę otrzymania danych zapoczątkuje używamy metody init nazywaną metodą constructor pozwala zdefiniowanie atrybutów trakcie kreowania obiektów wyobraź podoba tesla model s chcemy stworzyć rodzaju obiekt ma cztery koła działa energię elektryczną pięć miejsc siedzących maksymalną prędkość km h mph stwórzmy zatem obiekt cztery koła elektryczny typ zbiornika pięć siedzeń maksymalna prędkość km h wszystkie atrybuty ustawione ale możemy uzyskać dostęp wartości za pomocą metody znanej zachowanie obiektu zastosujmy powyżej widzicie implementację dwóch metod number_of_wheels set_number_of_wheels nazywamy getter setter pierwszemu zostaje przypisana wartość atrybutu a drugi ustanawia nową wartość atrybutu w pythonie możemy dokonać używając property decorators zdefiniować getters setters przyjrzyjmy tych metod możemy użyć atrybutów jest trochę metody definiujące te metody działają atrybuty na przykład ustawiamy nową liczbę kół ustawiamy wartość number_of_wheels jest napisanie kodu pythonic getter setter możemy użyć metod innych rzeczy przykład metoda make_noise spójrzmy kiedy stosujemy tą metodę produkuje string vrrrruuuum encapsulation hiding information enkapsulacja mechanizm zastrzega bezpośredni dostęp danych metod obiektów jednakże samym ułatwia wykonywanie działań danych metody obiektów cała wewnętrzna reprezentacja obiektu ukryta jedynie obiekt komunikować wewnętrznymi danymi jednak najpierw musimy zrozumieć działają public non public instance variables metody public instance variables dla klasy pythona możemy zainicjować public instance variables zakresie metody constructor przyjrzyjmy w zakresie metody constructor tu możemy zaaplikować wartość first_name argument public instance variable w zakresie klasy w przypadku musimy aplikować first_name argumentu a wszystkie obiekty instancji miały class attribute nauczyliśmy możemy użyć public instance variables class attributes kolejną interesującą rzeczą części public możemy zarządzać wartościami zmiennych co myśli nasz object stanie zarządzać wartością zmiennej get set wartości zmiennych pamiętając klasie person chcemy ustawić kolejną wartość zmiennej first_name jedyne musieliśmy zrobić przestawić wartość kaio first_name instance variable doprowadzi zaktualizowania wartości możemy zrobić public variable non public instance variable nie używamy takiego pojęcia prywatny atrybut naprawdę prywatny pythonie niepotrzebnego nadmiaru pracy pep8 tak public instance variable non public instance variable możemy zdefiniować zakresie metody constructor klasy co różnicy syntaksie non public instance variables używaj podkreślnika variable name private instance variables uzyskać dostępu prócz obiektu istnieją pythonie jednakże istnieje konwencja którą stosuje większość kodu python nazwa poprzedzona podkreślnikiem e g powinna traktowana niepubliczna część api względu funkcja metoda członek danych python software foundation tu przykład zauważyłeś zmienną email tak definiujemy non public variable możemy uzyskać dostęp zaktualizować non public variables konwencją powinny traktowane niepubliczna część api stosujemy metodę pozwala działać definicji klasy implementujemy metody email and update_email lepiej zrozumieć za pomocą metod możemy zaktualizować uzyskać dostęp non public variables spójrzmy zainicjowaliśmy nowy obiekt first_name tk email tk mail com wydrukowaliśmy email poprzez uzyskanie dostępu non public variable próbowaliśmy ustawić nowy email naszej klasie musimy traktować non public variable non public część api zaktualizowaliśmy non public variable pomocą instance method sukces możemy zaktualizować naszej klasy metoda pomocniczą helper method public method z public methods możemy użyć spoza naszych klas przetestujmy super możemy używać najmniejszego problemu non public method jednakże non public methods jesteśmy stanie zrobić zaimplementujmy tą samą klasę person wraz show_age non public method używając podkreślnik a spróbujemy nazwać non public method naszym obiektem możemy uzyskać dostęp zaktualizować non public methods konwencją powinny traktowane niepubliczna część api tutaj przykład użyć mamy non public method show_age public method show_age użyte obiekt spoza naszej klasy a zostać użyty zakresie definicji klasy wewnątrz metody show_age jednakże powtórzę konwencja encapsulation summary z encapsulation możemy zapewnić wewnętrzna reprezentacja obiektu ukryta zewnętrznym inheritance zachowania charakterystyka niektóre obiekty dzielą pewne rzeczy zachowanie cechy na przykład odziedziczyłem pewne cechy zachowanie moim ojcu z cech odziedziczyłem oczy włosy a zachowań brak cierpliwości introwersje w programowaniu zorientowanym wokół obiektu klasy odziedziczyć wspólne cechy dane zachowania metody innej klasy spójrzmy kolejny przykład zastosujmy pythonie wyobraź samochód numer kół pojemność maksymalna prędkość atrybuty samochodu można powiedzieć klasa electriccar dziedziczy same atrybuty klasa zwyczajnego car nasza klasa car w pythonie aplikujemy parent class child class parametr klasa electriccar odziedziczyć klasę naszego car to proste nie musimy stosować innej metody klasa odziedziczoną klasie car udowodnijmy pięknie to nauczyliśmy wiele rzeczy podstawach pythona jak działają zmienne pythona jak działa conditional statement pythona jak działa looping while for pythona jak działa lista collection array dictionary key value collection jak możemy iterować data structures objects classes atrybuty dane obiektów metody zachowanie obiektów używanie python getters and setters property decorator enkapsulacja ukrywanie informacji dziedziczenie zachowania cechy jeśli chciałbyś nauczyć więcej wypróbuj one month python bootcamp natomiast chciałbyś poczytać trochę więcej mojej podróży zgłębiałem tajniki programowania zapraszam czytania moich publikacji the renaissance developer miłej zabawy uczcie dalej mój twitter github
justgeek it magazyn tworzony razem programistami każdy artykuł powstaje programistów a najczęściej autorami doświadczeni koderzy wszystko dzielić wiedzą zachęcić więcej osób nauki programowania chcesz skontaktować redakcją napisz redaktora naczelnego adam adam justjoin it w sprawach współpracy komercyjnej kontaktuj piotr nowosielski piotr justjoin it w sprawie współpracy niekomerycjnej napisz michał fila michal justjoin it gdy zaczynaliśmy przygotowania wydarzenia mieliśmy jednego bezpośredniego kontaktu osoby którą zacząć rozmawiać jednak sporej dawce cierpliwości wsparciu znajomych nieznajomych a znajomych znajomych osób trzecich branży przed rozpoczęciem kampanii promocyjnej udało ciągu dwóch miesięcy przekonać pierwszych siedem osób powstał początkowy harmonogram jak okazało inicjatywa przyciągnęła nieco więcej osób polaków granicą zwyczajnie chcieli podzielić swoim doświadczeniem podczas luźnej rozmowy tak powstała koncepcja niepoważnych rozmów poważne tematy związane programowaniem przybrał formę cyklu live streamów gdzie oczywiście określenie niepoważne należy przymknąć nieco oko zwyczajnie względu fakt rozmowa przebiegać normalnej ludzkiej atmosferze aczkolwiek będziemy rozmawiać konkretnych sprawach z jednej strony kwestie miękkie realia pracy granicą drugiej zdecydowanie twarde jak wygląda proces wydawania produktu umieć programista dostać firmy jakich narzędzi korzystają jak zorganizowane działy zespołach liderzy zespołach testerzy ux etc chcesz podzielić swoją historią skontaktuj mail event justjoin it bezpośrednio fb piotr nowosielski bardzo chętnie porozmawiamy zorganizujemy kolejny live stream przeprowadzimy wywiad połączymy ciebie ekspertem autorytetem danej dziedzinie porozmawiamy kilka osób po aby prostu stworzyć interesujący materiał dzięki któremu inni mogli czegoś dowiedzieć nauczyć poszerzając nieco horyzonty jesteśmy otwarci każdą nietypową formę czy relacja twojej pracy krótka opowieść drugim końcu zawsze możemy prostu porozmawiać stworzyć nietypowy materiał zwyczajnie zapraszam kontaktu piotr nowosielski
w pierwszej części wywiadu agatą cieplik rozmawialiśmy wygląda proces rekrutacji dropboxie agata opowiedziała swojej rekrutacji pierwszych dniach nowym jorku siedzibie firmy w drugiej części pytamy dalej przebiegała kariery poleca zrobić osobom chciałyby pracować takiej firmie dropbox z agatą cieplik rozmawiają piotr nowosielski p just join it marcin kosedowski m kodilla chcielibyśmy podziękować dwóm fantastycznym partnerom infoshare academy prowadzi stacjonarny kurs programowania a kodilli prowadzi internetowe bootcampy gwarancją zatrudnienia na hasło just join macie zniżkę kursy zaczynamy p dużo kobiet dropboxie a w ciągu ostatnich dwóch tygodni rozpoczęły pracę dziewczyny oprócz przychodzi stażystka będę mentorem w moim zespole programistki pracujące full time koleżanka w paper duży udział kobiet natomiast samym biurze nowym jorku pięćdziesięciu programistów stu osób programistek plus stażystka p są jacyś polacy biurze a u biurze polaka jest specjalny kanał slacku polaków sześciu osób wiem h1b jedyna polką dwóch programistów miało przenosić san francisco marcu kwietniu wizie l1 reszta udziela slacku wiem dokładnie pracują m mam kilka pytań dotyczących samej pracy najpierw uświadomić słuchaczy warto podkreślić dropbox wielką firmą zatrudnia tysiąc osób którymi zarządzać możesz powiedz jakiej metodologii pracujecie a w zasadzie zespół określa pracować natomiast hierarchia swojego managera któremu raportuje firma podzielona cztery filary w każdym kolejne zespoły kolejne poziomy poza spotkanie swoim managerem jakiś czas narzuconego schematu korzystamy różnych narzędzi phabricator narzędzie facebooka jira pracujemy kwartał wyznaczone jakieś cele wybiera czego chciałby podjąć m kto wyznacza cele a jest trochę mieszane najpierw managerowie swoich zespołach organizują burzę mózgów pytając pomysły chcemy zmienić produkcie to fajne byłam osobą zespole wiedziałam możemy zrobić działa warto poprawić zostałam wciągnięta burzę mózgów pomysły zostały wzięte uwagę manager później kompiluje dokument prezentuje gronie pozostałych managerów ustalają ważniejsze słabe szybko jesteśmy stanie wdrożyć daną rzecz m powiedzmy wymyśliłabyś jakąś nową funkcję usprawnienie chciałabyś wprowadzić zajęłoby tygodnie programowania jak wygląda cała a można próbować przejść burzę mózgów jakiekolwiek cotygodniowe spotkanie zespołu są krótsze raz pół dropboxie organizowany hackweek polega samodzielnie niewielkich zespołach wymyśla swój własny projekt niekoniecznie związany robi firma po tygodniu takiego programowania wypuszcza prototyp oceniany każdy takim hackweeku zgłosić swój projekt zrobienia wtedy zbiera komisja projekty ocenia rozmawia autorami projektu szacuje potrzeba czasu takiego wdrożyć niestety pomysł następnego dnia wdrażany nie wypuszczą produktu jakiejś funkcjonalności potwierdzenia użytkownicy zadowoleni jest nowość nazywa hacklab osobny zespół zajmujący zbierać pomysły pracowników wdrażać zmianę to trzecia opcja zasugerować rozwój firmy m zgłaszałaś jakieś pomysły hackweek a tak dodałam funkcjonalność paper tłumaczy pisze ludzi różnych regionów władających różnymi językami brakowało funkcjonalności takiej belce tłumaczeń wdrożyliśmy był fajny projekt mogła zapoznać naszą bazą całym naszym kodem to trzeci miesiąc dropboxie hackweek czułam tyle komfortowo wiadomo czym szaleć to fajna możliwość zapoznać dzieje stronie klienta m mogłabyś opowiedzieć wygląda proces code review możesz wspomnieć kluczowych poprawkach punktu widzenia bezpieczeństwa a po pierwsze wrzucamy swój kod code review samodzielnie wybieramy kod sprawdzał najczęściej osoba zespołu specjalizuje części projektu do automatyczne reguły sprawdzają wprowadzasz zmiany jakimś konkretnym pliku kluczowy te reguły dopasowują poszczególne grupy review erów danej rewizji wewnątrz paper osobna grupa osób przypisanych paper infra reviewers security reviewers to bazuje duże doświadczenie osoby samym produktem kodem tą konkretna częścią kodu m uważasz ważne ktoś zrobił code review a uważam ważne to fajna opcja druga osoba rzuci okiem kod masz unit testy sprawdzałeś kilka razy swój kod lokalnie maszynie testowej istnieją miejsca pojawić błąd przewidziałeś dana osoba rzuci okiem powie hej stary zadziała m korzystacie continuous integration blokujecie branche a używamy phabricatora podpiętego arka pushujemy swoich branchy najważniejsze zostanie zaakceptowana zmiana ląduje commit queue wykonywane wszystkie testy jednostkowe testy ui dopiero zostaje wrzucone mastera zaakceptowane następnie taką zmianę możemy wypchnąć pracowników dropboxa mniej więcej dniu uwag taka zmiana zostaje wypchnięta użytkowników zewnętrznych m czyli bezpieczny proces jakie macie pokrycie unit testami a na pewno wydaje cała infrastruktura pokryta testami przejście wszystkich testów zajmuje niekiedy minut czasami uciążliwe wiesz popsute chcesz szybko wypchnąć jakąś zmianę p w dropboxie odpowiadasz promocję programowania kobiet możesz więcej opowiedzieć a całkiem niedawno powstał wewnętrzny osobowy zespół biurze nowym jorku nazwaliśmy new york city site builders moim zadaniem dotarcie mniejszości reprezentowane it przypadku kobiet a dbanie całe biuro przyjaznym miejscem m czy usa promować programowanie kobiet a wydaje promować na pewno trochę chodzi dostęp różnych firm konferencji są różne organizacje polsce geek girls carrots organizują kursy programistyczne bootcampy uczą programować zaprezentować rozmowie kwalifikacyjnej p przejdźmy pytań naszych widzów pierwsze dotyczy kosztów san francisco nowym jorku a nowy jork tani wynajem mieszkania dosyć drogi płacisz wysoki podatek stanowy fakt mieszkania nyc jest sporo osób ramach optymalizacji podatkowej mieszka new jersey codziennie dojeżdża wtedy płacą podatku miejskiego jeśli chodzi same mieszkania zależy mieszkać można poszukać czegoś uptown bardziej północ queens brooklyn trochę taniej trzeba liczyć dojazd zająć trochę dłużej p jakie ceny mieszkań manhattanie a queens a wiem manhattanie znajomi płacą między a wielkości mieszkanie w queens znaleźć podobne mieszkanie manhattanie trochę większe p bardzo duża różnica daleko queens manhattanu a to zależy miejsca queens ogromne mi dojazd metrem pracy zajmuje pół godziny p słyszałem kolei mieszkania san francisco droższe nowego jorku a mieszkania okropnie drogie moi znajomi mówią najlepiej mieszkać miastem dojeżdżać kolejką pracy p jak kwestii cen innych rzeczy usa a kiedy pracujesz firmach technologicznych wydajesz pieniędzy jedzenie lunche obiady picie cały tydzień masz zapewnione bilet miesięczny metro dużo zależy umówisz podpisując umowę mieszkanie musisz płacić dodatkowo energię wodę za prąd wychodzi mniej więcej miesięcznie internet niektóre firmy płacić telefon musisz samodzielnie płacić rachunków oferują zwrot kosztów komunikacji miejskiej przykład dają rower p ktoś zadał pytanie wygląda według sprawa związana przyszłościowymi językami programowania w warto wejść czym skupić perspektywie najbliższych a po części odpowiedziałam wcześniej pytanie wszystko zależy bardziej interesuje zaczynałam frontendu proste niski próg wejścia jednocześnie starać bieżąco technologie webowe zmieniają dynamicznie sama przywiązywałam konkretnego języka technologii uważam lepiej poznać wiedzieć działa poznać różne paradygmaty próbować programowania funkcyjnego programowania obiektowego tyle poznać konkretny język nauczyć myślenia dany jeśli nauczysz myśleć dany nauka nowego języka p jak wygląda praca zdalna dropboxie czy zostawać godzinach a nikt wymaga zostawania godzinach wszystko zależy organizujesz pracę nikt pilnuje jesteś godzin najważniejsze komunikować masz czymś problem czymś zawieszasz zamiast siedzieć godzinach dłubać czymś wychodzi prostu pytasz kogoś pomóc zgłaszasz problem manager wiedział postępy braki ewentualne zagrożenia danym projekcie jeśli chodzi pracę zdalną wystarczy dogadać wcześniej wysyłasz sms rano dnia chcesz pracować domu p ciekawe pytanie padło chwilą szczególnie osób rozważających przeniesienie nowego jorku jaka według ciebie minimalna płaca opłaca ogóle rozmawiać pracodawcą oferującym pracę nowym jorku a generalnie przyjmuje rocznie brutto klasa wtedy spokojnie przeżyjesz zostanie p odnośnie samej rekrutacji możesz podać przykładowe zadanie musiałaś rozwiązać podczas jednej rozmów kwalifikacyjnych jak zaawansowane zadania jakich zagadnień dotyczą a z mojego punktu widzenia zadania rekrutacyjne dropboxie szczególnie trudne nastawione sprawdzenie twojej wiedzy danego języka programowania sprawdzić tok myślenia jeśli chodzi zagadnienia pewno pojawi jakaś rekurencja kolejnych etapach pojawić programowanie wielowątkowe zoptymalizować p czy rekrutowałaś dropboxa wcześniej google jakoś specjalnie przygotowywałaś wszystkiego a początkowo przed moimi pierwszymi rozmowami google miałam kartce rozpisane algorytmy sortujące wiedziałam zestresuję powiem jakąś głupotę z każdą kolejną rozmową rekrutacyjną p czy dropboxie patrzy bardziej doświadczenie ukończoną uczelnię jeśli chodzi język angielski warto mieć jakieś certyfikaty potwierdzające umiejętności a tak naprawdę dostać ofertę firmy potrzeba niczego potwierdza umiejętności fakt warto mieć cv przyciągnie wzrok rekrutera nikt patrzy studiowałeś jakimi ocenami nikt oczekiwał ode certyfikatów sprawdzali radzę podczas rozmowy rekrutacyjnej natomiast studia same istotne pracować usa wiza h1b zielona karta wizy osób wyższym wykształceniem p na studia pomogły dostać dropboxa a wynikało doskonaliłaś godzinach dużo czasu poświęciłaś a na pewno początkowo poświęciłam czasu później mniej zaczęłam studiować pracować gdybym miała wrócić domu klepać kod mogłabym oszaleć co znaczy czasami robiłam studia pewno dają taką podstawę teoretyczną dzięki pewniejsza robię p wrócę pewnego pytania pojawiło ono dotyczy architektury paper czy jakieś mikroserwisy innego a tak mikroserwisy niedługo będziemy stawiać kolejny korzystamy trochę różnych zewnętrznych rozwiązań samego wyszukiwania plikach p na koniec chciałbym spytać jaką radę byś dała osobie chciałaby przyszłości dostać takiej firmy dropbox co zrobić jaką podążać a myślę podejść strategicznie jeśli chcesz pracować usa musisz mieć studia bez wykształcenia wyższego zdobędziesz wizy trzeba mieć uwadze licencjat polsce trwa lata a usa lata zrobić licencjat polsce lata rok magisterki minimum zostało zakwalifikowane równoważny poziom wykształcenia licencjatem usa do warto zdobyć wykształcenie innych miejscach pracować sprawia masz praktyczny kontakt wszystkim czego uczysz uczysz nowych rzeczy chodzi budować pewność siebie różnych obszarach p dziękuję rozmowę to szósty live stream polskimi programistami całego tym razem rozmawiamy agatą cieplik znalazła pracę dropboxie siedzibie nowym jorku piotr razem marcinem kosedowskim kodilla postanowili porozmawiać agatą procesie rekrutacji firmy czym dzień zajmują programiści dropboxa zanim przejdziemy wywiadu chcielibyśmy podziękować dwóm fantastycznym partnerom infoshare academy prowadzi stacjonarny kurs programowania a kodilli prowadzi internetowe bootcampy gwarancją zatrudnienia na hasło just join macie zniżkę kursy zaczynamy p agato opowiedz krótko a nazywam agata cieplik programuję wielu niedawno skończyłam informatykę mim ie obecnie mieszkam nowym jorku pracuję dropboxa p jak zaczęła historia kiedy pierwszy pojawiła zajawka programowanie od wiedziałaś ciągnie komputerów a historia zaczęła podstawówce lekcji informatyki uczyliśmy programować lokomocji od chodzącego sto kroków przodu poprzez rysowanie trójkątów kwadratów przerodziło pierwsze zadania rekurencją w szóstej klasie podstawówki zajęłam miejsce podium konkursie programowania lokomocja dosyć ciężka sprawa gimnazjum zbuntowałam przestałam brać udział konkursach skończyło nauczyciele sami zapisywali co ciekawe gimnazjum byłam ukierunkowana tematów robiłam olimpiadę filozoficzną w pierwszej drugiej klasie gimnazjum wraz trójką kolegów zostaliśmy wybrani stworzyć stronę internetową klasy nikt zielonego pojęcia taka strona powinna wyglądać droga mękę nasza pierwsza strona zrobiona html tabelkach wyglądało na koniec ramach podziękowania otrzymał książkę ja dostałam php praktyczne którą przeczytałam wiedza przydała wybór liceum kwestią przypadku jako latka buntowałam takimi poważnymi wyborami ostatecznie zdecydowałam mat inf na studia poszłam uniwersytet warszawski mim wydział matematyki informatyki mechaniki p na studiach robiłaś jakieś praktyki wyjeżdżałaś zagraniczne staże a pierwsze doświadczenia związane miałam szłam liceum przeczytałam przecież php praktyczne związku czym stworzyłam kogoś pierwszą stronę wizytówkę to pierwsze zarobione przeze pieniądze w liceum byłam pewna siebie szukałam gumtree ogłoszeń pracę odpowiedziałam ogłoszenie dostałam możliwość praktyki firmie netkata przez pół chodziłam kilka godzin tygodniowo oni włożyli naprawdę sporo czasu pracy poduczyć p a chodzi jakąś poważniejszą praktykę a to tuż liceum stworzyłam własne ogłoszenia gumtree odezwał krzysztof kulewski obecnie pracuje google zaprosił rozmowę rekrutacyjną firmy dts działu r d robią strony internetowe django poszłam rozmowę dostałam pracę przepracowałam zaczęłam front endu praktycznie robiłam css javascript pół przerzuciłam pisanie django p co dalej zakończyłaś współpracę tą firmą a na drugim pracowałam firmy zajmującej płatnościami mobilnymi tam przepracowałam lata w czasie dwóch wzięłam miesięczny urlop podczas robiłam praktyki londynie google p podejrzewam dostać praktyki google a nie względu fakt początku pisało rekruterów google czym mówił nadaję tą pozycję następnego dnia pisał mówił propozycję stażu google moja rekrutacja zaczęła wrześniu a praktyki miałam zaczynać lipcu etapów rekrutacji sporo ostatecznie zostałam przyjęta staż google londynu manager brukseli miejscu dostałam hosta zajmował manager przylatywał dni tygodniu londynu po próbowałam rekrutować fulltime znowu samo na wszystkie interview spóźniali potrafili odwołać minut poczułam chcę pracować takiej firmie bardziej byłam równocześnie rekrutacji dropboxa miałam zupełnie doświadczenia temacie p jak wyglądała rekrutacja dropboxa czym różniła rekrutacji google a podejrzewam przebieg rekrutacji każdej firmie podobny najpierw rozmowa telefoniczna kilka później zapraszają spotkanie biurze rozwiązujesz zadania jeśli chodzi dropbox odbyłam rozmowy telefoniczne rozwiązałam jakieś zadania techniczne po dwóch rozmowach dostałam zaproszenie biura san francisco oczywiście odbywa koszt firmy spędziłam siedmiu godzin czego miałam rozmów rekrutacyjnych wszystkie techniczne p ile czasu minęło pierwszego kontaktu dropboxem momentu faktycznie zaczęłaś pracę a minęło czasu pierwsze rozmowy dropboxem miałam mniej więcej wrześniu a pracę rozpoczęłam listopadzie ofertę złożyli styczniu od momentu mieli miesiące złożyć moim imieniu aplikację wizę h1b wizę dostałam dopiero początku września p z kojarzę czasie kończyłaś studia wzięłaś udział hackathonie facebooka opowiedz wyglądało a wydaje pierwszy organizowali lokalny etap warszawie to listopad na początku planowałam iść wiedziałam czym polegało słyszałam pójdziemy sobotę będziemy programować godziny poszłam projektu wzięłam laptopa w międzyczasie zdążyłam wymyślić mogę zrobić już samym hackathonie udało skompletować zespół napisaliśmy aplikację files for groups aplikacja skanowała wszystkie grupy przedstawiała formie folderów wyświetlała wszystkie udostępnione pliki to prosty projekt godzinach działającą aplikacją tak złożyło aplikacja została wybrana wygrała jako nagrodę facebook ufundował wyjazd usa finały p nigdy przeszło myśl aplikowanie facebooka a nigdy aplikowałam facebooka tak naprawdę moim stażem google nigdzie aktywnie rekrutowałam dropbox napisał polecił kolega stażu m powiedz proszę czym oprócz udostępniania plików zajmuje dropbox czym zajmuje dział a pracuję paper infrastructure drugie dziecko dropboxa dropbox postawić paper pokazać stanie wypromować drugi produkt edytorem tekstowym minimalistycznym wygodnym zajmuję szeroko pojętą infrastrukturą w przeciwieństwie samego dropboxa infrastruktura podzielona poddziały są ludzie zajmują bazami danych ludzie zajmują serwerami w paper teamie jest osiem osób zajmujemy ktoś zabawnie określił takim całym fullstack infrastructure obecnie zajmuję usprawnieniem działania routingu paper wkrótce zacznę optymalizować search m widziałem znasz technologii języków programowania c php wspomniałaś javę pythona w dropboxie paper czego głównie korzystasz a tak naprawdę wykorzystujemy jest typescript java scala lua niektóre rzeczy związane konfiguracją robimy użyciu ruby m na czym oparty cały silnik paper a silnik oparty javie typescript m w języków najbardziej lubisz pisać wolisz niskopoziomowe wysokopoziomowe języki a wolę języki niskopoziomowe ostatnie cztery lata pisałam wyłącznie c rok javie głównie pisałam c czuję c m nie wspomniałaś ciekawym zagadnieniu związanym terminalami płatniczymi mieliśmy okazję porozmawiać wczoraj czy mogłabyś opowiedzieć terminalach co robi czego wykorzystywane c problemy napotkać a w mojej drugiej pracy miałam czynienia terminalami płatniczymi przetwarzaniem danych kartowych terminalach w zasadzie terminale prymitywnymi urządzeniami my współpracowaliśmy chińskim producentem sprzętu większość oparta okrojonym linuxie wszystkie pierwsze terminale którymi firma pracowała miały autorski chiński system operacyjny wymagał kompilatora bezpośrednio producenta nie zbyt wielu dodatkowych bibliotek pisać wyłącznie c zarówno flash ram ograniczone na szczęście terminalu musiałam pisać praktycznie razu wzięłam miały wspomnianego ograniczonego linuxa tak naprawdę mogliśmy razu pisać c producent dostarczył odpowiedni kompilator m padło ciekawe pytanie czacie czy poleciłabyś komuś dopiero zaczyna programować zająć c raczej czymś bardziej zobaczyć a myślę warto zacząć jakiegoś prostego frontendu sprawdzić potrafi wiele osób uczy używać wysokopoziomowych języków natomiast rozumie spodem działa przeszkadzać dalszej karierze m jak widzisz przyszłość języków wspomniałaś czy uważasz któryś bardziej przyszłościowy któryś warto angażować a to zależy branży myślę chodzi web iść najbardziej stronę nowoczesnych technologii zresztą zmieniają częściej pół są tematy terminale płatnicze raczej nieprędko przejdą nowsze technologie terminale verifone samym systemie operacyjnym ludzie rozumieją działa pisanie aplikacji straszną zmorą nauczysz duża szansa programista verifone znajdziesz pracę p chciałbym wrócić tematu pracy dropboxa istnieje używa pół miliarda ludzi jak wygląda ile osób pracuje dropboxa a jest tysięcy osób biura dropboxa trzy stanach san francisco nowym jorku seattle jest biuro tel aviv programistów są biura głównie sprzedażowe europie jedynie dublinie trochę programistów wiadomo samodzielnego zespołu p możesz opowiedzieć wyglądała relokacja usa na należy zwrócić uwagę a przed przyjęciem oferty relokacją warto sprawdzić sieci kosztuje miesięcznie miejscu chcemy przeprowadzić możemy zapłacić wynajem mieszkania jakiej powierzchni jakiej dzielnicy kosztuje jedzenie itd warto zwrócić uwagę firma oferuje pakiet medyczny ubezpieczenie stanach wizyty lekarzy drogie dla przykładu wizyta internisty kosztuje konsultację za zrobienie poważniejszego badania ceny wyższe dlatego warto mieć zapewnione dosyć dobre ubezpieczenie pracodawcy warto dopytać jeśli chodzi relokację moim przypadku firma płaciła bilet nadbagaż mieszkanie pierwsze dni mogła spokojnie znaleźć swojego warto dopytać firma skłonna zapłacić brokera opłatę którą płaci brokerowi znalazł mieszkanie p jak odnalazłaś podczas pierwszych dni nowym jorku a kiedy przyleciałam usa kolejnego dnia byłam umówiona moim managerem dropboxie chciał spotkać porozmawiać pokazać biuro dowiedziałam lodówka piciem wygląda wydawanie obiadów pomieszczenie a ukryte szafki alkoholem itd kiedy skończył oprowadzać spytał jakieś pytania odpowiedziałam otworzyć konto banku social security number to pytanie zaskoczyło widać ogóle przygotowany wynika przynajmniej biurze nowym jorku swego rodzaju ewenementem większość ludzi pracuje obywatele stanów zjednoczonych osoby miały wcześniej doświadczenie pracy usa wszyscy dziwią ledwo skończyłam studia spakowałam przyjechałam stanów mówią odważne jednocześnie wiedzieli czego będę potrzebować przygotowani pytania mojej strony p jak wyglądał pierwszy kontakt pracownikami dropboxa nie miałaś problemu zrozumieć dogadać a nie problemu wszyscy pozytywnie nastawieni największą rzeczą irytuje kwestia wymówić imię na imię agata angielsku istnieje ekwiwalent mojego imienia a pytanie wymawia słyszę przynajmniej tygodniu p padło międzyczasie pytanie dropbox bajery różnego rodzaju zatrzymać pracownika najdłużej typu przedszkole siłownię jak biurze nowym jorku a san francisco a w biurze san francisco trochę więcej rzeczy jest siłownia bezpośrednio biurze miejsce wysyłać paczki mają ogromną kuchnię stołówkę całe piętro budynku poświęcone jedzenie mają swoją kawiarnię samodzielnie parzą kawę w nowym jorku trochę skromniej pracuje osób w biurze san francisco nie bezpośrednio biurze siłowni tygodniu przychodzi trener jogi jest biblioteczka stół ping ponga każdy zaczyna swój dzień pracy innych godzinach p zastanawiam wygląda typowy dzień pracy czy kodujesz większość czasu spędzasz spotkaniach a zaczynam dzień reguły czytania maili jeśli ktoś pracował korporacji jednego dnia dostać sto maili czego dotyczą następnie code review przeczytanie dokumentów międzyczasie zostały zaktualizowane następnie lunch a później zależy dnia tygodnia są dni wypełnione spotkaniami brzegi dni siedzę piszę kod p co najbardziej lubisz swojej pracy dropboxie a najbardziej lubię pisać kod moment wchodzi produkcję grafach widać działa szybciej przybywa użytkowników a zmniejsza zużycie procesora moment czujesz zrobiłeś naprawdę zaczyna działać p ty sprawdzasz swojej pracy dzieje dropboxie sytuacji ktoś odstaje względem innych pracowników czy jakieś programy doszkalające a to wygląda pierwsze sześć tygodni residency program polega masz mentora chodzisz różne spotkania dodatkowe zajęcia opowiadają działa robimy code review używamy konkretnych narzędzi itd firma przeznacza jakąś kwotę rocznie każdego pracownika pracownik wyrazi chęć samodzielne doszkalanie może zakup książek udział szkoleniu konferencji w najbliższą niedzielę opublikujemy drugą część rozmowy agatą cieplik dropboxa ruszamy trzecią serią livestreamów polskimi programistami piotr nowosielski ceo just join it listopada online rozmawiał polskimi developerami opowiedzą pracy granicą z rozmów dowiecie wygląda kultura pracy dużych firmach dba rozwój pracowników z kim będziemy rozmawiać edycji tysięcy uczestników poprzednich dwóch edycji utwierdziło przekonaniu prostu musimy kontynuować serię livestreamów dlatego ostatnie miesiące pracowaliśmy jesień ruszyć trzecią serią programu tym razem będziemy rozmawiać polskimi developerami meksyku londynu seattle nowego jorku zadamy szczegółowe pytania dotyczące procesu rekrutacji codziennego nowym kraju chętnie przekażemy pytania was zadawajcie komentarzach artykułem facebooku polscy programiści pierwszym gościem programu paweł mieczkowski full stack net developer scottish enterprise mieszka pracuje monterrey meksyku to ciekawa historia drogi developera wyjechał nastolatek polski zwiedzić pracował różnych klientów rządu szkocji stronę zamawiania walut american express od pomieszkuje kolumbii brazylii meksyku pracuje zdalnie krajów livestream odbędzie tomasz wiszkowski software developer google drugi gość trzeciej serii livestreamów od pracuje branży it a programowaniem zajmuje jak mówi param rzeczami niechcianymi dzięki czemu wiele razy byłem wysyłany niszowy specjalista podróże służbowe uwielbia chodzenie górach pogoda pozwala majsterkuje domu od mieszka seattle mieście marzy wielu ta rozmowa odbędzie r trzecim gościem livestreamu michał franc engineering lead just eat michał pracuje londynie swoją przygodę programowaniem rozpoczął wrocławiu ma letnie doświadczenie stanowiskach programisty architekta lidera o mówi technologicznym poliglotą postrzegającym kod szczegół implementacyjny zakochany vimie konsoli i3wm skupiony systemach rozproszonych micro servisach service meshu tworzeniu skalowalnych rozwiązań chmurze ten livestream odbędzie r programista pasjonat zamiłowaniem bezpieczeństwa komputerowego niskopoziomowych aspektów informatyki gościem kolejnego livestreamu gynvael coldwind information security engineer google autorem książki zrozumieć programowanie licznych artykułów publikacji podcastów wystąpień poświęconych wspomnianym tematom coldwind współzałożył kapitanem zespołu dragon sector jednej najlepszych drużyn ctf od mieszka zurychu rozmowa odbędzie r bartłomiej smykla open source engineer vmware podczas rozmowy opowie pracy openfaas narzędziem wpisującym popularny ostatnio trend serverless function as a service bartłomiej uważa wiecznego junior developera marzeniem uczenie końca uważa programowanie każdego wolny czas nauką poświęca pomaganiu innym starając propagować ego less programming livestream bartłomiejem odbędzie r w przeciwieństwie moich kolegów podstawówki miałam domu peceta składanego razem ojcem godzinach pracy znałam wszystkich gier pykali chłopcy lekcjach informatyki klasie zamiast pisałam programy logo powiedziała agata cieplik software developer dropboxa dzień mieszka nowym jorku podczas livestreamu zapytamy pracuje dużej firmie rozmowa odbędzie r damian busz fullstack developerem adidasie pracuje monachium jak mówi niemiec przyjechał większej płacy piwa prostu swojej dziewczyny pracuje firmy dostarcza oprogramowanie firm adidas większości adidasa najczęściej programuje backendzie głównie pythonie podczas rozmowy zapytamy proces rekrutacji wyglądała rozwoju przeciętnego studenta informatyki livestream odbędzie r o pracuje malcie opowie michał turek frontend developer gig mieszka wyspie powierzchni porównywalnej powierzchni wrocławia słoneczne dni występują razy przeprowadzka możliwa dzięki ukończeniu technicznej uczelni krakowie a następnie studiów podyplomowych białymstoku jestem dobrym przykładem początkujący programiści spakować walizki ruszyć wymarzą zapowiada rozmowa odbędzie r adam furmanek software development engineer amazonie ostatnim gościem trzeciej edycji livestreamów polskimi programistami adam seattle przyjechał krakowa skończył informatykę wieit agh dawne samogłoski kilka pracował głównie programista net a wolnych chwilach organizował konferencje prowadził prelekcje grupach dyskusyjnych karierę zaczynał pisząc aplikacje desktopowe mobilne javie livestream adamem odbędzie r poprzednie edycje w poprzednich edycjach rozmawialiśmy polskimi developerami pracującymi firmach wikipedia microsoft akka google vmware trivago stripe wszystkie rozmowy znajdziecie kanale just join it a postanowiliśmy spisać tekst znajdziecie naszym magazynie zakładce live streamy konkurs uczestników cieszymy was chętnie oglądacie rozmowy polskimi programistami specjalnie was zorganizowaliśmy konkurs wystarczy udostępnicie facebooku krótką wzmiankę wydarzeniu dodacie hashtag justjoinit link https event justjoin it spośród wszystkich udostępnień wylosujemy osób wręczymy dowolnie wybrane koszulki ogłoszenie wyników nastąpi listopada z góry dziękujemy wszystkie udostępnienia zapraszamy listopada pierwszy livestream
jednym podziałów dominujących naszym społeczeństwie odwieczna dyskusja mierzy sobą humanistów naukowców sztukę pojęcia jakby połączyć dwóch pozornie przeciwstawnych pojęć spotify platforma muzyczna pomocą algorytmów modeli rekomendacji dopasowuje ofertę indywidualnych użytkowników pokazuje odwieczna walka dziedzin artystycznych kończy sophia ciocca software engineer the new york times w ukończyła studia ekonomiczne uniwersytecie pensylwanii w pół pracowała korpusu pokoju specjalista nauczania przedsiębiorczości rok później ukończyła kurs javascript fullstack academy of code w tekście sophia uchyla rąbka tajemnicy dotyczącej strategii spotify tworzeniu spersonalizowanych cotygodniowych playlist swoich użytkowników polecamy artykuł każdemu kogo fascynują mechanizmy stojące spotify każdemu pragnie zobaczyć muzyka przedmioty sobą współpracować poniższy tekst został przetłumaczony zgodą autorki w poniedziałek milionów użytkowników spotify swojej skrzynce pocztowej znajduje nową playlistę zatytułowaną discover weekly to spersonalizowana lista piosenek pory dany użytkownik okazji wysłuchać osobiście wielką fanką spotify a szczególności discover weekly dlaczego bowiem sprawia czuję zauważona spotify zna upodobania muzyczne lepiej ktokolwiek a utwory poleca prawie przypadają gustu pewnie znalazła dla słyszeli spotify pozwólcie przedstawię mojego najlepszego wirtualnego przyjaciela jak okazuje obsesję punkcie discover weekly baza użytkowników wręcz szaleje doprowadziło spotify przemyślenia swojej strategii zwiększenia inwestycji playlisty oparte algorytmy od momentu discover weekly pojawiło pierwszy scenie spotify chciałam zrozumieć mechanizmy odpowiedzialne po trzech tygodniach szaleńczego googlowania wrażenie wreszcie udało dojrzeć czegoś kotarą zatem spotify stanie wybrać piosenek każdego użytkownika każdego tygodnia zróbmy krok tyłu spójrzmy najpierw serwisy muzyczne radziły rekomendacjami spotify robi lepiej krótka historia serwisów muzycznych jeszcze latach songza zapoczątkowała erę serwisów muzycznych serwis tworzył playlisty pomocą ekspertów muzycznych decydowali utwory należy umieścić sposób sprawdzał opieranie wyłącznie ekspertów muzycznych brało uwagę muzycznych upodobań każdego użytkownika podobnie songza pandora serwisów oferujących muzykę stosowała bardziej zaawansowane podejście opisując każdą dźwiękową odpowiednio tagując następnie kod pandory filtrował konkretne tagi utworzyć playlistę podobnym brzmieniu mniej więcej samym czasie narodziła agencja muzycznej inteligencji the echo nest miała radykalne podejście personalizacji muzyki the echo nest stosował algorytmy analizowania zarówno dźwięku audio tekstu danego utworu pozwalało identyfikację muzyki pozwalając sposobem spersonalizowane rekomendacje tworzenie playlist analizę następnym graczem rynku last fm proponowania muzyki użytkownikom używa procesu zwanego collaborative filtering więcej temat później jakie podejście spotify trzy modele rekomendacji spotify aby stworzyć discover weekly spotify stosuje mieszankę trzech typów modeli rekomendacji zobaczmy działa powyższych modeli model rekomendacji numer collaborative filtering najpierw małe wprowadzenie ludzie pierwszy słyszą pojęcie collaborative filtering reguły pierwsza myśl jaka przychodzi głowy netflix pierwszych platform zastosowała metodę procesie rekomendowania swoich produktów poprzez używanie ocen filmów po sukcesie netfliksa collaborative filtering szybko rozprzestrzeniło obecnie będąc początkowym punktem każdego stworzyć model rekomendacji w przeciwieństwie netfliksa spotify gwiazdkowej oceny muzyki zamiast bierze uwagę czynniki przykład fakt użytkownik zachował dźwiękową własnej playlisty odwiedził stronę artysty wysłuchaniu piosenki czym collaborative filtering działa przyjmijmy dwóch użytkowników jednemu podobają utwory p q r s podczas drugiemu podobają utwory q r s t collaborative filtering stanie stwierdzić oboje użytkowników podobny gust muzyczny sugeruje pierwsza osoba odsłuchała t a druga p w spotify używa koncepcji zasugerować dźwiękowe milionów użytkowników oparciu preferencje milionów innych użytkowników za pomocą macierzy bibliotek pythona w rzeczywistości macierz którą widzisz powyżej gigantyczna każdy rząd reprezentuje jednego milionów użytkowników spotify a każda kolumna reprezentuje jedną milionów piosenek bazie danych spotify biblioteka pythona przetwarza poniższe działanie kiedy skończone typy wektorów przedstawione x y x wektorem użytkownika reprezentującym upodobania pojedynczego użytkownika a y wektorem piosenki reprezentującym profil pojedynczej piosenki macierz użytkownik piosenka produkuje typy wektorów wektor użytkownika wektor piosenki mamy milionów wektorów użytkowników milionów wektorów piosenki zawartość wektorów właściwie zbiór liczb same znaczenia przydatne porównamy siebie aby dowiedzieć użytkownicy podobne upodobania muzyczne collaborative filtering porównuje wektory użytkowników końcu znajdzie siebie najbardziej zbliżone tak samo dzieje przypadku wektora y możesz porównać wektor pojedynczej piosenki innymi piosenkami wybrać piosenkę najbardziej podobna którą pytamy collaborative filtering daje radę całkiem ulepszyć swoją ofertę spotify dodał kolejny silnik model rekomendacji numer natural language processing drugim rodzajem modelu rekomendacji używanego spotify natural language processing dane używane modele nazwa wskazuje zwyczajne słowa metadane dźwiękowych artykuły blogi wszelkie teksty internetu natural language processing oznaczające umiejętność komputera rozumienia ludzkiej mowy szerokim pojęciem samym zaprzęgniętym dodatek analizę sentymentu ang sentiment analysis w artykule będziemy stanie wyjaśnić dokładnego mechanizmu nlp możemy mniej więcej przedstawić zarys procesu spotify bezustannie przeszukuje internet metadane dźwiękowych artykułu blogi itd poszukiwaniu m in przymiotników używanych opisania poszczególnych artystach piosenek poprzez ustalenie artysta piosenka opisywany pomocą podobnego języka spotify stanie wybrać utwory mogłyby spodobać danemu użytkownikowi mimo wiem dokładnie dane potem przetwarzane spotify mogę zaoferować pewien wgląd dawną współpracę pomiędzy echo nest a spotify echo nest pakowało dane spotify czegoś nazywali wektorami kulturowymi top terms każdy artysta piosenka mieli tysiące top terms zmieniały codziennie każdy term przypisaną wagę korelowała ważnością prawdopodobieństwo ktoś opisze artystę piosenkę pomocą frazy podobnie przypadku collaborative filtering model nlp używa terminów wagi stworzyć reprezentację wektorową piosenki zostać użyta zdeterminowania dwóch kawałków muzyki podobnych siebie niezłe prawda model rekomendacji numer raw audio models możesz myśleć sophia przecież tyle danych dwóch pierwszych modeli po analizować audio po pierwsze dodanie trzeciego modelu dodatkowo zwiększa precyzję jaką spotify stanie polecić utwory ponadto model tyle lepszy pozostałe modele uwagę bierze popularne utwory piosenki mało znanych artystów weźmy przykład piosenkę napisaną twojego przyjaciela odsłuchań zatem zbyt wielkiej możliwości przeprowadzić collaborative filtering na dodatek innej wspominki internecie model nlp znajdzie raw audio models patrzy popularność piosenek dzięki piosenka twojego przyjaciela wskoczyć discover weekly razem utworami cieszą większą popularnością w spotify analizuje raw audio data za pomocą głębokich sieci konwolucyjnych ang convolutional neural network cnn cnn technologia reguły używana oprogramowaniu rozpoznawania twarzy przypadku spotify została zmodyfikowana pozwalający użytkowanie danych formacie audio raczej pikselach tutaj przykład budowy cnn ta poszczególna sieć neuronowa cztery warstwy konwolucyjne przedstawione szerokie słupki lewej trzy gęste warstwy widziane formie węższych słupków prawej widoczne częstotliwości dźwięku następnie utworzyć spektogram końcowo analizowania kluczowych cech danego utworu pozwala spotify zrozumieć fundamentalne podobieństwa pomiędzy piosenkami samym użytkownikom spodobają najbardziej ten pokryliśmy całą podstawę trzech głównych typów modeli rekomendacji stosowanych spotify utworzenia discover weekly oczywiście modele rekomendacji podłączone większego ekosystemu spotify zawiera ogromne ilości danych stosuje wiele zbiorów hadoop skalowania rekomendacji umożliwiania silnikom pracę wielkich matrycach niekończących artykułach muzycznych plikach audio mam nadzieję artykuł wzbudził waszą ciekawość wzbudził moją pozostaje dalej przedzierać własne discover weekly poszukiwaniu nowych faworytów doceniając samym uczenie maszynowe miejsce kulisami sztuczna inteligencja wielu kojarzy kompleksowymi drogimi systemami koniec okazać groźne a całej naszej cywilizacji jednak zanim odejdziemy myślami czarnych scenariuszy warto spojrzeć obecną sytuację it a dokładniej rosnąca dostępność rozwiązań wpływ rozwój prostszych aplikacji julianna sykutera copywriter redvike freelancerka zazwyczaj pisząca j angielskim na dzień tworzy treści redvike pisząc teksty pierwszym miejscu stawia odbiorcę docelowego fakty sytuację rynku dopiero potem clickbait wynalazki zazwyczaj podejmuje skomplikowanych tematów it mit sztucznej inteligencji choć rośnie zrozumienie czym czemu służy ai wielu sztuczna inteligencja nadal budzi niepokój powodem obawa zawładnie wymagania budżetowe takiego projektu tworzenie własnych technologii zakresie sztucznej inteligencji rzeczywiście sporo kosztuje dlatego wspieranie małych rozwiązań uczeniem maszynowym sztuczną inteligencją rozchodzi korzystanie odpowiednich narzędzi rolą specjalistów zakresie przykład software house pomoc doborze właściwych bibliotek technologii w sztuczna inteligencja wielką inwestycją a produkt wiele skorzysta wprowadzeniu machine learning mniejszych aplikacjach małe firmy zasoby ludzkie budżet szybko kończą szukają rozwiązań pozwalających zwiększenie atrakcyjności produktu a idzie powiększenie liczby użytkowników właśnie należy patrzeć sztucznej inteligencji stworzyli inni programiści w cały proces wymaga armii ludzi opracowywania funkcjonalności a produkt sprytny zyskać część wachlarza możliwości przykłady zwyczajnych aplikacji wykorzystujących machine learning dango aplikacja mobilna prostym celem pomoc znalezieniu idealnego emoji dango integrowane różnymi komunikatorami przewiduje emoji naklejki gify trakcie pisania by zrozumieć pisane słowa aplikacja uczy maszynowo zwraca uwagę kontekst jakim użytkownicy używają emoji food delivery restaurant apps tutaj możliwych implementacji zacznijmy odpowiedzi pytania przyjmowania zamówień sugestii lokali oparciu preferencje użytkownika aplikacja historię zamówień sugerować dania prawdopodobnie spodobają użytkownikowi idąc dalej aplikacje dostarczania jedzenia wyposażone uczenie maszynowe analizować warunki drodze dokładnie przewidywać czas oczekiwania transport podobnie przypadku jedzenia możliwość monitorowania analizowania warunków drodze wartościową funkcjonalnością ponadto rozbudować zależności potrzeb poprzez uwzględnienie obiektów warto odwiedzić drodze cieszą ogólnym zainteresowaniem użytkowników aplikacje zarządzania ten rodzaj aplikacji pomóc monitorowaniu naszych nawyków a planowaniu tworzeniu listy zadań aplikacja zatem sugerować datę czas najlepszy iść siłownię w aplikacja dostarcza użytkownikowi informację nawykach czasie wykonuje dane czynności finalnie pozwala użytkownikowi zrozumieć przebieg swojego dnia później lepiej zarządzać swoim czasem dlaczego sztuczna inteligencja pomocna jedną pierwszych najbardziej oczywistych zalet paliwem cyfryzacji komputeryzacji pracy redukcja czasu potrzebnego wykonywanie powtarzających codziennie zadań szczególnie przydatne przypadku zespołów firm ograniczonym budżetem dużym obszarem takiej optymalizacji obsługa klienta człowiek pytania działu obsługi klienta zamknąć pewnych konkretnych kategoriach scenariuszach a pojawi wyjątek narzędzie poprosić pomoc człowieka w podobny sztuczna inteligencja pomagać obsłudze klienta trybie przykładowo oferować spersonalizowaną formę obsługi dostęp danych analitycznych jest stanie przewidywać produkt klient wybierze oparciu historię zamówień kategorie kolekcje aplikacji e commerce jakich użytkownik szuka na koniec pomóc wyciągnięciu konkretnych wniosków zebranych danych przykład zdeterminowanie przydatności naszej aplikacji technologia dać zarys zmieniają marketingowe trendy a samym działania konkurencji jak patrzeć nowoczesne rozwiązania myślimy wprowadzeniu przede wszystkim liczy cierpliwość stopniowe wprowadzanie technologii dzięki możemy uniknąć potencjalnej katastrofy przykładem boty twitterze niektóre konta obsługiwane komputer sieć neuronowa poszła złym ubliżały ludziom zamiast rozwiązywać problemy dlatego myślimy wprowadzeniu sztucznej inteligencji uczenia maszynowego warto najpierw wdrożyć część funkcjonalności a następnie stopniowo poszerzać wpływ technologii produkt samym zwiększając korzyści zachowując kontrolę działaniem co sprowadza sztuczna inteligencja uczenie maszynowe wspierać zespół sprzedaży marketingu tworzeniu produktów poprzez wdrożenie rozwiązań aplikacji możemy znacznie zwiększyć przydatność satysfakcję użytkownika sztuczna inteligencja poniekąd wykonuje powtarzalną pracę możemy przeznaczyć zaoszczędzony czas pracę kreatywną dlatego warto opierać nowym technologiom twoja konkurencja korzysta jest duża szansa ktoś reguły pojęcia wygląda praca it dźwięk dwóch sylab ti wyobraża hackera czarnej bluzie kapturem stuka nerwowo klawiaturze podczas linie kodu migają oczami ciemnym ekranie komputera od pracy zależy prezydenta usa obraz propaganda dużej mierze zawdzięczamy amerykańskim filmom daniel bourke inżynier przedsiębiorca youtuber mieszkający australii po ukończeniu licencjatu dietetyki uniwersytecie queensland postanowił rozpocząć samodzielną naukę uczenia maszynowego pomocą kursów internetowych oferowanych m in coursera w założył firmę mrdbourke studios tworzy artykuły video tematy związane technologią zdrowym trybem sztuką przykro obalać mit praca it reguły wygląda inaczej często zdarza pracownicy szybko wypalają tracą chęć motywację pracy powodów wiele m in fakt oczekiwania nijak rzeczywistości polityka firmy wewnętrzne układy między pracownikami a praca wyizolowanych zespołach w artykule daniel opisuje rzeczy nauczył początku swojej kariery it polecamy każdemu rozpoczyna swoją podróż branżą artificial intelligence poniższy tekst został przetłumaczony zgodą autora zarówno uczenie maszynowe data science niezwykle szerokimi pojęciami kompetencje specjalistów danej dziedziny niezwykle różnić między sobą to potrafi specjalista wybranej dziedziny różnić kompetencji innego specjalisty samej dziedzinie między innymi używają przeszłości tj danych zrozumienia przewidywania przyszłości budowania modeli aby powyższe przykłady uzyskały jakiś kontekst najpierw wyjaśnię czym polegała praca otóż mieliśmy mały zespół konsultingowy spraw uczenia maszynowego zajmowaliśmy wszystkim zbierania danych manipulację budowanie modeli usług każdym przemyśle jakim możesz pomyśleć mówię czasie przeszłym tamtego momentu porzuciłem pracę inżynier uczenia maszynowego założyłem swój business stworzyłem temat osobne video typowy dzień kiedy pracowałem inżynier uczenia maszynowego codziennie rano wchodziłem biura wymieniałem powitaniami wkładałem jedzenie lodówki zalewałem kubek kawy podchodziłem mojego biurka siadałem spoglądałem notatki dnia poprzedniego uruchamiałem slacka czytałem zaległe wiadomości sprawdzałem linki którymi podzielił zespół zazwyczaj udawało znaleźć mogło pomóc projektem danym czasie zajmowałem jeśli zbliżały jakieś deadliny skracałem czas poświęcony czytanie artykułów zabierałem projekt najpierw przeglądałem moją pracę poprzedniego dnia sprawdzałem notatnik poszukiwaniu następnych kroków wcześniej kolei rozpisałem pomagały zdarzyło utknąć projektem następnie większość czasu upewniałem dane formacie nadawał modelowania i czas mijał czwartej południu nastawał czas stopniowe kończenie zadań dzień uwzględniało m in czyszczenie kodu czytelny dodawanie komentarzy itp przy procesie zadawałem pytania ktoś miałby przeczytać zazwyczaj byłem niesamowite szybko zgubić wątek przed południu kod githubie a notatki następny dzień przygotowane jednak dzień układał idealnie bywało wpadłem jakiś super pomysł południu pracowałem tyle macie zatem zarys mojej codziennej rutyny inżynier uczenia maszynowego zanurkujmy szczegóły dotyczące czego nauczyłem podczas pierwszego pracy inżynier uczenia maszynowego zawsze chodzi dane jeśli jesteś zaznajomiony niektórymi pierwszych zasad data science wydawać ci wręcz banalne zaskakujące zapominam zbyt wiele razy skupiałem budowaniu lepszego modelu aniżeli ulepszaniu danych model oparty kiedy pierwszy angażujesz projekt spędź anormalną ilość czasu zaznajamiając danymi mówię anormalną reguły musisz pomnożyć pierwsze szacowanie trzy razy na dłuższą metę zaoszczędzi sporo czasu twoim celem jakimkolwiek nowym zbiorem danych powinno zostanie ekspertem sprawie sprawdź dystrybucję znajdź różne rodzaje features outliers czemu outliers jeśli jesteś stanie opowiedzieć historii danych którymi pracujesz oczekujesz model dokona przykładowy cykl eksploracyjnej analizy danych masz zrobić każdym razem spotkasz nowym zestawem danych więcej temat a gentle introduction exploratory data analysis problemy komunikacją trudniejsze problemy techniczne większość problemów którymi spotkałem natury technicznej a raczej komunikacyjnej nigdy podważaj wagi komunikacji zarówno zewnętrznej wewnętrznej nie gorszego rozwiązanie technicznego problemu dowiedzieć problem rozwiązać jak takiego ogóle mieć miejsce zewnętrznie nieporozumienie między czego szukał klient a uczenie maszynowe stanie zaoferować wewnętrznie natomiast spowodowane brakiem pewności cały zespół pracował wspólnemu celowi jak naprawić regularnie sprawdzaj dzieje czy klient rozumie zespół zaoferować czy rozumiesz problem klienta czy rozumie uczenie maszynowe zaoferować a czego w możesz zakomunikować wyniki a wewnętrznie jak poważnym problemem komunikacja jesteś stanie powiedzieć liczbie narzędzi starają zaradzić asana jira trello slack basecamp monday microsoft teams jeden najskuteczniejszych sposobów znalazłem ulepszenie komunikacji zespole wysłanie krótkiej wiadomości kanale projektu koniec dnia update punkty zrobiłem następnie co zamiar zrobić oparciu powyższe czy idealne nie ale sprawiało wrażenie działa dało okazję refleksji robiłem chciałem robić ponadto praca dzięki podejściu upubliczniona oznaczało mogła zostać skrytykowana nie znaczenia dobrym inżynierem jesteś twoja umiejętność utrzymywania pozyskiwania nowego biznesu koreluje twoją umiejętnością komunikowania twoich umiejętności stabilność stan techniczny napotkaliśmy problem związany klasyfikowaniem tekstu różne kategorie celem wysłanie fragmentu tekstu serwisu automatyczna klasyfikacja jednej dwóch kategorii jeśli model pewny przewidywań należało przekazać tekst human classifier z reguły zdarzało request każdego dnia zbyt zbyt mało do celu zamiast rekomendowanego bert użyliśmy metody ulmfit wiele prostsza użytku dwie gapy uczeniu maszynowym po wyszukaniu uczenia maszynowego internecie pojawiają setki wyników sam użyłem wielu stworzyć własny program studiów magisterskich ai jednakże zakończeniu wielu najlepszych kursów zacząłem pracę inżynier uczenia maszynowego umiejętności całości oparte kurs brakowało specyficznej wiedzy umiejętności nauczysz kursie kwestionować dane należy eksplorować a eksploatować jakie rozwiązanie miałem szczęście znajdowałem pobliżu najbardziej utalentowanych ludzi australii jednakże byłem gotów uczyć popełniać błędy oczywiście mylenie moim celem zanim zrobisz poprawnie musisz odkryć jeśli uczysz uczenia maszynowego kurs ucz dalej uzbrój specyficzną wiedzę poprzez zastosowanie czego uczysz praktyki poprzez pracę swoimi projektami a procesem wdrażania ciągle dobry zauważyłem pewien trend uczenie maszynowe inżynieria oprogramowania scalają z serwisami takimi seldon kubeflow and kubernetes uczenie maszynowe wkrótce częścią grupy jedną rzeczą wybudowanie modelu jupyter notebook a inną udostępnienie modelu tysiącom a milionom ludzi sądząc ilości odsłon ostatnich prezentacji eventach cloud native niewiele ludzi spoza dużych firm zrobić czasu naszego czasu mogliśmy spędzić nauce nowych rzeczy uczenia maszynowego a wiedzy mnóstwo czasu oznaczało czasu byłoby spędzone core projektach nie dzieliło dokładnie mieć jakiś konkretny target jeśli przewagą twojego biznesu bycie najlepszym robisz przyszły biznes polega twojej kontynuacji byciu najlepszym robisz oznacza ciągłą naukę artykułów czytane mniej używane to przybliżona metryka przyjrzysz jakimkolwiek zestawom danych szybko przekonasz zdarza wszędzie jest prawo zipf a prawo price a prawo price a twierdzi połowa publikacji pochodzi pierwiastka kwadratowego liczby wszystkich autorów innymi słowy tysięcy zgłoszeń każdego przełomowych artykułów z przełomowych artykułów pochodzić samego instytutu osoby wniosek nie sposobu abyś stanie dotrzymać kroku nowym osiągnięciom lepiej uzyskać solidną wiedzę podstawowych zasad a potem zaaplikować to wytrzymały test czasu to odnoszą nowsze osiągnięcia wtedy pojawia problem eksploracji versus eksploatacji bądź swoim największym sceptykiem z problemem eksploracji versus eksploatacji możesz poradzić poprzez bycie swoim największym sceptykiem problem eksploracji versus eksploatacji dylemat pomiędzy spróbowaniem czegoś nowego a zastosowaniem czegoś sprawdzonego eksploatacja uruchomić model używałeś otrzymać numer wysokiej dokładności a zgłosić zespołowi nowy benchmark nawet otrzymujesz dobry rezultat pamiętaj sprawdzić swoją pracę poproś zespół samo eksploracja pomaga zasada czasu mogłoby zadziałać lepiej być spędzasz czasu core produkcie pracę wokół głównego produktu moonshots tj rzeczy prawdopodobnie zadziałają nigdy stosowałem mojej pracy czego zmierzam niewielkie usprawnienia niewielkie usprawnienia naprawdę działają szczególnie pomagają zrozumieć nowy koncept zbuduj małego podzbiór twoich danych niepowiązanych zbiorów danych gumowa kaczka jeśli utknąłeś jakimś problemem samo siedzenie gapienie kod pomóc rozwiązać zamiast przegadaj problem kolegą zespołu udawaj kaczka gumy dbaj aktualność swojej wiedzy ten punkt odnosi punktu scalaniu uczenia maszynowego software engineeringu serwisy automl google microsoft udostępniają uczenie maszynowego każdemu stanie załadować zestaw danych wybrać zmienną docelową po stronie developera masz biblioteki fast ai tworzą supernowoczesne modele dostępne linijkach kodu a zestawy gotowych modeli pytorch hub tensorflow hub co oznacza znajomość podstawowych zasad data science uczenia maszynowego wciąż wymagana jednak wiedza zaaplikować twojego problemu bardziej cenna nie powodu baseline powinien supernowoczesny matma kod nad problemami klienta pracowaliśmy pomocą kodu całe uczenie maszynowe data science napisane pythonie bywały czasy pobawiłbym trochę matematyką prób replikowania czasu zajmowały istniejące frameworki mówiąc myśli matematyka niepotrzebna uczenie maszynowe deep learning końcu formami matematyki stosowanej znajomość mnożenia macierzy algebry liniowej analizy matematycznej szczególnie wzór pochodną liczby złożonej branży powszechnie stosowana pamiętaj moim celem wynalezienie nowego algorytmu uczenia maszynowego zademonstrowanie klientowi możliwości oferowało uczenie maszynowe biznesu praca zeszłego pewnie bezwartościowa następnym to wręcz gwarantowane staje bardziej powszechne powodu scalania inżynierii oprogramowania inżynierii uczenia maszynowego ale zapisałeś wybrałeś kariery co zostaje samo frameworki zmienią biblioteki statystyki prawdopodobieństwo matematyka leży podstaw terminu przydatności największe wyzwanie zaaplikujesz co mógłbym podać więcej przykładów wydaje wystarczające praca max kelsen najlepszą robotą jaką kiedykolwiek miałem problemy którymi zmagałem interesujące ludzie lepsi sporo nauczyłem decyzja zmianie miejsca pracy własną rękę chciałem przetestować czego nauczyłem jeśli macie jakieś pytania dm twitterze otwarte możecie zasubskrybować newsletter
ruszamy trzecią serią livestreamów polskimi programistami piotr nowosielski ceo just join it listopada online rozmawiał polskimi developerami opowiedzą pracy granicą z rozmów dowiecie wygląda kultura pracy dużych firmach dba rozwój pracowników z kim będziemy rozmawiać edycji tysięcy uczestników poprzednich dwóch edycji utwierdziło przekonaniu prostu musimy kontynuować serię livestreamów dlatego ostatnie miesiące pracowaliśmy jesień ruszyć trzecią serią programu tym razem będziemy rozmawiać polskimi developerami meksyku londynu seattle nowego jorku zadamy szczegółowe pytania dotyczące procesu rekrutacji codziennego nowym kraju chętnie przekażemy pytania was zadawajcie komentarzach artykułem facebooku polscy programiści pierwszym gościem programu paweł mieczkowski full stack net developer scottish enterprise mieszka pracuje monterrey meksyku to ciekawa historia drogi developera wyjechał nastolatek polski zwiedzić pracował różnych klientów rządu szkocji stronę zamawiania walut american express od pomieszkuje kolumbii brazylii meksyku pracuje zdalnie krajów livestream odbędzie tomasz wiszkowski software developer google drugi gość trzeciej serii livestreamów od pracuje branży it a programowaniem zajmuje jak mówi param rzeczami niechcianymi dzięki czemu wiele razy byłem wysyłany niszowy specjalista podróże służbowe uwielbia chodzenie górach pogoda pozwala majsterkuje domu od mieszka seattle mieście marzy wielu ta rozmowa odbędzie r trzecim gościem livestreamu michał franc engineering lead just eat michał pracuje londynie swoją przygodę programowaniem rozpoczął wrocławiu ma letnie doświadczenie stanowiskach programisty architekta lidera o mówi technologicznym poliglotą postrzegającym kod szczegół implementacyjny zakochany vimie konsoli i3wm skupiony systemach rozproszonych micro servisach service meshu tworzeniu skalowalnych rozwiązań chmurze ten livestream odbędzie r programista pasjonat zamiłowaniem bezpieczeństwa komputerowego niskopoziomowych aspektów informatyki gościem kolejnego livestreamu gynvael coldwind information security engineer google autorem książki zrozumieć programowanie licznych artykułów publikacji podcastów wystąpień poświęconych wspomnianym tematom coldwind współzałożył kapitanem zespołu dragon sector jednej najlepszych drużyn ctf od mieszka zurychu rozmowa odbędzie r bartłomiej smykla open source engineer vmware podczas rozmowy opowie pracy openfaas narzędziem wpisującym popularny ostatnio trend serverless function as a service bartłomiej uważa wiecznego junior developera marzeniem uczenie końca uważa programowanie każdego wolny czas nauką poświęca pomaganiu innym starając propagować ego less programming livestream bartłomiejem odbędzie r w przeciwieństwie moich kolegów podstawówki miałam domu peceta składanego razem ojcem godzinach pracy znałam wszystkich gier pykali chłopcy lekcjach informatyki klasie zamiast pisałam programy logo powiedziała agata cieplik software developer dropboxa dzień mieszka nowym jorku podczas livestreamu zapytamy pracuje dużej firmie rozmowa odbędzie r damian busz fullstack developerem adidasie pracuje monachium jak mówi niemiec przyjechał większej płacy piwa prostu swojej dziewczyny pracuje firmy dostarcza oprogramowanie firm adidas większości adidasa najczęściej programuje backendzie głównie pythonie podczas rozmowy zapytamy proces rekrutacji wyglądała rozwoju przeciętnego studenta informatyki livestream odbędzie r o pracuje malcie opowie michał turek frontend developer gig mieszka wyspie powierzchni porównywalnej powierzchni wrocławia słoneczne dni występują razy przeprowadzka możliwa dzięki ukończeniu technicznej uczelni krakowie a następnie studiów podyplomowych białymstoku jestem dobrym przykładem początkujący programiści spakować walizki ruszyć wymarzą zapowiada rozmowa odbędzie r adam furmanek software development engineer amazonie ostatnim gościem trzeciej edycji livestreamów polskimi programistami adam seattle przyjechał krakowa skończył informatykę wieit agh dawne samogłoski kilka pracował głównie programista net a wolnych chwilach organizował konferencje prowadził prelekcje grupach dyskusyjnych karierę zaczynał pisząc aplikacje desktopowe mobilne javie livestream adamem odbędzie r poprzednie edycje w poprzednich edycjach rozmawialiśmy polskimi developerami pracującymi firmach wikipedia microsoft akka google vmware trivago stripe wszystkie rozmowy znajdziecie kanale just join it a postanowiliśmy spisać tekst znajdziecie naszym magazynie zakładce live streamy konkurs uczestników cieszymy was chętnie oglądacie rozmowy polskimi programistami specjalnie was zorganizowaliśmy konkurs wystarczy udostępnicie facebooku krótką wzmiankę wydarzeniu dodacie hashtag justjoinit link https event justjoin it spośród wszystkich udostępnień wylosujemy osób wręczymy dowolnie wybrane koszulki ogłoszenie wyników nastąpi listopada z góry dziękujemy wszystkie udostępnienia zapraszamy listopada pierwszy livestream posiadasz zespole ludzi zaangażowanych szukają inspiracji otwarte głowy lubią eksperymentować to najważniejsze cechy muszą posiadać pracownicy o wiele wywołać owocną dyskusję pozytywnie nastawieni zadań zmian skutecznym narzędziem burza mózgów wpaść genialny pomysł a przypadku końca posiadasz pełni zaangażowane osoby zespole niezależnie okoliczności przeprowadź kreatywną dyskusję dała najlepsze oczekiwane rezultaty poznaj trzy podstawowe zasady ci pozwolą przeglądając kolejne wydanie hello news kroki kreatywności rozbudzić swój zespół hello news r just geek it ewaluacja pracowników sposoby mierzenia rozwój pracowników postępy pracy zwiększanie efektywności ważne zarówno pracodawców samych pracowników ocena postępów ważna obydwu stron pozwala określenie poziomu zadowolenia współpracy określić cele najbliższy czas jednak wiarygodnie dokonać oceny zatrudnionych osób menedżerowie bądź pracodawcy powinni kierować zestawem jasno sprecyzowanych kryteriów o czym mowa więcej temat czy studenci chcą pracować studia czas dużej mierze decyduje przyszłości młodych ludzi jest wymagający finansowo okres przeprowadzka rodzinnego domu wynajem mieszkania opłaty stałe dojazdy opłacanie a dopiero rozrywka imprezy poznawanie skąd brać pieniądze skupić nauce połączyć studia pracą okazuje studenci problemu znalezieniem pracy większych miastach gdzie najchętniej składają cv które zawody interesują więcej temat rynek pracy grozi w polsce nadal względu tendencje demograficzne możliwy spadek wzrostu gospodarczego obecnie luki rynku pracy zapełniają pracownicy wschodu co zapobiegawczy przestanie sprawdzać ministerstwo inwestycji rozwoju przyznaje r pracodawcy mieli problemy obsadzeniem piątego stanowiska pracy więcej temat pracownik długim stażem niski poziom zaangażowania zapobiec niewątpliwie obserwuje zależność między stażem pracy a zaangażowaniem najczęściej pracownicy pracują najdłużej wykazują mniejsze zainteresowanie zadaniami w literaturze nazywa pracownikami więźniami co powodem takiej sytuacji w zapobiec więcej temat jak marketing pomóc hr owcom employer brandingu każde przedsiębiorstwo stara wizerunek całej organizacji spójny pozytywnie odbierany jednak warto pamiętać odbiór głowach zebranej społeczności stały najmniejsze wydarzenie skutkować negatywną zmianą jak osiągnąć przemyślane komunikaty wzbudzały pożądane postawy emocje odbiorców fundamentem synergia dziedzin hr marketingu pr w skutecznie więcej temat czy emigranci wrócą ojczyzny raport nbp co prawda ostatnich latach emigracja nadal utrzymuje wyższym poziomie przyjazdy kraju częściej osoby wyjeżdżające poszukiwaniu pracy deklarują chęć powrotu ojczyzny czy zwiększy podaż pracy za jaką wysokość wynagrodzenia netto emigranci zdecydowaliby podjąć pracę polsce więcej temat kroki kreatywności rozbudzić swój zespół posiadasz zespole ludzi zaangażowanych szukają inspiracji otwarte głowy lubią eksperymentować to najważniejszy czynnik muszą posiadać pracownicy o wiele wywołać kreatywną dyskusję pozytywnie nastawieni zadań zmian skutecznym narzędziem burza mózgów jak przeprowadzić owocnie więcej temat rekrutacja senior developerów zdobyć największe talenty rekrutacja branży it należy najłatwiejszych programiście pasjonaci najczęściej swój pierwszy pasek kodu piszą nastolatkowie w związku mówimy programiście chciałby ubiegać stanowisko seniora ile doświadczenia powinien mieć człowiek określić takim mianem co rekruter powinien brać uwagę więcej temat zbyt obowiązków zbyt mało czasu wystarczy dobra organizacja stanowiska kierownicze wiążą odpowiednią ilością obowiązków oprócz swojego czasu managerowie odpowiadają organizację czasu pracy innych pracowników kluczem efektywnych działań zarządzanych czasie dobra organizacja w osiągnąć więcej temat zestaw najciekawszych wydarzeń branży hr jeśli masz czasu wyszukiwać najbardziej interesujących konferencji livestreamów spotkań branży hr masz szansę dowiedzieć wszystkiego miejscu jacek krajewski swoim newsletterze opowiada bezpłatnych płatnych wydarzeniach będziesz mógł wziąć udział przełomie sierpnia września października więcej temat nie ucichły echa podatności odnalezionych układach intela początku a użytkownicy muszą stawiać czoła nowym zagrożeniom grupa specjalistów spraw bezpieczeństwa firmy bitdefender zwróciła uwagę zagrożenie umożliwia nieuprawniony dostęp wrażliwych danych użytkownika zdobywania wysokopoziomowych uprawnień kolejne zagrożenie nie dawno technologiczny usłyszał lukach spectre meltdown a podobnych exploitach znalezionych procesorach intela a dowiadujemy kolejnych zagrożeniach nowe jednostki cpu zawierają podatności umożliwiające dostęp pamięci kernela sytuacja dotyczy wszystkich procesorów obsługujących swapgs o istnieniu zagrożeń poinformował zespół specjalistów spraw bezpieczeństwa firmy bitdefender nieszczęsny swapgs swapgs instrukcja wykorzystywana podmiany wartości gs pozwala przełączanie między pierścieniami trybu pamięci użytkownika kernela przy użyciu wykrytych luk uzyskać dostęp pamięci kernela a stamtąd spróbować wykraść istotne dane przechowywane dysku komputera dzięki umiejętnej manipulacji możliwy wyciek informacji jądra przestrzeni użytkownika co szczególnie niebezpieczne oznacza kradzież wrażliwych danych klucze zabezpieczeń dane logowania treść rozmów komunikatorach możliwa uzyskania wysokich uprawnień bezpieczeństwa ciągła czujność nowa wada całkowicie odporna zabezpieczenia wprowadzono neutralizowaniu wcześniej wykrytych luk spectre meltdown oznacza konieczność opracowania intel całkowicie nowego rozwiązania problemu praca odpowiednią trochę potrwać a wziąć uwagę możliwość rozwiązanie obniży wydajność procesorów miało miejsce wcześniejszych przypadkach intel lekko podatności dotyczą procesorów intela wprowadzonych rynek generacji core nowszych do nieuprawnionego dostępu pomocy swapgs wymagana dostępność instrukcji wrgbase zespół bitdefendera ostrzega niebawem hakerzy zechcieć spróbować wykorzystać nową dziurę kolejny problem związany bezpieczeństwem wykryty krótkim czasie zniechęcić konsumentów zakupu procesorów potentata santa clara wygląda urządzenia produkowane konkurencję względnie bezpieczne pory dysponujemy informacjami zgodnie którymi kiedykolwiek przeszłości miałoby dojść udanego ataku procesory amd niedawno pisaliśmy rozmowach dotyczących wykupienia apple działu intela odpowiadającego modemy kolejny tydzień kolejne wydanie naszej prasówki technologicznej tym razem przedstawiamy materiały dotyczące wydajności frontendu a rozważania dotyczące backendowych języków programowania mieć określoną datę przydatności spożycia wszystkim zainteresowanych technologią wpływem codzienne polecamy tekst nowej ustawie dotyczącej walki uzależnieniem mediów społecznościowych a najnowszym wynalazku naukowców pracujących pentagonu frontend każdy nowy feature javascript przejść cztery etapy zanim zostanie oficjalnie zawarty języku w artykule przeczytasz najbardziej oczekiwanych propozycjach dużą szansę zostać zawarte javascript więcej temat kompozycja funkcji cech pozwalają odróżnieniepodejściem funkcjonalnego object oriented javascript w artykule zostanie wyjaśniona różnica pomiędzy hierarchią klasy funkcji złożonej demonstrując samym korzyści wynikające odpowiedniej kompozycji funkcji programowania funkcjonalnego javascript więcej temat w lipcu mozilla wypuściła rynek firefox zawierający kilka interesujących zmian przeglądarki m in ciemny ekran trybu czytania ulepszenie kontrastu procedur bezpieczeństwa ponadto firefox wprowadziła parę nowych features css css scroll snapping w artykule dowiesz czego należy spodziewać zmianach css firefoxa więcej temat backend java development kit jdk kolejnej wersja javy przeszedł niedawno kolejnej fazy rampdown oznacza zestaw nowych cech zostaną wprowadzone javy skompletowany ulegnie zmianom w artykule przeczytacie jakich zmian unowocześnień należy spodziewać jdk wrześniu zawita rynku więcej temat nie język programowania trwać wiecznie nawet najbardziej popularne czasem popaść niepamięć momencie pokolenia developerów zaczynają sięgać języki frameworki którymi pracuje w poniższym tekście dowiecie pięć języków programowania prawdopodobnie skazane wymarcie więcej temat w ciągu ostatnich nastąpiło duże zróżnicowanie zakresie narzędzi technologii stosowanych obszarze aplikacji internetowych na skutek zróżnicowania wielu deweloperów zaczęły nękać pytania wątpliwości wyboru rozwiązań przeczytajcie poniższy tekst dowiedzieć zwracać uwagę doborze odpowiedniej technologii więcej temat inne kudelski security firma oferująca usługi it planach wdrożenie celowo naszpikowanej podatnościami technologii opartej blockchainie tym sposobem zwiększyć użytkowników blockchaina wspomóc deweloperów kreacji ulepszeń systemów bezpieczeństwa więcej temat debata temat szkodliwego wpływu mediów społecznościowych zdrowie psychiczne niczym nowym jednakże ostatnio senat stanów zjednoczonych powziął konkretne działania zapobiegawcze nowa ustawa nawołuje zniesienia uzależniających zwodniczych technik stosowane social media celu najdłuższego podtrzymania uwagi użytkowników projekt znacznej skali zmienić oblicze social media więcej temat naukowcy pracujący pentagonu ostatnio zaczęli opracowywać innowacyjną technikę biometryczną w oparciu unikalność bicia naszych serc stworzono laser będący stanie rozpoznać konkretnych ludzi odległości metrów a dopiero początek pracy jetsonem więcej temat dużo mówi interpretacji krajowej informacji skarbowej wynika składający zapytanie przedsiębiorca programista zapłaci korzystną stawkę podatku procent nie oznacza identyczny potraktowane zostaną przypadki przy okazji okazuje preferencyjna stawka przysługiwać dopiero jedyne procent jak wynika najnowszej interpretacji urzędu skarbowego zarabiający prawach własności intelektualnej płacić jedyne procent podatku dochodów wszystko dzięki założeniu firmy przeniesieniu kontrahenta prawa autorskiego swoich dzieł nowinka związek obowiązującą początku ulgą działalność innowacyjną ip box dotyczy twórców dostarczają rozwiązania zakresu nowych technologii przykład programy komputerowe nowe przepisy okazują zawiłe sprawy ułatwia fakt rzeczona interpretacja dotyczy jednego konkretnego przypadku jedna interpretacja wiosny czyni należy pamiętać interpretacja indywidualna dotyczy konkretnego podmiotu złożył wniosek wydanie a wiążąca innych sprawach powiedział mateusz tondera doktor nauk prawnych zajmujący filozofią prawa prawem dotyczącym nowych technologii interpretacja przyp red stanowi interesujący wgląd urząd rozumie przepisy dotyczące usługi ip box rozwiewa wszelkich wątpliwości interpretacyjnych dodaje tondera oznacza specjaliści it liczący możliwość rozliczania fiskusem zasadach muszą wziąć uwagę kilka czynników nadal wiadomo organy podatkowe interpretowały czym obszarze interesującym informatyków działalność badawczo rozwojowa rozumieniu ustawy zauważa tondera okazuje opisywanym przypadku wystarczyła deklaracja zainteresowanego informatyka urząd zaufał pobudek wykonywanych czynności związku wydał korzystną decyzję wnioskodawca stwierdził zapytaniu opracowany program efektem prac urząd przyjął stan faktyczny weryfikował twierdzeń wyjaśnia tondera nie oznacza praktyce każdorazowo szczegółowo badane organy skarbowe zastrzega prawnik zauważa obecne ustawie stwierdzenie autorskie prawo programu komputerowego stanowiące typów kwalifikowanych praw własności intelektualnej wymienianych ustawę zostało dotąd zinterpretowane właściwy organ jak radzić specjaliści it chcący skorzystać ulgi powinni dokładnie przygotować jak tłumaczy mateusz tondera przedsiębiorcy tworzący programy komputerowe a następnie przekazujący prawa powinni gotowi szczegółowego wykazania wytwory stanowią efekty działalności badawczo rozwojowej a udowodnienia oprogramowanie objęte autorskim prawem programu komputerowego warto zwrócić uwagę wymogi charakterze księgowym stawiane przepisy jakie zatem najlepsze rozwiązanie wydaje bezpiecznym sposobem sprawdzenie informatyk szansę skorzystać ulgi ip box sformułowanie wniosku indywidualną interpretację podatkową na etapie szczególnie istotne dowiedzenie kryteria przyświecały organom podczas oceny dane oprogramowanie efektem działalności badawczo rozwojowej ocenia tondera omawiana interpretacja przesłanką ostrożnego optymizmu wszystkich przedsiębiorców informatyków opracowują przekazują kontrahentom oprogramowanie warto najpierw poddać swój przypadek uważnej analizie prawnej podsumowuje prawnik ulga rok w wyniku dyskusji dotyczących ulgi ip box okazało stawka podatku wysokości procent przysługiwać dopiero w uzasadnieniu projektu strona rządowa zapewniała podatnik możliwość stosowania przedmiotowej ulgi cały okres trwania ochrony prawnej kwalifikowanych praw własności intelektualnej objaśnieniach dotyczących ulgi lipca str czytamy niemożliwe skorzystanie trakcie podatkowego póki podatnik osiągający dochody kwalifikowanego ip płacić zaliczki dotychczasowych zasadach wypadku cit procent a przypadku pit procent o nowym systemie operacyjnym huawei technologies wciąż głośno potwierdza prace nowym os trwają dawna a pierwsze urządzenia napędzane trafią komercyjny rynek niedługo być miesiącu chińskich sklepów trafi smart tv nowym systemem a premiera smartfona planowana ostatni kwartał hongmeng bliżej od dłuższego czasu wiadomo huawei pracuje własnym systemem operacyjnym nazwie hongmeng os początkowo prace nagłaśniane skupiały wokół problematyki internet of things posunięcia administracji prezydenta donalda trumpa zmusiły twórców wyjścia cienia pracy systemem najlepiej sprawdzi zamiennik androida flagowych urządzeniach chińskiego koncernu za pośrednictwem chińskiego serwisu informacyjnego global times potwierdzają przypuszczenia telefon hongmeng os pokładzie zadebiutować skomplikowane losy w drugiej połowie maja dowiedzieliśmy związku decyzją donalda trumpa usługi google a cały androidowy ekosystem przestaną dostępne chińskiego giganta technologicznego czym pisaliśmy media całym odebrały wielki cios zadany huawei technologies niedługo później administracja trumpa nieco zreflektowała dowiedzieliśmy huawei bezpieczny trzy miesiące nagłe wycofanie współpracy chińskim przedsiębiorstwem mogłoby przynieść negatywne skutki amerykańskiej gospodarki w połowie czerwca pisaliśmy natomiast doniesieniach chińskich mediów zgodnie którymi jakaś najprawdopodobniej wczesna wersja systemu hongmeng os miała trafić milion smartfonów bliżej nieokreślony od dłuższego czasu wiadomo mniej bardziej zaawansowane prace zastępstwem androida trwają najmniej a włodarzom huaweia zależy najszybszym pełnoprawnym debiucie systemu co prawda międzyczasie pojawiły pogłoski rzekomym wznowieniu pozwolenia współpracę google a huawei technologies póki doszło trudno oczekiwać chińczycy tracili czas już jesieni potwierdza pierwszy smartfon napędzany hongmeng os pojawić rynku jesieni znana orientacyjna cena za urządzenie zapłacimy tysiące juanów przybliżeniu złotych niestety nieznana specyfikacja telefonu porównując cenę urządzeń dostępnych rynku obecnie przypuszczać nowy model uplasuje gronie urządzeń niższej półki chyba huawei zechce zrekompensować użytkownikom zamieszanie związane wizerunkiem marki zdecyduje sprzedaż wyposażonego smartfona atrakcyjnej cenie choć zwykle przypadku huaweia użytkownicy prawdopodobnie mieli powodów narzekać stosunek jakości ceny mocny gracz oficjalna zapowiedź modelu okazać kluczowy percepcji nowego mobilnego systemu operacyjnego odbyć niedługo trakcie konferencji hdc rozpocznie sierpnia wydarzenie stanowiące swoiste twórców aplikacji mobilnych wydaje doskonałym miejscem zaprezentowanie możliwości oferowanych bliżej nieznany os urządzenie pojawić chińskich sklepach samym czasie mate jednak pierwszym komercyjnie dostępnym urządzeniem napędzanym hongmeng telewizor smart tv prawdopodobnie zadebiutuje chinach miesiącu huawei poradził amerykańskim ograniczeniem handlu w okresie styczeń czerwiec przychody chińskiego giganta wzrosły miliardów juanów miliardów dolarów miliardów analogicznych miesiącach dostawy smartfonów wzrosły procent rok większość transakcji odbyła rynku chińskim karaluchy słyną rzekomo nadzwyczajnych umiejętności przetrwania bywają inspiracją naukowców tym razem stały punktem odniesienia naukowców uniwersytetu kalifornijskiego berkeley w wyniku pracy powstał niezwykle sprawny robot mikroskopijne rozmiary niespotykaną wytrzymałością elastycznością przetrwają najsilniejsi karaluchy nazywane mistrzami survivalu niektórzy przypisują niesamowitą odporność promieniowanie błyskawicznie pozbawia organizmy a inni twierdzą przedstawiciele gatunku stanie przeżyć dłuższy czas głowy niezależnie prawdziwości stwierdzeń przyznać renoma zakresie sztuki przetrwania utrwaliła ludzkiej dobre na tyle naukowcy pracujący zminiaturyzowanymi robotami chcący podkreślić ponadprzeciętną odporność trudne warunki otoczenia porównują blatta orientalis brzmi oficjalna nazwa owada trzeba przyłożyć mowa zespole robotyków uniwersytetu kalifornijskiego berkeley udało skonstruować rozmiarami przypominającego karalucha a podobno dzielącego umiejętności survivalowe wynalazek opisano magazynie science robotics liwen lin twórców urządzenia podziela opinie ponadprzeciętnych zdolnościach stworzeń radzenia trudnych warunkach większość ludzi nadepnie karalucha zabić trochę przyłożyć twierdzi lin inaczej karaluch przeżyje ucieknie dodaje małe wytrzymałe według deklaracji twórców ważący mniej jedną dziesiątą grama różne wersje ważą miligramów minirobot należy niezwykle wytrzymałych urządzeń jak zademonstrowano powyższym wideo serwisie youtube potrafi wytrzymać nacisk kilogramów zauważalnego uszczerbku urządzenie wykonane cieniutkiej warstwy fluorku poliwinylidenu pokrytej elastycznym polimerem powstało efekt poszukiwań sposobów tworzenie maszyn kompaktowe rozmiary ponadprzeciętną wytrzymałością powstały karaluchobot mierzy zaledwie milimetrów długości porusza skokowo pomocą skurczy wywoływanych napięciem elektrycznym przekazywanym pośrednictwem specjalnego drutu trwają prace wersją zdolną samodzielnego wytwarzania zasilania oprócz wytrzymałości zachowaniu niewielkich rozmiarów uwagę zwraca udźwig radzi malutkie urządzenie stworzony naukowców berkeley robot problemów radzi przeniesieniem orzeszka ziemnego mniej więcej razy cięższy wśród testów został poddany karaluchobot próby prędkości elastyczności wynikło m in robotyczny owad potrafi wspinać zboczu kącie nachylenia stopnia prędkością siedmiu długości ciała sekundę niedawno zakończono proces przejęcia spółki red hat ibm a rzucono trochę powody stojące tą decyzją gigant powiększony cenioną linuksowym firmę zapowiada projekt zrewolucjonizować podejście rozwiązań chmurowych projekt red hat openshift umożliwi korzystanie różnych chmur użyciu jednego programu ci pecetów widać ibm kupił red hat spółkę szczególnie zasłużoną społeczności linuksowej powodu wygląda zasilone przedsiębiorstwo ostro bierze pracy niedawno informowaliśmy zakończeniu procesu przejęcia oficjalnie potwierdzono październiku największych transakcji dziejach branży informatycznej a dowiadujemy nieco więcej temat intencji zarządu powiększonej spółki ibm zwany big blue przeciętnego użytkownika rysuje wszystkim firma pierwszego peceta sławetny model zadebiutował z czasem model biznesowy giganta wyewoluował nieco innych kierunkach przedsiębiorstwo technologiczne powstałe stanach zjednoczonych zajmuje potężnej pozycji kilkadziesiąt wciąż apetyt solidny kawałek rynku związanego nowoczesnymi technologiami od początku mówiło nabycie red hata związek ibm dostarczane rozwiązania chmurowe pochwalić uznaniem porównywalnym microsoftowego azure a aws amazona przedmiot jednej większych transakcji dziejach it sposobem poprawienie notowań big blue zakresie jeden wszystkimi rządzić wygląda niedługo słowa zostaną zamienione czyny gigant technologiczny odpowiadający rewolucję pecetową zapowiada wprowadzenie platformy red hat openshift umożliwi klientom korzystanie dowolnej wybranej chmury użyciu jednego oprogramowania aplikacje napisane uruchomione pomocy narzędzia ibm obsłużyć wszystkich publicznych chmurach microsoft azure amazon web services google cloud platform alibaba a oczywiście ibm cloud rozwiązanie ominie chmur prywatnych jak tłumaczy arvind krishna wiceprezes przedsiębiorstwa odpowiedzialny ibm cloud cognitive software projekt firmy uniezależnia oprogramowanie centrum przetwarzania danych any przyśpieszyć migrację firm chmury takie podejście zapewnić spółce pozycję lidera rynku technologii chmury hybrydowej wygodne pakiety nowe funkcjonalności tworzone wykorzystaniu technologii cloud dostarczane postaci zintegrowanych pakietów ibm cloud paks a działanie dostarczanego oprogramowania opierać jednej platformie wspólnym zestawie usług wspomagających działanie ujednolicony interfejs prawdopodobnie przyczyni lepszej widoczności wykorzystywanych zasobów a idzie pozytywnie wpłynie intuicyjność korzystania rozwiązań chmurowych podstawę pakietów ibm cloud paks stanowić sto programów portfolio ibm zoptymalizowanych bezproblemowo działały platformie red hat openshift pięć spośród pakietów udostępniono cloud pak for applications stanowić pomoc firm m in modernizacji budowie aplikacji cloud pak for automation paczka służąca efektywnej automatyzacji procesów biznesowych cloud pak for data pomaga uprościć analizę danych cloud pak for integration skupia integracji chmurze a cloud pak for multicloud management rozwiązanie wszystkich zależy dobrych praktykach pracy chmurze hybrydowej rozwiązanie oparte technologie otwartoźródłowe red hat openshift red hat enterprise linux już niebawem największy portal społecznościowy wprowadzi restrykcyjny system reklamowy wszystkich ogłoszeń a związanych zatrudnieniem nowy system ogłoszeń pracę zostanie oddzielony strumienia wszystkich innych reklam targetowanych pracodawcy mogli przeglądać osób według wieku płci kodu pocztowego zmienić musiały algorytmy facebooka oprócz inaczej wyglądać ograniczenia prawne nowe narzędzie dostępne jaki miało wpływ przebieg rekrutacji co dokładnie zmieni szczegółów możesz dowiedzieć przeglądając kolejne wydanie hello news jak radzić nadmiernymi zwolnieniami lekarskimi pracowników polska dłuższego przekracza europejską chodzi absencję chorobową jakie rodzaje dlaczego pracownicy nadużywają l4 rodzi konflikty linii pracownik pracodawca wzbudza poczucie niesprawiedliwości sprzeciw wszystkich współpracowników dowiedz mierzyć utrzymać wysokość absencji chorobowej odpowiedniej wysokości więcej temat finansów należy kobiet mimo branża finansowa zdominowana kobiety zarządzają dlaczego nadal stanowiskach kierowniczych większy procent stanowią mężczyźni przyczyn wiele a nadal krąży przekonanie kobieta zbyt wrażliwa zarządzać strukturami organizacji trudniej przychodzi podejmowanie decyzji o roli kobiety branży opowiada magdalena bylinowicz hrk sa więcej temat marzy ci stworzenie firmy przetrwa wystarczą kroki dynamicznie rozwijająca gospodarka wysoka konkurencja sprzyjają pokonaniu barier wejścia dany rynek we współczesnym trudno tworzyć rozwijać nową własną markę co zrobić firma rozwijała skrzydła utrzymywała lata więcej temat generacja jutra rekrutować pokolenie urodziło całkowicie cyfrowym generacja z stawia wyzwania wszystkim rekruterom z wielu badań wynika doskonale wiedzą chcą pracować lubią wydawać zarobione pieniądze zmusi przyszłych hr owców wyjścia utarte schematy stereotypy maja gojtowska podaje gotowe wskazówki pracodawców więcej temat stwórz swój employee value proposition robi google nike evp unikalny zestaw pracownik otrzymuje zamian umiejętności kompetencje doświadczenie wnosi firmy polega zdefiniowaniu istoty firmy czyni wyjątkową kryje poznaj kluczowe działania pozwolą efektywną rekrutację utrzymanie pracowników pozytywnie wpływać budowanie marki siłę poznaj gotowe rozwiązania zobacz robią największe marki więcej temat jesteś specjalistą działu kadr płac rusza konferencja kadry biznesu jest idealne wydarzenie osób poszukujących prawdziwych inspiracji wiedzy doświadczenia będzie okazja wymienić wspólnymi spostrzeżeniami gronie samych specjalistów branży usłyszysz nowych rozwiązaniach a między innymi efektywnie działy kadr biznesu wyzwania polityki personalnej rozstać pracownikiem zabezpieczyć interes pracodawcy wydarzenie odbędzie października warszawie sprawdź całą listę prelegentów czego możesz nauczyć więcej temat współpraca działów hr marketingu fundament sukcesu niestety zauważa dużej części przedsiębiorstw poszczególne działy zamiast współpracować rywalizują sobą czy zdrowe organizacji odpowiedź wydaje oczywista dlaczego wciąż brakuje dobrej komunikacji sił niektórzy twierdzą kluczowym aspektem warunkującym zdrową organizację współpraca działu hr marketingu dlaczego zacząć owocne relacje więcej temat pracowniczy plan kapitałowy kluczowe wyzwania podczas wdrażania ppk obejmuje największych pracodawców polsce lipca jedną największych kadr pracowniczych polskim rynku posiadają agencje pracy tymczasowej chociaż duża rotacja pracowników powszechna naturalna wdrażaniu obsłudze ppk stwarza ogrom dodatkowej pracy jak sprostać wyzwaniom więcej temat facebook ogłoszenia pracę finalne zmiany już niebawem największy portal społecznościowy wprowadzi restrykcyjny system reklamowy wszystkich ogłoszeń a związanych zatrudnieniem nowy system ogłoszeń pracę zostanie oddzielony strumienia wszystkich innych reklam targetowanych oprócz zmienią ograniczenia prawne jaki miało wpływ przebieg rekrutacji więcej temat zfśs wolno a czego zmieniły przepisy kodeksu pracy ustawie zfśs jest burzliwy temat hr owców menedżerów w związku rozporządzeniem parlamentu europejskiego rady ue maja weszła ustawa zapewnia stosowanie przepisów rodo poznaj nowy zakres danych osobowych jakich pracodawca potencjalnego pracownika przebiegu procesu rekrutacyjnego więcej temat w szybko rozwijającym pracy pojawiające technologie wydają błogosławieństwem przekleństwem błogosławieństwem usprawniają procesy przekleństwem wymagają przyjęcia całej firmie pozyskanie wsparcia strony pracowników wyzwaniem samym co liderzy powinni rozważyć wdrożeniem nowego systemu zarządzania talentami co zrobić zespoły hr wdrożenie zakończyło sukcesem jaka twoja tajna broń pozyskiwania talentów organizacji spadek stopy bezrobocia spowodował rynek pracy przesunął korzyść osób kandydujących teraz specjaliści liderzy działu hr muszą wykazywać dużą kreatywnością metodach pozyskiwania pracowników wykorzystywane przeróżne sztuczki wyszukiwarkami czym sourcing reddit jak wykorzystywać rodzaj serwisów społecznościowych na pytania odpowiada erin mathew specjalistka ds pozyskiwania talentów blogerka specjalistka ds rekrutacji więcej temat inteligentna automatyzacja możesz zwiększyć efektywność działań działu hr hr wolniej przyjmuje podejście oparte danych części biznesu częściowo tradycyjnie dyscyplina dotycząca empatii a faktów jednakże strategiczne decyzje dotyczące pracowników kierowane raczej serią dyskusji jakąkolwiek formą danych mieć wpływ naturalne uprzedzenia heurystykę robotyka inteligentna automatyka należą największych motorów nowej przyszłości pracy dowiedz wykorzystać szeroko pojętej dziedzinie hr więcej temat jak powinieneś przechowywać dane osobowe działy hr wypełnione przeróżnymi danymi pracowników kandydatów sprzedawców obecnych dawnych przyszłych dlatego powinny posiadać swoją własną politykę zakresie opracować odpowiednie podejście marketingowe o czym należy pamiętać zwrócić szczególną uwagę jakich zasad przestrzegać poznaj kilka prostych reguł dzięki unikniesz niepotrzebnego ryzyka więcej temat learning management system zwiększyć akceptację użytkowników trakcie wdrożeniu w szybko rozwijającym pracy pojawiające technologie wydają błogosławieństwem przekleństwem błogosławieństwem usprawniają procesy przekleństwem wymagają przyjęcia całej firmie co liderzy hr powinni rozważyć wdrożeniem nowego systemu zarządzania talentami więcej temat kim pracownik przyszłości dynamicznie rozwijająca technologia zwiastuje czwartą rewolucję przemysłową z powodu niewątpliwie zmieni miejsce forma charakter pracy pracowników a samym zmienią oczekiwania dotyczące cech kompetencji zawodach przyszłości ile obecnie wykonywanych zawodów zniknie co kryje kompetencjami przyszłości jak zmieni rynek definicja pracy więcej temat spadek zasobów siły roboczej oznacza polskiej gospodarki z powodu spadku siły roboczej przestrzeni ostatnich twierdziło niemożliwe utrzymanie potencjału rozwojowego gospodarki polsce jednak według nbp problemów rynku pracy rośnie efektywność firm jakie dalsze prognozy więcej temat multitasking wróg przyjaciel efektywności na przestrzeni wielozadaniowość zdobyła wielu sympatyków nadal cieszy dużą popularnością jednak podnosi produktywność naszych działań okazuje multitasking czasochłonny niekorzystnie wpływa pracę umysłu według badań wielozadaniowość pochłania więcej czasu skupiona praca jedną rzeczą chcesz zwiększyć efektywność swojej pracy poznaj eksperckich rad według matthew jenkina więcej temat fun at work podnosi jakość pracy raport międzynarodowy krajobraz radości pracy dowodzi radość pracy znaczenie badanie zostało przeprowadzone krajach europy chinach atrakcyjne zarobki wymieniane dopiero czwarta pozycja co naprawdę motywuje zwiększa efektywność pracy więcej temat work life balance znaczenie współczesnych organizacji wielu pracowników zadaje pytanie pogodzić bycie rodzicem karierą zawodową okazuje obecnie kluczowym czynnikiem wyborze nowej pracy elastyczność kryterium ważniejsze wysokość wynagrodzenia work life balance ważnym aspektem matek ojców firmy postawią politykę prorodzinną wygrać walkę niejeden talent dowiedz benefity oferują przedsiębiorstwa pozyskać cennych pracowników więcej temat dlaczego kandydaci przychodzą spotkania rekrutacyjne często spotyka sytuacje potencjalni pracownicy przychodzą pierwszy etap rekrutacji według badań prawie połowa kandydatów uprzedza swojej rezygnacji dlaczego pojawia problem jak zaradzić poznaj przyczyny zastosuj kilka cennych porad usprawnią cały proces komunikacji między stronami więcej temat technologie znane dotąd filmów science fiction niedługo staną rzeczywistością chińsko amerykański zespół naukowców zdołał opracować soczewki kontaktowe wyposażone zoom optyczny aby błyskawicznie uruchomić rewolucyjną funkcjonalność wystarczy dwukrotne mrugnięcie okiem wynalazek znaleźć szerokie zastosowanie m in medycynie całkiem soczewki soczewki optyczne wynalazek wszystkich aktywny tryb uniemożliwia utrudnia noszenie okularów korekcyjnych coraz częściej używane względów estetycznych już niedługo masowej dystrybucji pojawić model wyposażony nieoczywistą funkcję elektroniczny zoom optyczny pracuje chińsko amerykański zespół naukowców uniwersytetu kalifornijskiego harbin institute of technology odkrycie opublikowano czasopisma naukowego advanced functional materials miękkie polimery nowatorskie soczewki korzystają techniki używanej produkcji miękkich robotów stworzono materiałów zdolnych odkształcania a samym dostosowywania warunków otoczenia w opisywanym przypadku nieocenione okazało wykorzystanie elektroaktywnych folii polimerowych umieszczonych pomiędzy dwiema elektrodami specjalnie przygotowana miękka folia ulega rozszerzeniu wpływem napięcia elektrycznego wytworzonego wyniku różnicy potencjałów powstającej między rogówką a dnem oka podczas wykonywania ruchu gałek ocznych oznacza własne ciała zdolne zasilania soczewek pomocą wytwarzanych organizmie sygnałów elektrookulograficznych eog obiecujące testy naukowcy tyle opanowali specyficzne zasady dotyczące niezwykle delikatnej materii jaką gałka oczna udało dostroić urządzenie pozwalający przybliżanie oddalanie obrazu pomocą szybkiego podwójnego mrugnięcia okiem wyniki pierwszych eksperymentów należy uznać obiecujące a przecież dopiero początek już okazuje specjalnie przygotowana soczewka praktycznie natychmiastowo reaguje polecenie wydane użytkownika podwójnym mrugnięciem najnowsze optyczne odkrycie znaleźć zastosowanie wszelkich protezach wzroku być szykuje współpraca neuralink jednej firm elona muska zapowiedziała przyszłym przeprowadzi absolutnie nowatorską operację wszczepiania elektrod mózgu sparaliżowanej osobie niewykluczone zastosowanie wynalazku celów militarnych montowanie soczewek robotów a dopuszczenie produktu użytku komercyjnego zdrowych osób podobnie lepiej podobny pomysł oparty nieco innej zasadzie pojawił już międzynarodowy zespół naukowców stworzył soczewki kontaktowe zdolne powiększenia obrazu poprzez mruganie oczyma wówczas specjaliści optyki wyposażyli soczewkę specjalny zestaw pierścieni przesuwając względem siebie powodowały odbijanie pozwalał przybliżenie obrazu cały proces bardziej skomplikowany proponowany zespół obejmujący m in naukowców uniwersytetu kalifornijskiego na dodatek system wymagał korzystania dedykowanych okularów zadaniem wykrywanie mrugnięć tamte soczewki okazały zbyt grube uznać naprawdę udany wynalazek ponadto zewnętrzny pierścień wytworzony wyniku powiększenia obrazu zasłaniał część pola widzenia użytkownika negatywnie wpływało jakość obrazu unikalności odcisków palców budowy tęczówki społeczeństwie wysoka mało zdaje sprawę niepowtarzalności podpisu generowanego bicie naszych serc wiedzę powodzeniem zaczęli wykorzystywać naukowcy pracujący pentagonu niedawno powstał laser pozwala rozpoznawanie konkretnych ludzi odległości metrów a dopiero początek pracy urządzeniem oryginalny podpis nasze serca różnią między sobą wykazują pewne różnice budowie wszystkim biją identyczny podobnie odcisk palca budowa tęczówki swoisty podpis kardiologiczny używany rozróżnienia między sobą a przeciwieństwie obu wymienionych parametrów mieć zastosowanie dużej odległości szybko zauważyli naukowcy pracujący amerykańskiej armii techniki dalekosiężne dalekosiężne techniki biometryczne dawna znajdują polu zainteresowania pentagonu można wymienić chociażby analizę chodu metodę pozwalającą wychwycenie ruchu identyfikację konkretnej osoby poprzez rozpoznanie charakterystycznych cech chodu to technika używana szczególnie ramach rekonesansu poprzedzającego decyzję przypuszczeniu ataku dokonywanego samoloty bezzałogowe okazuje style chodu samo twarze mniej unikalne mogłoby wydawać to zgoła inaczej przypadku podpisu stworzonego podstawie aktywności serca nie istnieją identyczne podpisy kardiologiczne zmienić ukryć zbawienna podczerwień kontaktowe czujniki podczerwieni używane automatycznego wywoływanego pomiaru tętna pacjenta ich działanie opiera wykrywaniu zmian sposobie odbijania promieni podczerwonych naczyniach krwionośnych zachodzą reakcji przepływ krwi to dobrodziejstwo używane popularniejszych urządzeniach naręcznych fitness smartwatche smartbandy amerykańska armia poszła krok dalej laser korzystający możliwości podczerwieni wykrywa unikalny podpis serca odległości metrów najnowsze cudo techniki zostało ochrzczone jetson niewykluczone niedalekiej przyszłości uda skonstruować większy laser dysponował lepszymi parametrami nie chcę powiedzieć mógłbyś zrobić kosmosu steward remaly biura wsparcia technicznego ds walki terroryzmem pentagonie pentagon s combatting terrorism technical support office dłuższe odległości powinny możliwe niedoskonałe rozpoznawanie twarzy do pory najczęściej używanym sposobem dokonanie zdalnej identyfikacji biometrycznej technologia rozpoznawania twarzy osiągnięcia dziedzinie całkiem znaczne wciąż nieco mało potrzeby wymaga dobrego niezakłóconego czołowego widoku twarzy obiektu warunkach bojowych znacznie utrudnione dzisiejsze algorytmy stosunkowo da zmylić poprzez brody okulary nakrycia głowy według słów samego zainteresowanego teamowi remaly ego udało stworzyć rozwiązanie pozwalające procentową skuteczność własnym zastrzeżeniu mowa dobrych warunkach nadal poprawiana wiele wskazuje jetson używany połączeniu innymi technikami facial recognition osiągnięcia lepszego efektu kiepska passa facebooka trwa opracowywana zespół kryptowaluta zapowiadana rok cieszy dużym zainteresowaniem pozytywne motywom stojącym powstaniem nowego internetowego pieniądza przyglądają członkowie specjalnej amerykańskiej komisji a alexander lipton profesor massachusetts institute of technology wprost zarzuca markowi zuckerbergowi plagiat więcej inspiracja libra kryptowaluta opracowywana zespół facebooka zdążyła zadebiutować a przedmiotem wielu kontrowersji profesor matematyki massachusetts institute of technology mit twierdzi firma kierowana marka zuckerberga skopiowała pomysł wirtualny pieniądz użyła opisania własnego produktu na dodatek naukowiec wyraża oburzenie powodu nieumieszczenia nazwiska planie biznesowym nowej kryptowaluty alexander lipton thomas hardjono alexander pentland znane nazwiska nauk zagadnień związanych technologią blockchain wiedza doświadczenie naukowców zaowocowało wspólną pracą pt towards an interoperability architecture for blockchain autonomous systems opisano pomysł nieistniejącą kryptowalutę nazwie tradecoin lipton zapoznaniu opisem libry stwierdził znacznej części oparta pomysły współpracowników nie będąc szczególnie nieprzyjemnym mogę powiedzieć rzeczywista struktura libry całkowicie zaczerpnięta artykułu zeszłym opublikowaliśmy razem sandym pentlandem thomasem hardjono przekazał serwisowi coindesk lipton zdaniem naukowca uderzających podobieństw polega zaproponowaniu zespół facebooka stworzenia organizacji libra association złudzenia przypomina koncepcję dotyczącą powołania konsorcjum mającego zarządzać hipotetycznym tradecoinem podobny pomysł utrzymanie odpowiedniej wartości porównywanych internetowych walut w obu wypadkach miałoby chodzić powiązanie aktywami przykład paliwami uprawami nieodpowiedzialne działania ale koniec zarzutów wobec zespołu facebooka oburzony lipton zarzuca osobom odpowiedzialnym librę nieodpowiedzialność twierdzi wprowadzenie kryptowaluty takim kształcie proponują twórcy przyczynić zaistnienia państwach rozwijających hiperinflacji gwałtownego wzrostu cen produktów usług zdaniem naukowca stanie względu pośrednie zwiększenie ilości pieniądza gospodarkach gotowe niebezpieczną konsekwencją takiego stanu rzeczy okazać spadek wartości tradycyjnych walut to czynników którymi teoretycznie miałaby zajmować libra association zdaniem profesora mit niezależnie deklaracji chęci twórców wprowadzenie libry przyczyni osłabienia lokalnego pieniądza a mieć poważne konsekwencje liczne problemy facebooka chcący wprowadzić nową kryptowalutę facebook liczyć gospodarkami państw rozwijających nie zaskoczeniem problemy pojawić ojczyźnie giganta technologicznego stanach zjednoczonych od czasów afery cambridge analytica opowiada film hakowanie niedawno premierę netfliksie serwis marka zuckerberga dobrej passy przesłuchanie specjalną komisją amerykańskim parlamencie davida a marcusa pracownika facebooka odpowiedzialnego nowy projekt obfitowało pytania sugerujące istnieje podejrzenie libra zagrozić pozycji amerykańskiego pieniądza nowa kryptowaluta mieć premierę zgodnie zapowiedziami pisaliśmy koniec maja do czasu pozostaje obserwować firma kierowana marka zuckerberga radzi różnymi kontrowersjami dotyczącymi projektu a innych działań co przygotowaliśmy razem frontendowców zainteresuje relacja ciekawej konferencji odbyła wilnie backendowcy dowiedzą nieco temat migracji danych a wszyscy zainteresowani wpływem technologii ludzkie poczytają wielkich wyciekach danych usa bułgarii dowiedzą warta prywatność według google a frontend framer motion biblioteka napędzająca animacje framerze ciekawym narzędziu interaktywnego designu od niedawna dostępna samodzielna paczka którą używać aplikacjach react poznaj zalety zrób pierwszy setup więcej temat abstrakcje polegają ograniczeniu cech obiektów absolutnie kluczowych bywają pomocne czasami zwieść najbardziej doświadczonego developera dowiedz niespodziewane sytuacje czekać ciebie a okazji autor tekstu woli angular reacta więcej temat jeśli dopiero zaczynasz swoją przygodę reactem dobrym pomysłem zapoznanie tutorialem dowiesz m in wygląda identyfikacja stanu poznasz higher order components wcale komponentami więcej temat odkąd przedstawiono api react hooks sporo osób zastanawia hooks szansę zastąpić redux dowiedz temat sądzi eric elliott entuzjastą zarówno react redux więcej temat w maju wilnie odbyła dwudniowa konferencja you gotta love frontend prelegenci postarali odpowiedzieć klasyczne pytania kim jesteśmy skąd przychodzimy dokąd zmierzamy relacja wydarzenia zawiera sporo ciekawostek wspomina m in projektowaniu strony najgorszego hotelu amsterdamie więcej temat backend jak wynika badania jetbrains python developers survey django flask najpopularniejsze webowe frameworki pythonie popularność flaska dziwi kontekście zrozumiałego trendu polegającego skłanianiu niewielkim frameworkom mikroserwisom platformom typu serverless poniższy tekst pozwoli zdecydować framework lepiej odpowie potrzeby związane konkretnymi zadaniami więcej temat migracja danych zagadnienie sporą część developerów napawa lękiem przy odpowiednim podejściu względnie bezbolesny proces w poniższym tekście piotr czech konsultant firmie vlog opisuje migrację systemów opartych net punktu widzenia biznesu technologii więcej temat nikogo przekonywać dobie popularyzujących zagadnień sfery big data data science odpowiednie podejście analityki wizualizacji danych staje ważniejsze poznaj najlepszych kursów online dotyczących obsługi tableau ciekawego narzędzia wizualizacji więcej temat django rest framework oferuje funkcjonalność wyszukiwania nietypowa poniższy tutorial dokładnie opisuje kroki należy odtworzyć móc pełni cieszyć więcej temat java ee security nowych api java ee java ee przechodzi rebranding niedługo nazywało jakarta ee a api jakarta security to część payara platform wymaga specjalnej konfiguracji użycia przystępnym efektywnym rozwiązaniem więcej temat inne facebook zapłacić miliardów kary a ponadto wprowadzić zmiany podejściu prywatności użytkowników wynika orzeczenia amerykańskiej federalnej komisji handlu ftc to finał dochodzenia sprawie niewłaściwego wykorzystywania danych użytkowników więcej temat bułgarskie media ogłosiły sensacyjną wiadomość anonimowy haker pochwalił kradzieżą wrażliwych danych niemal wszystkich obywateli kraju zatrzymano podejrzewanego czyn letniego kristiana bojkowa zawodowo związany cyberbezpieczeństwem pobudki kierujące jasne więcej temat alibaba com potentat sektorze sprzedaży b2b otwiera amerykańskiego klienta można potraktować wyzwanie rzucone rodzimej potędze e commerce amazonowi alibaba wchodzi skład powołanego holdingu częścią aliexpress więcej temat dwa lata miejsce większych wycieków danych historii stanów zjednoczonych w wyniku poważnych zaniedbań niepowołane ręce trafiły dane prawie milionów klientów firmy equifax fatalne zaniedbanie kosztować przedsiębiorstwo milionów dolarów więcej temat najnowszy pomysł google a najpewniej związany zbliżającą premierą nowych smartfonów linii pixel pięciodolarowa opłata zachęcać przechodniów użyczania wizerunku zebrane dane przyczynić rozwoju konkurencji face id więcej temat dane samych każdego dnia udostępniamy internecie olbrzymią wartość nikt lepiej google najnowszy pomysł giganta technologicznego pięciodolarowa opłata zgodę wykorzystanie wizerunku od pewnego czasu wiadomo ekipa mountain view szykuje system rozpoznawania twarzy konkurencją face id wyścig apple em od dłuższego czasu wiemy google zamierza rywalizować apple em opracować własną technologię rozpoznawania twarzy miała szansę zmierzyć face id w celu zostaną wykorzystane wizerunki ludzi spotykanych ulicy każdy ochotnik zgodzi zrobienie specjalnej fotografii otrzyma dolarów nigdy końca wiemy zostaną wykorzystane informacje wynikające materiałów udostępnianych sieci społeczeństwo natomiast większą dużej wartości pozyskanej wiedzy jednak uiszczanie bezpośredniej opłaty dane oryginalny niespotykany pomysł a wysokość budzi wielu twarzach uśmieszek politowania nie znaczenia recepcji akcji fakt debiutuje czasie odświeżonej popularności aplikacji faceapp budzi liczne kontrowersje związane m in uprawnieniami udzielanymi użytkownika pochodzeniem software nowe pixele niedługo akcja pozwala przypuszczać prace google owym odpowiednikiem face id zaawansowane jak wiadomo między innymi dzięki udostępnieniu producenta częściowej specyfikacji sprzętu niedługo możemy spodziewać premiery nowych smartfonów rodziny pixel tradycja utrzyma modele założyć jedną głównych popisowych funkcji nowych flagowców google a zaawansowana technologia rozpoznawania twarzy zdaje interesujące wycięcie prawym górnym rogu zaprezentowanych smartfonów mieć wspólnego nową funkcją lepsze rozpoznanie akcja polegająca zachęcaniu przechodniów użyczania wizerunków prowadzona pracowników giganta mountain view miastach nowym jorku podobno sporo napotkanych osób chętnych udostępnienie swoich zdjęć celu ulepszania nowej generacji technologii odblokowywania smartfona pośrednictwem twarzy obecne rozpoznawanie twarzy urządzeniach systemem android należy postrzegać raczej kategorii ciekawostki rzeczywistego zabezpieczenia niepowołanym dostępem smartfona użytecznego narzędzia przykład apple a pokazał typu rozwiązania przyszłość oferowały wystarczającą precyzję dane cenie kawy operacja polegająca fotografowaniu własnej twarzy różnych perspektyw trwa kilka minut w zamian ochotnik otrzymuje voucher wartości dolarów umożliwiający zakupy sieciach starbucks amazon co ciekawe udostępniono możliwości zapłaty usługi google play kwota oferowana google pewnych osób budzić rozbawienie z drugiej strony docenienie zasługuje szczery komunikat wysyłany technologicznego giganta google zdaje końcu przyznawać wprost twoje dane towar a towar swoją cenę poza zdjęcia wielu lądują internecie a uczestnictwo programie google a trwa krócej niejedna sesja selfie zaowocować najwyżej wypłatą najpopularniejszej wirtualnej walucie lajkach zakończono sprawie wycieku danych serwerów firmy equifax amerykańskie przedsiębiorstwo dopuściło nielegalnego przechwycenia informacji dotyczących prawie milionów klientów konsekwencje zaniedbania dotkliwe suma grzywien roszczeń klientów osiągnąć wysokość milionów dolarów nawet połowa amerykanów zagrożona to prawie lata odkąd osób korzystających usług amerykańskiego przedsiębiorstwa equifax dotarły złe wiadomości to okazało klienci firmy zajmującej analizą kredytową doradztwem poważne powody niepokoju doszło ogromnego wycieku związku niepowołane ręce mogły trafić dane połowy amerykanów obecnie przeprowadzonym wiemy wysokość kary którą narażony equifax wynosić milionów dolarów dokładna kwota znana powodów ogromny wyciek imiona nazwiska adresy numery polis ubezpieczeniowych a wypadku części osób numery kart kredytowych zbiór kompletów informacji wyciekł sprawą niewłaściwego zabezpieczenia danych przechowywanych equifax o groźne konsekwencje przechwycenia typu danych przekonywać nikogo to większych wycieków wrażliwych danych stanach zjednoczonych a idzie niechlubny rekord należy firmy yahoo padła ofiarą dwóch ataków wyniku hakerzy uzyskali dostęp danych niemal miliarda klientów o ataku serwery amerykańskiej firmy opinia publiczna dowiedziała wrześniu prezes equifaxu przyznał cyberprzestępcy uzyskali dostęp danych milionów obywateli usa niedługo potem okazało liczba wzrosła niemal milionów to olbrzymia skala szczególnie biorąc uwagę jedną gałęzi działalności biura informacji gospodarczej doradztwo zakresie bezpieczeństwa danych nie dziwi zatem opisywana sytuacja poskutkowała nagłym uszczupleniem kadry przedsiębiorstwa prezes firmy złożył wypowiedzenie a dyrektorów działów został skazany cztery miesiące więzienia udowodniono sprzedawał akcje equifax chwilę oficjalnym ujawnieniem gigantycznego wycieku fatalne zaniedbanie wykazało przyczyną powstania groźnej podatności brak aktualizacji oprogramowania wcześniej wykryto niebezpieczne luki przestępcy dysponowali nieuprawnionym dostępem danych trzy miesiące equifax ogłosił gromadzone dane wyciekły wyniku błędu platformie apache struts firmie zarzucano nieudolne szyfrowanie danych stosowanie nieskutecznych mechanizmów wykrywania naruszeń według raportu amerykańskich instytucji badających sprawę groźnej sytuacji zapobiec podjęto odpowiednich działań mowa poważnym zaniechaniu wiąże odpowiednio dotkliwą karą przedsiębiorstwa w myśl postanowień ugody zawartej pomiędzy firmą a amerykańskimi agencjami rządowymi poszczególnymi stanami stan posiada samodzielną osobowość prawną equifax zasilić kwotą milionów dolarów specjalny fundusz prześledzi historie kredytowe klientów firmy zastrzeżeniu kwota okaże niewystarczająca uiścić obowiązkową dopłatę wysokości milionów dolarów kolejne milionów przedsiębiorstwo przeznaczy pokrycie kosztów sądowych a dodatkowe milionów dolarów zasądzona wpłata rzecz biura ochrony finansowej konsumentów kara stanowi zatem sumę wartości adekwatnych grzywien roszczeń klientów najpewniej byłych firmy obywatele musieli uzyskać specjalną zgodę sądu móc wnieść roszczenia do składania wniosków upoważnieni klienci wcześniej wykupili usługę monitorowania kredytów anonimowy haker chwalił wykradzeniem wrażliwych danych niemal wszystkich obywateli bułgarii próbki przechwyconych informacji wysyłał różnych redakcji instytucji kpiąc publicznych systemów informatycznych zatrzymany letni kristian bojkow pracownik amerykańskiej firmy zajmującej cyberbezpieczeństwem przyznaje winy wcześniej wskazywał słabości krajowych zabezpieczeń niemal wszyscy obywatele bułgarska policja zatrzymała letniego kristiana bojkowa któremu prawdopodobnie udało ukraść dane niemal wszystkich obywateli bułgarii informacje dotyczyły zarobków zaciągniętych kredytów kwot zapłaconych podatków a miejsca zamieszkania pracy dane milionów bułgarów według spisu populacja kraju wynosiła nieco milionów mieszkańców znalazły rękach przestępcy wyniku włamania systemu informatycznego krajowego urzędu skarbowego odpowiedzialnym wyciek hakerem okazał letni bułgar zatrudniony tad group amerykańskiej firmie zajmującej cyberbezpieczeństwem przechwałki hakera sprawa mogłaby wyjść jaw oryginalna wiadomość wysłana samego bojkowa mail wysłany rosyjskiego adresu skrzynki różnych redakcji organizacji obywatelskich określał stan zabezpieczeń bułgarskich systemów informatycznych parodię trudno zgodzić sprawcą ataku technik użytych pozyskania danych nazwać wyrafinowanymi do wiadomości nadawca dołączał próbki danych bułgarskich podatników wykradzionych narodowej agencji ds dochodów nap administratorowi systemu autor e maili twierdził skopiował całą zawartość systemu komputerowego wykorzystaniu luki elektronicznym formularzu służącym składania wniosków zwrot podatku vat dane przesłane tygodnika kapitał podzielono folderów całkowita waga plików gb niejasne pobudki część obserwatorów miała nadzieję bułgar zatrudniony firmę zajmującą cyberbezpieczeństwem działał nagannych pobudek wiele wskazuje dobrych zamiarów na obronę bojkowa przytoczyć treść licznych wypowiedzi sygnalizujących poważne braki krajowym systemie zabezpieczeń adwokat zadecydował przyjęciu innej linii obrony pełnomocnik oskarżonego utrzymywał klient brał udziału ataku oskarżano dowody jasno wskazują sprawstwo bojkowa trudno podejrzewać szlachetne pobudki trudno wnikać motywacje wykluczyć zdecydowania popełnienie przestępstwa chęci zarobku wartość szczegółowych danych czarnym rynku milionów złotych to największy wyciek historii kraju premier bojko borysow nazwał hakera czarodziejem stwierdził państwo powinno niezwykłe umysły zatrudniać działały rzecz a przeciw podatności duży problem kiepskie zabezpieczenia publicznych systemów informatycznych duży problem bułgarii połączenie przestarzałych rozwiązań ogromną ilością przechowywanych informacji zaowocować dużym niebezpieczeństwem obywateli często naprawdę niewiele ogromne ilości wrażliwych danych znalazły niepowołanych rękach pod koniec kwietnia pisaliśmy aplikacji tchap francuskim rządowym komunikatorze szyfrowanym według zapowiedzi lepszy whatsappa telegrama narzędzie miało zapewnić treść poufnych prowadzonych internet rozmów między pracownikami administracji państwowej ministerstw zostanie wykorzystana niepożądany elliot alderson francuski ekspert cyberbezpieczeństwa dzień oficjalnej premierze programu stanie złamać zabezpieczenia przeglądać rozmowy urzędników wall street journal donosi apple plany wobec działu intela odpowiadającego modemy podobno gigant gotowy zapłacić miliard dolarów sytuacja ciekawa względu wcześniejsze relacje między apple qualcommem apple intelem rozstrzygnięcia możemy spodziewać niedługo wykupienie działu między apple a intelem trwają rozmowy dotyczące wykupienia ważnego działu drugiej firm mówi stole leży miliard dolarów gigantowi cupertino zależy przyspieszeniu prac modemem intel dział praca została zawieszona kwietniu związku wstrzymaniem dostaw apple doszło wyniku niedostarczenia modemów obsługujących technologię mobilną piątej generacji odpowiednim terminie wszystko wskazywało międzyczasie doszło porozumienia między firmą cupertino a amerykańskim dostawcą procesorów qualcommem okazuje drodze musiało zdarzyć sprawiło firma kierowana tima cooka postanowiła zdecydować rozwiązanie apple vs qualcomm zresztą relacje między qualcommem a apple burzliwe firmy stronami długiego poważnego konfliktu prawnego dotyczącego opłat licencyjnych dostawca procesorów siedzibą san diego zwrócił firmy założonej steve a jobsa prośbą uiszczenie odpowiednich kwot związku wykorzystywaniem dostarczanej technologii apple zakwestionowało zasadność roszczeń sprawa zakończyła sądzie w wyniku zawartego porozumienia firma logo kształcie jabłka została zobowiązana wypłacenia nieznanej sumy rzecz powoda niedługo rozstrzygnięcie zgodnie informacjami uzyskanymi dziennik the wall street journal rozmowy między amerykańskimi gigantami technologicznymi zaawansowanym etapie tyle oficjalnej informacji przejęciu spodziewać tygodniu konkretne decyzje dotyczące odkupienia działu odpowiadającego modemy zapadły mówi wyniku transakcji apple uzyskać własność odpowiednie patenty a zatrzymać pewną część najlepszych pracowników intela pozwol toi całkowite uniezależnienie qualcomma któremu producenci iphone zapewne szybko zapomną pozywania naruszenie własności intelektualnej ciekawa przyszłość taki ruch tyle ciekawy wcześniej intel wywiązał zobowiązań wobec apple a następstwie całkowicie zawiesił pracę działu odpowiedzialnego projekt jeśli rzeczywiście dojdzie porozumienia apple stanie spadkobiercą technologii intela niedawno stanie dostarczyć odpowiedniego rozwiązania wyznaczonym czasie odpowiednio pokierowany dział mógłby przynieść firmie niebotyczne zyski dodatkowo zbędne okazałoby inwestowanie samodzielny rozwój układów scalonych niedawno zatrudniono osób byłych pracowników intela zdaje korzystne rozwiązanie obu stron kupi niemal gotowe rozwiązanie a druga pozbędzie części działalności ostatnim czasie nierentowna fani iphone otrzymają modemów tegorocznych edycjach ulubionych urządzeń na obsługę technologii mobilnej piątej generacji poczekać premiery przyszłorocznych smartfonów napędzanych systemem ios niedługo później nowoczesne rozwiązanie zadebiutuje ipadach hr lipca godzina utc po wielu trudach pajęcze nogi modułu księżycowego końcu osadzają szaro grafitowej powierzchni księżyca w powietrze wzbija pył wszystko dookoła spowite czarną niemalże aksamitną pustką w oddali widnieje ziemia wydaje taka bezbronna delikatna to mały krok człowieka wielki krok ludzkości historyczne słowa wypowiedziane neil a armstronga momencie postawienia pierwszych kroków księżycu zna chyba wydarzenie zainspirowało opracowania wielu reportaży filmów powieści rozpoczęło nową erę historii ludzkości na pierwszym planie reguły załoga apollo neil armstrong buzz aldrin michael collins w artykule przedstawimy niepopularną historię projektu wysłał pierwszego człowieka powierzchnię księżyca historię zrewolucjonizowała oblicze programowania program apollo program apollo sięga maja john f kennedy przemówił kongresu stanów zjednoczonych potrzebie stworzenia programu kosmicznego wysłałby pierwszego amerykanina powierzchnię księżyca przedsięwzięcie okazało kluczowe podniesienia amerykańskich morale wielokrotnych porażkach odniesionych usa ciągu ostatnich kilkunastu do tamtej pory zsrr zdążyło wysłać kosmos pierwsze zwierzę najpierw mężczyznę a później kobietę odbyć pierwszy spacer przestrzeni kosmicznej ponadto wizerunek stanów zjednoczonych międzynarodowej potęgi został dodatkowo nadszarpnięty nieudanej próbie inwazji zatoce kubańskich emigrantów wsparciem amerykańskich najemników program apollo stanowił zatem idealną okazję udowodnienie ekonomicznej politycznej wyższości stanów zjednoczonych związkiem radzieckim odzyskaniem międzynarodowej reputacji do projekt apollo pozostaje największych najdroższych przedsięwzięć historii ludzkości pracowało ludzi spośród wielkiego tłumu pracowników jedną kluczowych osób okazała margaret hamilton na zdjęciu margaret hamilton margaret hamilton matka inżynierii oprogramowania gdy nasa rozpoczęło pracę projektem apollo margaret hamilton pracowała programista mit dziś znana matka inżynierii oprogramowania zanim skrzyżowały nasa margaret ukończyła licencjat matematyki filozofii earlham college a następnie uczyła liceum dopiero mąż podjął decyzję studiowaniu prawa harvardzie margaret rozpoczęła pracę mit utrzymać rodzinę to lincoln laboratory pracowała ojca teorii chaosu edwarda lorenza pierwszy zetknęła komputerami pisaniem oprogramowania w międzyczasie instrumentation laboratory szukało ludzi stworzyliby oprogramowanie potrzebne wysłania człowieka księżyc margaret pierwszą programistką dołączyła zespołu a pierwszą kobietą którą zatrudniono instytucji poprowadziła zespół stojący zbudowanie oprogramowanie pokładów lotów apollo problemy oprogramowaniem margaret musiała zmagać wieloma uprzedzeniami skierowane pracy oprogramowania uważano oddzielną dyscyplinę inżynierii to margaret zaczęła pierwszy używać określenia nadziei zmieni inni inżynierowie a nasa podchodzili pracy lekceważenie programowania inżynierii miało poważne konsekwencje apollo jeszcze lotem margaret przyprowadziła pracy swoją córkę laurel bawiła astronautę margaret przeprowadzała symulację lotu w trakcie zabawy poprzez wybranie przedstartowego programu laurel przypadkowo wymazała wszystkie dane nawigacyjne miały zadanie zabrać księżyc w momencie margaret uświadomiła sytuacja mogłoby mieć miejsce przypadku prawdziwego lotu próbowała zasugerować zmianę oprogramowaniu zapobiec nasa stwierdziło astronauci zbyt wyszkoleni czegoś takiego doszło zgadnijmy miało miejsce podczas najbliższego lotu apollo astronauta zrobił przypadek dokładnie córka margaret dopiero incydencie pozwolono końcu margaret wprowadzić należyte zmiany apollo komputer pokładowy apollo ang apollo guidance computer stanowił najważniejszy komponent całej misji jego oprogramowanie musiało niezawodne zmieścić danym sprzęcie komputerowym a stanie wykryć błąd uporać każdym momencie tuż lądowaniem księżycu włączyły alarmy numer zakomunikowały komputer przeładowany nikt znał powodu powiadomień po powrocie apollo ziemię okazało alarmy zostały spowodowane bugami oprogramowaniu było odwrotnie oprogramowanie informowało problemie sprzętem rekompensowało poprzez priorytetyzowanie zadań okazało zatem kluczowe sukcesu wszystkich misji pośredniczyło między astronautami a maszyną obsługiwało dane różnych czujników a integrowało wszelkie komponenty statku podsumowując program apollo przełomowym wydarzeniem kulturowym politycznym stanowił wielki krok rozwoju technologii którą znamy zapoczątkował proces mający celu zmniejszyć rozmiar komputerów tamtej pory zajmowały całe pomieszczenia dał początek priorytetyzacji zadań miejsce niemalże każdym komputerze kiedy myślimy skali przedsięwzięcia jakim program apollo zmienił historię ludzkości dziw pomyśleć dzisiejsze smartfony więcej mocy komputery nasa zdjęcia nasa artykułu theatlantic com medium com computerweekly com autorką tekstu zuzanna filipiuk co przygotowaliśmy ramach najnowszej prasówki technologicznej frontendowców zacięciem ui ux owym zainteresuje opracowanie tłumaczące związane zagadnieniami krok kroku backendowcy mieli okazję porównać javę pythona a podszkolić oba języki a wszystkich zainteresowanych technologią pewnie ucieszy fakt roboty boston dynamics końcu trafiają rynek frontend jeśli chcesz poszerzyć swoją wiedzę związaną szeroko rozumianym frontendem zagadnieniami związanymi user interface user experience zainteresować cię opracowanie więcej temat zastanawiasz czasami lepiej użyć react redux tekst napisany georgesa biaux pozwolić ci uświadomić niewłaściwy wybór okazać kosztowny więcej temat zadaniem web workers dedykowanych wątków roboczych zapewnienie prostego sposobu uruchamianie skryptów postaci wątków tle treści internetowych poniższy tekst wyjaśnia stworzyć web workers angular cli porównuje wydajność więcej temat promise api niedługo zostanie wzbogacone metody promise allsettled orazpromise any dowiedz temat budzi spore kontrowersje a vitaliy potapov uważa całkowicie niespójne dotychczasowym designem promise api więcej temat tracking kluczowe część developmentu produktu zarówno aplikacji webowych mobilnych jakiegokolwiek software stykamy nikogo przekonywać zrozumienie użytkowników swojego rozwiązania ważne perspektywy biznesowej poniższy artykuł omawia różne podejścia wzorce trackingu użyciu javascript więcej temat backend big data zagadnienie cieszy dużą popularnością a prawdopodobnie rosnąć jeśli planujesz poszerzyć swoją wiedzę zakresie zestawienie najciekawszych książek dotyczących tematyki okazać pomocne więcej temat jeśli zdarza ci testować kod napisany pythonie zainteresować cię artykuł shaya palachy ego omawia zagadnienia związane rozszerzonym testowaniem autor wyjaśnia warto testować kod różnych wersjach pythona a różnych systemach operacyjnych więcej temat osoby aspirujące zostania developerami zastanawiają język powinny opanować do jednych najpopularniejszych wyborów należą obecnie python java dowiedz wady zalety każdej opcji dzięki opracowaniu porównano m in dostępne narzędzia społeczność więcej temat alpine linux skupiona bezpieczeństwie lekka dystrybucja linuksa typu general purpose szczególnie sprawdza użytkowników zależy systemie zajmującym miejsca jednakże developerzy java napotkać pewne problemy działaniu aplikacji kontenerach poniższy tekst więcej temat jeśli stawiasz pierwsze kroki programowaniu pythonie słyszałeś aplikacja typu multi threaded multi process temat zbyt wielu materiałów poniższy wpis nieco rozjaśnić zagadnienia więcej temat inne internet opanowała nowa moda publikacja zdjęć portretowych postarzonych pomocą niemłodej aplikacji faceapp jak okazuje popularny program używany zabawy wzbudza liczne kontrowersje kwestii bezpieczeństwa prywatności więcej temat inżynier pracujący xiaopeng motors wcześniej zatrudniony tesli przyznał skopiowania plików związanych systemem autonomicznej jazdy stworzonym firmę muska wcześniej podobna sytuacja dotyczyła byłego pracownika apple więcej temat boston dynamics firma zajmująca robotyką znana dotąd głównie popularnych filmów prezentujących możliwości robotów decyduje wprowadzenie swoich urządzeń rynek przedstawiciele firmy nadzieję roboty przysłużą ludzkości eliminując konieczność wykonywania niektórych prac więcej temat eksperci spraw bezpieczeństwa firmy symantec wykryli groźne podatności whatsappie telegramie okazało stosunkowo prosty da podmienić pliki graficzne przesyłane aplikacje więcej temat kontrowersyjny przedsiębiorca inwestor peter thiel skrytykował działania google nie przebierając słowach oskarżył technologicznego giganta szpiegostwo rzecz obcych krajów do sprawy odniósł prezydent stanów zjednoczonych donald trump więcej temat oferty pracy var jsonurl https justjoin it external_api v1 offers var limit if limit var offerlimit limit jsonurl jsonurl offerlimit else jsonurl jsonurl limit var order if order order order newest jsonurl jsonurl order var explevel if explevel explevel experiencelevel jsonurl jsonurl explevel var companies if companies var company companies split for var k k company length k var jsoncompany company company k jsonurl jsonurl jsoncompany var technologies if technologies var technology technologies split for var k k technology length k var jsontechnology technology technology k jsonurl jsonurl jsontechnology var cities if cities world cities world var jsoncity city amsterdam city poznan city singapore city sydney city londyn city london city paris city sztokholm city barcelona city san francisco city manchester jsonurl jsonurl jsoncity if cities var city cities split for var k k city length k var jsoncity city city k jsonurl jsonurl jsoncity function getrandomint max return math floor math random math floor max console log getrandomint var offerlist jquery offers list console log blabla console log blabla id offerlist attr id offerlist attr id getrandomint console log blabla console log blabla id jquery getjson jsonurl function data var offerlist jquery blabla id for var data length var offer data offerlist append li class offer item net style div class item border id offer maintechnology div a class item href offer offerurl target div class company logo container img class company logo src offer companylogourl div div class item row div class primary line span class title offer title span div class flex right span class salary row id salary row span span class age new id age new span div div div class secondary line span class company info span class company name class material icons company icon domain offer companyname span span class company address class material icons marker icon place offer city offer street span span div class tags id tags div div div a li var now moment var added moment offer publishedat if now diff added days offerlist find age new append now diff added days d ago else offerlist find age new append new offerlist find age new addclass age newer if offer salaryto offerlist find salary row append span class salary offer salaryfrom offer salaryto offer salarycurrency span for j j offer skills length j offerlist find tags append span class tag offer skills j name span if data length offerlist css display block znany kontrowersyjnych poglądów peter thiel znowu ustach branży tym razem popularny inwestor bierze warsztat google nie przebierając słowach oskarża władze giganta szpiegostwo rzecz obcych krajów do słów współtwórcy paypala odniósł donald trump barwna postać peter thiel amerykański miliarder inwestor zdobył rozpoznawalność współtwórca serwisu paypal był jedną pierwszych osób zainwestowały facebooka znalazło odwzorowanie reżyserowanym davida finchera filmie social network wzorowanym historii powstania największego serwisu społecznościowego thiel znany libertariańskich poglądów zachęcania młodych ludzi porzucania studiów wyższych rzecz całkowitego poświęcenia przedsiębiorczości znany inwestor słynie bezkompromisowości mówienia rzeczy niepopularnych mocne słowa nie inaczej razem podczas przemówienia zatytułowanego the star trek computer is not enough wygłoszonego podczas konferencji national conservatism thiel zaapelował zajęcie odpowiednie amerykańskie służby sprawą giganta mountain view inwestor pozostawiający zbyt wiele miejsca interpretację zasugerował projekty spółki związane sztuczną inteligencją mogły paść ofiarą infiltracji obcych wywiadów a istnieje możliwość przedstawiciele chińskiego wywiadu przeniknęli władz internetowego potentata thiel zarzuca google owi podjęcie jawnie zdradzieckiej współpracy chińską armią zamiast dogadania armią amerykańską reakcja trumpa doniesienia pozostały reakcji prezydenta stanów zjednoczonych donalda trumpa odniósł sprawy wpisie swoim ulubionym medium twitterze oprócz zacytowania tekstu stacji fox news odnoszącego sytuacji trump zamieścił krótką charakterystykę postaci thiela połączoną deklaracją działań wspaniały błystkotliwy facet zna temat lepiej ktokolwiek opisuje przedsiębiorcę donald trump administracja trumpa przyjrzy dodaje prezydent don t be evil w zeszłym pojawiły informacje dotyczące projektu dragonfly wyszukiwarki google a przeznaczonej rynek chiński wszystkie produkty amerykańskiego koncernu zablokowane władze chińskiej republiki ludowej mówiło program ułatwić chińskim władzom usuwanie wyników wyszukiwań treści myśli projekt doczekał końca został oficjalnie zamknięty grudniu mogło mieć związek nagromadzonymi wokół kontrowersjami podobny los spotkał projekt maven współpracę google a pentagonu na początku czerwca serwis bbc poinformował google odnowi kontraktu prace sztuczną inteligencją siedziby departamentu obrony stanów zjednoczonych prawdopodobnie związku protestem pracowników jednocześnie zakończono pracy samym projektem
ciągła nauka podnoszenie poprzeczki podejmowanie różnych wyzwań to recepta sukces przekazana seniorów zaprosiliśmy udziału cyklu refresh pytamy nadal cenionym engineerem zrobić czasie technologiami wojtek zając lead front end engineer x team com r przez lata zarządzał krakowskim biurem xfive obecnie pracuje zdalnie brał udział projektach marek twitter fox riot games threadless kaplan specjalista dot dostępności stron internetowych mateusz nowak senior java developer edrone doświadczony programista pasjonat absolwent informatyki uj specjalizuje skalowalnych aplikacjach chmurowych opartych mikroserwisy posiada doświadczenie gamedevie systemach embedded pisaniu aplikacji mobilnych związany jvm aplikacjami webowymi zasada którą kieruje rozwiązuj właściwe problemy mateusz wojczal full stack web developer escola czternastoletnim doświadczeniem zaczynał actionscript developer zdobywał doświadczenie php javascripcie budując bardziej zaawansowane strony a kończąc single page application a czasach backbone js pierwszy poważny framework dopiero raczkował założyciel qunabu interactive cto escola s a expert reacta laravela silverstripe a entuzjasta raspberry pi dawid wojda ceo founder code8 fullstack specjalizuje javascripcie stronie frontu serwera w pogoni rozwiązaniem problemu potrafi zagalopować zagadnień niskopoziomowych fanem wizualizacji a specjalizuję grafach sztuce generatywnej ciągle szukam eksperymentuję mniej zawodowo aquascaper zwolennik aktywnego wypoczynku gór zaprasza twitterze samodoskonalenie jak dbasz nadal cenionym engineerem wojtek zając x team jeśli chodzi umiejętności techniczne regularnie dyskusje artykuły korzystając głównie twittera nuzzela agregator treści twitterze newsletterów subskrybuję kilka technicznych list dyskusyjnych a spinam sobą zestawem filtrów gmailu wrzucają powiadomienia odpowiednich folderów nowe technologie najczęściej wstępnie testuję małych projektach pobocznych narzędzia poznałem później wykorzystuję klientów co skilli nietechnicznych regularnie czytam słucham książek przydzielam list a b te listy a kończę deski deski kindle audible listy b wystarczają płatne streszczenia narzędzia blinkist mentorbox gdy szukam czegoś krótszego szybkie wyjście siłownię kilka ulubionych podcastów którymi staram bieżąco to celu maksymalizację optymalizację mojej ciągłej nauki mateusz nowak edrone przede wszystkim staram bieżąco trendami nowościami technologicznymi zasubskrybowałem newslettery dziedzin aws security ddd microservices software architecture devops artykułu newsletterów wrzucam kolejki po przeczytaniu taguje dodaje krótkie podsumowanie przerzucam listy przetworzonych aktualnie używam narzędzia notion potem mogę szybko sprawnie wrócić tematu zachodzi taka potrzeba oprócz codziennie staram przeglądać hackernews kolejna sprawa książki specjalistyczne porównaniu artykułów pozwalają wyrobić ekspertyzę wybranym temacie całość przeplatam video branżowych konferencji nowe rozwiązania testuje side projektach zarówno prototypach pracy pracy usarz codest dla sposobem rozszerzenie wiedzy umiejętności technicznych refaktoryzowanie istniejącego kodu jeżeli chcę nauczyć nowego frameworka api jakiejś biblioteki znajduję projekt open sourcowy githubie korzysta narzędzia staram trochę pobawić dzięki projekt refaktoryzuje staje czystszy natomiast zyskuję nową wiedzę dawid wojda code8 subskrybuję kilka newsletterów prowadzę aktywnie twittera oko newsy kontakt osobami branży udostępniam przemyślenia pomysły skonfrontować innymi poznać zdanie aby zebrać feedback zdarza pisać mikro biblioteki poc proof of concept formie repozytoriów githubie gdy chcę poznać nową technologię staram tworzyć mvp potem rozbudowuję przekazuję dalej osób zespołu poza pracą programistyczną team leadem ważny rozwój całego teamu często zdarza zlecać zadania członkom zespołu przetestowali daną technologię spisali przemyślenia przygotowali kawałek kodu namacalnie zbadać rezultaty pracy omawiamy potem razem decydujemy dana nowinka wpada naszego stacku odrzucamy dzięki uczę więcej byłbym stanie sprawdzić pojedynkę mateusz wojczal escola staram rozwijać swój zmysł abstrakcyjnego myślenia najczęściej da możliwy pisanie bloga sprawą niestety każdemu wychodzi zazwyczaj braku czasu zdolności oratorskich regularnie rozwiązuje zadania codewars polecam taką formę przyswajania szczegółowej wiedzy przydało zwłaszcza egzaminie toptala przeprowadzony codility com trudny głównie względu wymaganą znajomość algorytmów optymalizację ceniony engineer mojej opinii uczestniczy open sourcowych projektów ocenia pull requesty wysyła pomaga problemach innych programistów warto oczywiście dzieje branży zbyt wiele newsletterów uwagi skupia nowych frameworkach nikt rozwija do czytania sieci mogę polecić hacker news blogi frameworków korzystacie react redux laravel hacker noon mozilla hacks react status staram rok uczyć nowego języka poziomie podstawowym niekomercyjnym wiedzieć działają różne technologie rok wykorzystałem pythona znam zbudowania fotobudki własne wesele masz dolarów szkolenia jakie byś wybrał wojtek zając x team zdecydowanie wykupiłbym abonament serwisów videokursami egghead frontendmasters pluralsight na pewno medium wyciągam wiele krótkim czasie zważywszy chyba wszystkich konferencjach większa wartość płynie networkingu samego słuchania prezentacji później najczęściej dostępne online mateusz nowak edrone za dolarów ciężko znaleźć dobre szkolenia face face wykupić dostęp kursów platform szkoleniami online na pewno polecam linuxacademy przejść całe szkoleniowe certyfikaty chmurowe devopsowe polecam safaribooksonline dostęp tysięcy książek video przyjemnej aplikacji konsumowania treści usarz codest osobiście fanem uczestniczenia szkoleniach dolarów wydałbym raczej zakup książki związanej programowaniem codzienna praca umiejętność reagowania aktualne problemy projekcie samo najlepszym szkoleniem dawid wojda code8 na pewno kupiłbym videokursy sam posiadam kilka pluralsight video niewątpliwy plus prześledzić powstawania kodu a idzie lepiej zrozumieć procesy myślowe autora dały wynikowy kod pomimo wielu plusów zupełnie subiektywnie powiem fanem videokursów jestem trochę staroświecki kupuję wiele książek btw masz ogarniętego czytnika e booków uważaj książki przykładami kodu da czytać formie elektronicznej rozjeżdża mateusz wojczal escola przerabiałem kilka online niezbyt mogę któreś polecić natomiast dolarów pojechać jakąś sensowną konferencję chętnie zrobiłbym szkolenie jiry uważam słaby system prostu umiem korzystać za darmo meetup ciekawe eventy każdym większym mieście trójmieście tydzień dzieje ciekawego co programowaniem czyni programistę lepszym wojtek zając x team najczęściej pomijaną sferą programistów rozwijanie kompetencji miękkich inteligencja emocjonalna a szczególności praca umiejętnościami komunikacji jedną moich ulubionych książek zakresie nonviolent communication przeczytanie całkowicie otworzyło oczy codzienny język powoduje niepotrzebne konflikty nieporozumienia możemy lepiej odczytać prawdziwe intencje płynące osoby drugiej strony szczególnie ważne osób pracujących zdalnie przecież tracimy całą warstwę znaków niewerbalnych dla programistów zaczynających kierować zespołami ważne poznanie typów osobowości dopasowanie pracy zmiana swojego stylu zarządzania podstawie dobre wiedzy zakresie newsletter software leadership weekly hbr wszelkie treści lara_hogan mateusz nowak edrone na pewno wszelakiego rodzaju umiejętności miękkie związane komunikacją programiści dzień pracują innymi inżynierami szeroko pojętym biznesem analitykami supportem użytkownikami oprogramowania tworzą każda osób mieć punkt widzenia spojrzenie dany temat każde podejść właściwe umiejętność postawienia czyimś miejscu pozwoli uniknąć wielu konfliktów ważna organizacja pracy panowanie chaosem napływającymi sprawami ustalanie priorytetów kolejny temat praca danymi wnioskowanie umiejętność patrzenia dane wykresy metryki wyłapywanie istotne istnienia znajomość błędów poznawczych usarz codest myślę ważnym pomijanym czynnikiem odpoczynek dobry programista wypoczęty programista chłodno reagować problemy pojawiają zarówno kodzie interakcjach pomiędzy programistami ważne zachowanie odpowiedniego dystansu a będąc przemęczonym wpaść pułapki własnego ego dawid wojda code8 niewątpliwie otwarty umysł tolerancyjność chęć poznawania nieustanne zadawanie pytania doza pokory ogromna determinacja tymi cechami charakteryzowali wszyscy najlepsi programiści którymi miałem okazję pracować niedawno zauważyłem wszystkie osoby uważam specjalistów mniej używają metody naukowej rozwiązywania problemów technicznych mateusz wojczal escola przede wszystkim umiejętności komunikacji korzystania narzędzi znajomość angielskiego poziomie zaawansowanym niezbędna wszystkie ważniejsze publikacje pisane języku oprócz języka rozwijać kompetencje miękkie przydatne każdym zawodzie codziennym warto znać wszelkie narzędzia wspomagają naszą prace szkicowania diagramów modelowanie baz danych podstawy google spreadsheets wspomniałem pierwszym pytaniu abstrakcyjnym myśleniu uważam niezwykle pomocne w jakim języku programowania pisałeś trzy lata zmieniłeś zmieniłeś wojtek zając x team myślę trzy lata pisałem typescripcie a wyobrażam mateusz nowak edrone java głównego języka specjalizuje zmieniłem co najwyżej staram bieżąco wersjami języka myślę język programowania takiego znaczenia można programować niezależnie języka podobnie zepsuć software stosuje dobrych praktyk usarz codest trzy lata pracowałem projekcie full stack developer backendzie java później skupiłem samym frontendzie wiadomo rządzi javascript podczas pracy frontend developer znaczną część czasu zajmuje pisanie css scss dawid wojda code8 pisałem piszę będę pisać javascripcie jest ulubiony język zakochałem odkryłem potencjał lata tamtej pory widzę jasnych przesłanek napisaniu czegoś innym języku robię poza język traktuję narzędzie tworzenie oprogramowania proces zachodzi naszych głowach problem mogę zapisać równie postaci matematycznej pseudokodu mateusz wojczal escola chyba trzy lata więcej napisałam swoją ostatnią aplikację zabitej technologii jaką flash całe wraz super językiem actionscript zmiana wymuszona trzy lata pisałem javascripcie php języki es7 php7 naprawdę dojrzałe technologie pozwalające kompleksów mogące konkurować resztą technologii webowych staram skupiać z javascriptem korzystać webassembly webgl sporo javascript używałem zaprogramowania hardware owej gry puzzle miała zaszyty raspberry pi trzy lata pewno pisałem zbyt wielu testów czego wyobrażam programowania wtedy jaką radę dałbyś zaczynałeś programować wojtek zając x team zdecydowanie real artists ship perfect is the enemy of good przez lata stworzyłem dużą ilość małych projektów pobocznych zostały schowane szuflady później podobne narzędzia opublikowane osoby stawały popularne prowadziły ciekawych możliwości twórców myślę siła społeczności przecenienia częściej publikowałbym projekty byłyby pełni idealne pozwoliłbym innym osobom dołączyć mateusz nowak edrone nie skupiajcie mocno frameworkach konkretnych api nauczcie solid nauczcie testowania poczytajcie ddd te rzeczy odpowiedzą większość pytań którymi staniecie przyszłości projektując tworząc oprogramowanie będą was drogowskazem drodze nieskończonej ilość wyborów między różnymi rozwiązaniami przy okazji będziecie stanie pisać kod modyfikowalny zrozumiały innych najważniejsza programowaniu czytelność kodu a kod działa to drugie zapewniają testy programy piszemy ludzi mogli odczytać zmodyfikować programowanie gra zespołowa dawid wojda code8 nie bądź uparty ucz starszych wykłócaj sprawdź zbadaj dopiero dyskutuj oceniaj nie pisz wszystkiego samemu stracisz mnóstwo czasu odpoczywaj więcej praca mateusz wojczal escola poznać podstawy wcześniej lepiej rozróżniać elementarne pojęcia paradygmaty programowania znać wzorce projektowe struktury danych klasyczne algorytmu czym różnią języki siebie na jakimś etapie zdecydowanie polecam przeczytanie klasycznych książek pragmatyczny programista od czeladnika mistrza andrew hunt david thomas mistrz czystego kodu wujka boba czym prędzej przyswoić dry solid tdd kiss rtfm itp jakoś trzu lata doszły słuchy unii europejskiej miliona nieobsadzonych wakatów branży it niestety przewidywania sprawdziły już końcówce początku dobito takiej liczby część stanowisk stanowią administratorzy część testerzy część programiści analitycy dalej rafał kozłowski senior software engineer credit suisse posiada grubo profesjonalnego doświadczenia zbliżającego nieubłaganie pracuje głównie technologiach net zarówno framework core wielkim sympatykiem angulara architektury używającej mikroserwisy zagorzały zwolennik domain driven design command query responsibility segregation single page application część ludzi zaliczają it rozumie czymże it bo wiedzieć dla it osobnik umie komputerem dogadać wymienić wentylator robi głośny albo windowsa umie zainstalować ewentualnie każdego dnia klika komputer pieniądze zarabia mógłby pożytecznego zrobić przykład zostać hydraulikiem mechanikiem a bardziej poważnie to ludzie spoza it wiedzą wiele dziwi nikogo ja chirurgii naczyniowej wiem zbyt wydaje niemal jakąś magią wiedzą tajemną prostu znam gorzej ludzie pracują naszej branży sami wiedzą czymże powstała serio zdarzają tacy kiedyś słyszałem jednego człowieka branży it skrót informatyka nic bardziej mylnego it skrót information technology co znaczy ludzkie to znaczy tyle it innego nauka temat przechowywać przetwarzać przesyłać informacje głównie pomocą urządzeń elektronicznych zwanych komputerami komputery same siebie przetwarzają konkretnych informacji to głupie pudełka a dzięki wynalezieniu jakiś czas pierwszych programowalnych mikrokontrolerów możemy programować przekazać sekwencję instrukcji dzięki wykonają jakieś polecenie jak kiedyś wytwarzano oprogramowanie dobra komputer alfą omegą mieć oprogramowanie ułatwia ludziom tak działa to ludzie uruchamiają bierze ekranie kosmosu ktoś musiał wymyślić napisać przetestować sprzedać dostarczyć jeśli jesteś osobą pracującą it masz pojęcia wygląda proces wytwarzania oprogramowania to chociaż czasem zdarza jakiś kujon siedzi swoim pokoju wypiekami twarzy pisze jakiś program w przypadku większości dużych rozwiązań takiego mogło powstać tle stoi cały sztab ludzi w latach dziewięćdziesiątych niektóre firmy trzymają chociaż podejściu wróżę przyszłości wytwarzanie oprogramowania wyglądało prawie samo produkcja czegokolwiek czyli proces wielomiesięcznej analizy dyskutowano stworzyć działać następnie proces wielomiesięcznej a raczej wieloletniej implementacji całe zastępy programistów po faza testów poprawek czasami przeplatana akceptacją strony góry dzięki takiemu rozwiązaniu latach wymyślenia hiper mega fajnego pomysłu program wydaniu milionów dolarów analizę implementację testy poprawki dumą przerażeniem oczach stwierdzić zostało dostarczone nieaktualne konkurencja oddała podobne oprogramowanie rok wcześniej zagarniając większość rynku poza oprogramowanie pomimo wielomiesięcznych testów dalej niedoskonałości rozwiązania różnią autorzy mieli myśli aczkolwiek oprogramowanie robiło dokładnie rozpisane wielostronnicowej analizie przygotowanej całe zastępy analityków szukano rozwiązania miesiącach pracy pokazać szefostwu co zatem poszło gdzie popełniono błąd wiele osób próbowało odpowiedzieć pytanie wiele osób poległo jednak znalazła grupa osób branży it udało zbliżyć odpowiedzi może ustalili poszło ustalili robić prawdopodobieństwo sukcesu zwiększało czasem a zmniejszało miejsce podejściu dziewięćdziesiątych waterfall w waterfall fazę planowania analizy a następnie implementacji następuje faza testów wdrożenia wielkim uproszczeniu każda faz obarczona ryzykiem ktoś zrozumie ktoś zinterpretuje ktoś zaimplementuje ktoś przetestuje rysunku poniżej tak narodził agile idea zachęcała mieć krótki sprint biegiem gonimy mety naszym zadaniem dowieźć cokolwiek dlaczego cokolwiek bo lepsze wcześniejsze wielomiesięczne dowożenie niczego w związku każda faza obarczona ryzykiem a systemy budowano razu kombajny robiące włącznie kawą pianką rysunkami koniec projektu cieszono dowieziono mniej funkcjonalności dlatego grupa zebrała a m in martin fowler kent beck robert c martin innych dobrym alkoholu próbując znaleźć rozwiązanie i udało tak narodził agile wraz agile manifesto jego głównym założeniem odróżnieniu klasycznego podejścia wytwarzać oprogramowanie krótkich okresach zwanych sprintach biegiem gonimy mety naszym zadaniem zespołu dowieźć cokolwiek dosłownie cokolwiek dlaczego mało bo więcej dowiezienie niczego cyklu wielomiesięcznym zdarzało podejściu waterfall pierwsze sprinty trwały tygodni pomyślenia następnie skracano miewamy sprinty tygodniowe a czasem krótsze na tamte czasy krótko znaczyło tygodni dosłownie uważano sześciotygodniowy sprint prawdziwy sprint dziś potrafimy mieć sprinty tygodniowe a czasem krótsze nie razu rzym zbudowano naście zaczęto okresu akceptowalny ogółu nikt uwierzyłby przecież wcześniej zajmowało dosłownie lata skrócone miesięcy tygodni te tygodni okresem tyle krótkim biznes managerowie cała reszta stanie uwierzyć zostanie zrobione po udowodnieniu podejście działa stopniowo skracano okres czasem sprinty trwające godziny problem agile zbyt dosłowną implementacją dziś ciężko wyobrazić pracować agile niemal każdej ofercie programistów testerów metodyka wymieniana atutów w innych brak wymienienia domyśle agile gdzieś bo niby cóż innego na niedziałającym waterfallu zbyt wielu przejechało aczkolwiek garstka trzymają może akurat działa kto metodyka wygląda doskonałe remedium problemów wytwarzaniem oprogramowania pewno czy minusów potrafią zamiast usprawniać psuć młody dynamiczny zespół składający sześciu osób prawdopodobny częsty cząstkowy opis występujący propozycjach pracy i grup omawiana technika sprawdza doskonale samoorganizujące zespoły sprawdzają momentu ktoś bierze agile zbyt dosłownie traktuje wszystkie zasady literalnie jakie problemy generuje agile takie literalne przesadne podążanie pryncypiami wygenerować następujące problemy przykładów mnożyć mnożyć czy znaczy pracy zły nic bardziej mylnego chodzi prostu zachować umiar każde ekstremum groźne dążące raczej samozagłady dostąpienia mitycznej nirvany ważne zachować umiar tak wszystkim zasad agile należy stosować zbyt dosłownie zamiast pomóc rozwiązaniu problemów zaszkodzić zakładając robione przesadności omawiana technika potrafi generować zaskakujące efekty można dostarczać rozwiązania szybko sprawnie ale jakieś wszystko pięknie działa poziomie pojedynczego zespołu a przypadku współpracy wielu zespołów pracujących takim systemie zgodnie zasadami agile zespół dostarczać wartość bazując informacji zwrotnej dostarczać wartość robić wdrożenie produkcję da przy zespole działa perfekcyjnie przy wielu działa hmm naprawdę nikt końca można powiedzieć przecież wiedza działa i wiedza zawsze możesz wiedzieć jakim etapie pojedynczy zespół ale jakim etapie całe oprogramowanie pracuje przykład grup zwłaszcza dochodzi zależności między zależy drugiego drugi piątego a piąty siódmego nie wspominając siódmy zależy pierwszego tak mnożyć kółko scrum of scrums spotkania managerów przedstawicieli zespołów ustalić jesteśmy ale obarczone ryzykiem przedstawiciel scrum master product manager mieć niepełną wiedzę wiedzę zafałszowaną takie rozwiązania pomagają komplikują cały system podwaliną prostota między innymi chodziło ojcom założycielom agile waterfall obarczony ryzykiem zbyt elementów pośrednich analiza deweloperzy testerzy managerowie zarząd klient itp a element zwiększająca złożoność większa szansa porażkę jak problemy obejść a rozwiązać problemy w prosty prostu usiąść rozwiązać a bardziej poważnie przypadku problemów zbyt literalnym traktowaniem zasad należy poluźnić trochę szelki rozwiązać krawat rozpiąć górny guzik koszuli następnie wziąć głęboki oddech przypomnieć mówi agile ludzie interakcje ważniejsi procesy narzędzia działające oprogramowanie ważniejsze dobra jakakolwiek dokumentacja techniczna współpraca klientem ważniejsza negocjacji zrzucania winy reagowanie zmiany ważniejsze sztywne trzymanie planu taki trochę paradoks zlikwidować problemy generuje agile pomocą zasad promuje tenże agile metodyka została wymyślona reagować zmieniające dostosowywać zmian inaczej będziemy mieć swoistą formę zamiatania problemu dywan jeśli ktoś zespole mówi ktoś otoczenia członkiem zespołu prawda znak ktoś podchodzić zbyt dosłownie zasad agile jeśli ktoś zespole mówi zespół niezależną jednostką decyduje wszystkim wewnątrz dzieje pomimo rację znaczy tyle ktoś zbyt dosłownie podchodzi procesów zaczyna przedkładać ludzi interakcje jeśli ktoś zespole mówi robił tamtego agile scrum kanban znak pora poluzować guzik koszuli rozwiązać trochę krawat wziąć głęboki wdech ktoś prostu zaczyna dosłownie traktować zasady mówiące m in traktować zbyt dosłownie a przypadku kilkunastu zespołów pracujących używając metody jak zgrać po pierwsze trzymać agile mówi nazbyt dosłownie drugie testuj reaguj zmiany próbuj nowych rozwiązań jak działają zmień a działają utrzymaj pamiętaj szaleniec robić dokładnie samo oczekiwać różnych rezultatów nikt dobrego rozwiązania takiego problemu waterfall doskonały czerpać pewne rozwiązania przykład planowanie milestone mimo lubianego zespoły zwinne przypadku współpracy grup zadziałać a zadziała to zmienić nieco zobaczyć działało kolejnym tygodniu sprincie reagować zmiany ważniejsze sztywne trzymanie planu to działało zadziała twoim przypadku gwarantuję agile doskonałą metodą pracy lepszej wynaleziono dlatego próbuj dziel swoją wiedzą doświadczeniem członkami projektu może razem zbudujecie działać możliwe zastosowania innych projektach firmach podobnie stało agile pracować mniej wyższej płaszczyźnie tj zamiast tworzyć kod opracowywać strategie tworzyć architektury optymalizować firmę lider cel najbliższe lata pawła komarnickiego zaprosiliśmy rozmowy opowiedział pracownika sklepu został grafikiem później freelancerem web developerem runtastic większość swojej kariery zawodowej spędził linz otworzył swoją firmę po programista takim doświadczeniem zakłada własną firmę przecież seniorzy tyle zarabiają dobry programista berlinie liczyć dobre zarobki tysięcy eur rocznie więcej trybikiem maszynie a decyzje dotyczące produktu przykład rozwiązania techniczne podejmowane product ownerów osoby samym szczycie hierarchii przez tworzyłem produkty zera pewnym momencie dotarło chciałbym oprócz tworzenia samego kodu mieć większy wpływ projekt kierunek podejmowane decyzje osobną sprawą spora rotacja pracowników startupach chciałbym pewnym momencie mieć swój własny stały zespół pracowałby oparciu wspólne wartości jakie wartości pomysł scalały zespół pracując startupach zbyt wiele widziałem pełen przekrój tworzonych kultur zarówno miejscach wspominam koszmar wobec czuję sentyment którymi staram inspirować w mojej firmie chciałbym opierać szczerości ludzie szczerzy wiele problemów zostaje rozwiązanych zanim naprawdę staną problemami nikt czuje obrażony odsunięty zignorowany chciałbym stworzyć przyjazne rozwoju profesjonalnego osobistego wiele firm którymi miałem styczność idzie celu trupach a pierwszymi ofiarami takiej polityki pracownicy chciałbym firma tworzyła pozytywne emocje zyskamy wszyscy wspomniałeś dobrej przyszłości czym ciebie jest zdecydowanie przyszłość muszę martwić miesiąc kwartał rok zespół firma sprawnie działać zarabiać siebie aktualnie dążę stworzenia projektów firm stanowić pasywny przychód tj będę musiał spędzać całego mojego czasu pracy a będę cto prezes nadawał kierunek planował wspierał zespół doradca myślisz własna firma najlepsza droga samorozwoju tak od początku mojej kariery interesowałem wszystkimi aspektami tworzenia cyfrowych produktów designu user experience programowanie copywritingu fotografii jeden moich szefów powiedział zbyt wiele umiejętności siedzieć godzin dziennie pisać kod miał rację praca korporacji daje poczucie bezpieczeństwa potrafi zdusić kreatywność własna firma złotym czym przekonałem całkiem niedawno pracując siebie nagle horyzoncie pojawiły tematy księgowość aspekty prawne gdpr umowy negocjacje itp którymi pracownik musiałem martwić zakładając własną firmę liczyć godzin pracy biurku a zaskakująco duży kawałek dnia zajmą formalności marketing nawiązywanie kontaktów opowiedz drodze jaką przebyłeś podjęcia decyzji otwarciu własnej firmy czym zajmowałeś pierwszej pracy formalnie zanim rozpocząłem studia moją pierwszą pracą wykładanie owoców warzyw hipermarkecie wytrzymałem dni czasie udało znaleźć pierwszą branżową pracę grafik animator małej agencji reklamowej była raptem piątka a zakres usług oscylował pomiędzy tworzeniem małych serwisów grafiką druku tworzeniem wyklejanych kasetonów sklepów jakie doświadczenia wyniosłeś pracy była mała firma miałem okazję zobaczyć wygląda rynek reklamy praniu różni względem obraz miałem głowie nastolatek jedną najważniejszych rzeczy nauczyłem pracując takim konsekwentne komunikowanie postępów elastyczność zespół pracował próżni musieliśmy komunikować klientami mieli plany z powodu istotne efektywne komunikowanie wymagań postępów prac uniknąć pomyłek typu kaseton wyklejony czerwono a pomarańczowo czasami zmienić priorytety biegu pracować presją był dobry trening radzenia zadaniami w międzyczasie udzielałeś forach pomagałeś innym pisać lepszy kod pamiętasz jakiś ciekawy problem rozwiązanie przyniosło tobie satysfakcję moim konikiem tamtym okresie udzielanie rad temat optymalizacji kodu html tworzenia czystych lekkich serwisów użyciem html5 css javascript w ramach kontekstu czas google zaawansowane większość serwisów internetowych robionych flashu a tematyka seo sem powijakach do większość serwisów tworzona tabele rzecz pomyślenia niestety pamiętam szczegółów było prostu wspieranie programistów tworzeniu lżejszych nowocześniejszych serwisów a sprawianie bardziej czytelnie przyjazne crawlerów google w postanowiłeś przenieść austrii pracować runtastic jak przebiegał proces rekrutacyjny do pory potrafię ułożyć głowie stało wylądowałem austrii po zakończeniu studiów otworzyłem działalność polsce móc księgować usługi pory wykonywałem student moich klientów tworzenie serwisów obsługa serwerów itp niestety szło zbyt płynnie byłem niedostatecznie doświadczony mógł wprowadzić produkt rynek ponadto rynek pracy programistów ruby tamtym okresie praktycznie istniał na palcach jednej ręki mogłem policzyć firmy używające ruby rails dodatek rozsiane całej polsce ofertę pracy runtastic znalazłem polskim forum ruby rails angielsku napisałem zaczepnie wiadomość cała machina jakoś ruszyła mieliśmy wideorozmowy czym zostałem zatrudniony zaproszony przeprowadzki były trochę czasy nikt wymagał ode tworzenia prac domowych zdawania testów udowadniania umiem programować wystarczyła rozmowa jaki stan aplikacji zastałeś zmiany udało tobie wprowadzić runtastic całkiem dobrym stanie dołączyłem zespołu potrzebna wiedza doświadczenie migracją ruby rails ruby rails część starego kodu działała wymagała refaktoryzacji warto pamiętać początki istnienia platformy ponieważ miałem doświadczenie dziedzinie a oferowałem wiele innych umiejętności byłem doskonałym kandydatem oprócz pracy backendem miałem okazję stworzyć pierwszą wersję kalendarza nowej wersji serwisu z wiem dobre kilka miesięcy moim odejściu kod stanowił trzon internetowej wersji produktu dlaczego odszedłeś firmy wydawała idealnym miejscem ciebie byłem zadowolony pracy runtastic austrii powodów podatkowych mogłem przebywać pół po czasie musiałbym przenieść swoją rezydenturę podatkową własną mini firmę byłoby trudne logistycznie wróciłem polski przypadek dałem zwerbować berlina razem balastu postaci własnej mini firmy opowiedz kosztach linz ogóle mieszka takim mieście linz niesamowitym doznaniem jest miasto zaskoczyło wiele sposobów architektury jakości podejścia ekologii logistyki kultury jest miarę miasto przykład zaprojektować biorąc uwagę komunikację miejską całe miasto przebiegały linie tramwajowe pokrywające większość długości a poprzek przebiegały linie autobusowe tworząc komunikacyjny szkielet miasta dla fascynujące linz miało bogaty kulturowy charakter tuż odrestaurowanej starówki przepływa dunaj otoczony takimi atrakcjami przykład zamek muzeum techniki galeria sztuki lentos wieczorami niesamowity widok rozświetlony lentos rzucał blask dunaj jakość linz nieporównywalnie wyższa jakość wrocławiu po pierwsze miasto mniej zatłoczone bardziej zielone pory uważam linz oazę zieleni najbardziej ekologiczne miejsce jakim dane przebywać a lokalne podejście spędzania czasu natury wyciągnięcie ręki zmieniło stosunek spędzania wolnego czasu w czasie aktualnie polsce toczy debata temat handlowych niedziel linz musiałem zrywać sobotę rano zrobić zakupy większość sklepów otwarta a niedzielę praktycznie wcale i nikt marudził prostu reszta soboty wyjście restauracji pobiegać pojeździć rowerze myślę względem linz pewien wyjątkowe podział biurowy tydzień aktywny weekend zakorzeniona umysłach austriaków wspierana bogatą ofertą atrakcji mieście a dostępem rzeki gór kilometrami rowerowych przyjazną komunikacją miejską itd jeśli chodzi kwestie języka byłem absolutnie zaskoczony sześćdziesięcioparoletnia właścicielka mieszkania mówiła sprawnie angielsku samo językiem angielskim sprawnie porozumiewali inni ludzie pracy sklepach ulicach był przyjemny akcent moją znajomością niemieckiego obawiałem wyjazdu krajów niemieckojęzycznych niepotrzebnie przez blisko jedenaście pracowałeś stanowisku developera co najciekawszego spotkało cię czasie w czasie pracowałem wieloma ciekawymi projektami najciekawszą rzeczą czasie możliwość pracy wielonarodowych zespołach w znalazłem przyjaciół hiszpanii anglii wietnamie japonii zebrałeś doświadczenie postanowiłeś przełożyć własną firmę którą dodatku otworzyłeś berlinie z jakimi kosztami początkowymi musiałeś liczyć początkowe koszty trudno oszacować m in wizyta notariusza wpis rejestru firm rejestracja działalności kapitał początkowy firmy ug najmniej gmbh najmniej a obowiązkowa roczna składka stowarzyszeniu przedsiębiorców do dochodzą koszty księgowości najmniej miesięcznie plus roczne rozliczenie kosztuje nie mało najpierw znalazłeś team pierwsze zlecenie pracuję swoim własnym produktem zarówno mojej własnej firmie współzałożycielem ciężko powiedzieć pierwsze idea w rekrutujesz ludzi swojej firmy berlin rozbudowane zaplecze chodzi rekrutację oprócz standardowych headhunterów wiele lokalnych serwisów ofertami jak wygląda rekrutacja pracowników rynku niemieckim czym charakteryzuje powiedziałbym taka polsce firmy zatrudniają głów publikują oferty pracy serwisach ogłoszeniami wystarczy złożyć cv umówić rozmowę jakie masz plany przyszłość względem firmy siebie wobec firmy rozwój rozwoju chcę mieć mega korporacji wobec pracować mniej wyższej płaszczyźnie tj zamiast tworzyć kod opracowywać strategie tworzyć architektury optymalizować firmę lider nie obawiasz otwierając firmę przestaniesz zajmować programowaniem nie pozwolę stworzyłem siebie niszę mogę programować projektować grafikę zajmować treścią tworzyć multimedia dodanie kolejnej rzeczy którą mógłbym robić widzę bardziej możliwość rozwoju ciekawe wyzwanie paweł komarnicki właściciel cubitoo absolwent informatyki politechnice wrocławskiej zawodowo specjalizuje tworzeniu aplikacji internetowych podstaw od mieszka stałe berlinie aktualnie prowadzi własną agencję interaktywną współtworzy startup wspierający psychologicznie osoby cierpiące choroby przewlekłe zapalony gracz kucharz fotograf hobbysta ruszamy trzecią serią livestreamów polskimi programistami piotr nowosielski ceo just join it listopada online rozmawiał polskimi developerami opowiedzą pracy granicą z rozmów dowiecie wygląda kultura pracy dużych firmach dba rozwój pracowników z kim będziemy rozmawiać edycji tysięcy uczestników poprzednich dwóch edycji utwierdziło przekonaniu prostu musimy kontynuować serię livestreamów dlatego ostatnie miesiące pracowaliśmy jesień ruszyć trzecią serią programu tym razem będziemy rozmawiać polskimi developerami meksyku londynu seattle nowego jorku zadamy szczegółowe pytania dotyczące procesu rekrutacji codziennego nowym kraju chętnie przekażemy pytania was zadawajcie komentarzach artykułem facebooku polscy programiści pierwszym gościem programu paweł mieczkowski full stack net developer scottish enterprise mieszka pracuje monterrey meksyku to ciekawa historia drogi developera wyjechał nastolatek polski zwiedzić pracował różnych klientów rządu szkocji stronę zamawiania walut american express od pomieszkuje kolumbii brazylii meksyku pracuje zdalnie krajów livestream odbędzie tomasz wiszkowski software developer google drugi gość trzeciej serii livestreamów od pracuje branży it a programowaniem zajmuje jak mówi param rzeczami niechcianymi dzięki czemu wiele razy byłem wysyłany niszowy specjalista podróże służbowe uwielbia chodzenie górach pogoda pozwala majsterkuje domu od mieszka seattle mieście marzy wielu ta rozmowa odbędzie r trzecim gościem livestreamu michał franc engineering lead just eat michał pracuje londynie swoją przygodę programowaniem rozpoczął wrocławiu ma letnie doświadczenie stanowiskach programisty architekta lidera o mówi technologicznym poliglotą postrzegającym kod szczegół implementacyjny zakochany vimie konsoli i3wm skupiony systemach rozproszonych micro servisach service meshu tworzeniu skalowalnych rozwiązań chmurze ten livestream odbędzie r programista pasjonat zamiłowaniem bezpieczeństwa komputerowego niskopoziomowych aspektów informatyki gościem kolejnego livestreamu gynvael coldwind information security engineer google autorem książki zrozumieć programowanie licznych artykułów publikacji podcastów wystąpień poświęconych wspomnianym tematom coldwind współzałożył kapitanem zespołu dragon sector jednej najlepszych drużyn ctf od mieszka zurychu rozmowa odbędzie r bartłomiej smykla open source engineer vmware podczas rozmowy opowie pracy openfaas narzędziem wpisującym popularny ostatnio trend serverless function as a service bartłomiej uważa wiecznego junior developera marzeniem uczenie końca uważa programowanie każdego wolny czas nauką poświęca pomaganiu innym starając propagować ego less programming livestream bartłomiejem odbędzie r w przeciwieństwie moich kolegów podstawówki miałam domu peceta składanego razem ojcem godzinach pracy znałam wszystkich gier pykali chłopcy lekcjach informatyki klasie zamiast pisałam programy logo powiedziała agata cieplik software developer dropboxa dzień mieszka nowym jorku podczas livestreamu zapytamy pracuje dużej firmie rozmowa odbędzie r damian busz fullstack developerem adidasie pracuje monachium jak mówi niemiec przyjechał większej płacy piwa prostu swojej dziewczyny pracuje firmy dostarcza oprogramowanie firm adidas większości adidasa najczęściej programuje backendzie głównie pythonie podczas rozmowy zapytamy proces rekrutacji wyglądała rozwoju przeciętnego studenta informatyki livestream odbędzie r o pracuje malcie opowie michał turek frontend developer gig mieszka wyspie powierzchni porównywalnej powierzchni wrocławia słoneczne dni występują razy przeprowadzka możliwa dzięki ukończeniu technicznej uczelni krakowie a następnie studiów podyplomowych białymstoku jestem dobrym przykładem początkujący programiści spakować walizki ruszyć wymarzą zapowiada rozmowa odbędzie r adam furmanek software development engineer amazonie ostatnim gościem trzeciej edycji livestreamów polskimi programistami adam seattle przyjechał krakowa skończył informatykę wieit agh dawne samogłoski kilka pracował głównie programista net a wolnych chwilach organizował konferencje prowadził prelekcje grupach dyskusyjnych karierę zaczynał pisząc aplikacje desktopowe mobilne javie livestream adamem odbędzie r poprzednie edycje w poprzednich edycjach rozmawialiśmy polskimi developerami pracującymi firmach wikipedia microsoft akka google vmware trivago stripe wszystkie rozmowy znajdziecie kanale just join it a postanowiliśmy spisać tekst znajdziecie naszym magazynie zakładce live streamy konkurs uczestników cieszymy was chętnie oglądacie rozmowy polskimi programistami specjalnie was zorganizowaliśmy konkurs wystarczy udostępnicie facebooku krótką wzmiankę wydarzeniu dodacie hashtag justjoinit link https event justjoin it spośród wszystkich udostępnień wylosujemy osób wręczymy dowolnie wybrane koszulki ogłoszenie wyników nastąpi listopada z góry dziękujemy wszystkie udostępnienia zapraszamy listopada pierwszy livestream największy koszt zjednoczonych emiratach arabskich wynajem zazwyczaj wynosi tysięcy złotych miesięcznie dolicz jedzenie rozrywkę wydatki tysięcy złotych miesięcznie nie polecałbym nikomu przyjeżdżać pracy mniej tysięcy miesięcznie mówi rafał mańka senior android developer emirates opowiedział swojej kariery poleca początkującym pracę software housie twój współlokator przekonał cię informatyce znaleźć płatną pracę rzeczywiście znaleźć studiach psychologii społecznej pracę studiach psychologicznych znaleźć trudno jedyne oferowano bezpłatne staże jeżeli chodzi pracę zawodzie programista dosyć przekonać wspomniany kolega szukał pracy a ciągle dostawał propozycje rekruterów dostał grant unii stworzenie jakiegoś oprogramowania kolegami na pracuj ofert programistów rocznym stażem stanowisko juniorskie jak wyglądało twoje przebranżowienie od czego zacząłeś naukę programowania zacząłem tutoriali youtube artykułów internecie później pojawiło teamtreehouse com udemy com korzystałem wyłącznie tutoriali wideo zajmowałem tworzeniem własnych projektów książek polecam zanim wyjdą nieaktualne materiały uczelni przydały podjąłeś decyzję kolejnych studiach razem wybrałeś informatykę pjwst warszawie do czego kontekście programowania przekonywali cię wykładowcy nie sprawdzałem wykładowców ogóle pjwstk uczelnią prywatną studiami zaocznymi dobrej renomie te trzy kryteria musiały spełnione zdecydował w retrospekcji studia potrzebne jak oceniasz kierunek pjwst pozytywnie to niewielu kierunków faktycznie przygotowuje jakoś pracy zawodzie jednak wiedzy zdobywa pracując na koniec studiów przepaść wiedzy pomiędzy ludźmi pracowali czasie studiów a tymi pracowali ile czasu studiach spędzałeś pogłębianiu wiedzy kiedy złapałeś bakcyla poczułeś codziennie pragniesz więcej studia odbywały drugi weekend sobotę niedzielę a zajęcia trwały sześć godzin praca zawodowa poniedziałku piątku zajmowała godzin dziennie plus nadgodziny zawsze robiłem tyle nadgodzin możliwe programowanie zaczęło podobać praktycznie razu podoba tworzenie nowych rzeczy umysłowe w trakcie studiów znalazłeś staż software housie czego nauczyłeś firmie w software house nauczyłem tworzenia wyglądających gotowych aplikacji szybko duży nacisk szybkość a mniejszy jakość z perspektywy czasu potrafisz ocenić praca software housie dobry start karierze moim zdaniem software software house idealna firma początek tego typu firmy bardziej skłonne zatrudnienia początkujących programistów względu koszty kładzie duży nacisk pisanie gotowych całkowitych rozwiązań więc szybko człowiek nauczyć zrobić początku końca jest tyle dobre dużym projekcie zazwyczaj pracuje wycinku czegoś rozumieć całości aplikacji praca software housie duży stres kupa nieodpłatnych nadgodzin dłuższej perspektywie polecałbym przejść firmy robi aplikację wewnętrznie własny użytek allegro pierwsza praca pewno dała tobie jakiś obraz pracy programisty możesz zdradzić po pierwsze zawód programisty polega pracy ludźmi nie tworzenie czegoś pojedynkę wszystkim dialog innymi programistami grupie programistów raczej pozytywne ludzie chętnie pomagają już wiedziałeś kim chcesz kilka nie zawsze zastanawiałem następny krok musze zrobić przejść kolejny etap ale miałem horyzoncie dłuższej perspektywy lata mniej więcej czasie postanowiłeś nauczyć innego języka programowania jakiego zdecydowałeś języka java javę mieliśmy studiach najpopularniejszy język podjęciem języka przeważało rynku ofert pracy zarobki dobre ponadto platforma android dopiero rozwijała doświadczonych programistów dziedzinie wydawało dobra inwestycja w weblify programowałeś aplikacje androida pamiętasz największy problem jakim wówczas uporałeś wtedy dopiero uczyłem problem polegał zazwyczaj zmieniłem kod miejscu a aplikacja wywalała gdzieś zupełnie indziej wszystko splątane sobą pozbawione logiki zmiana trywialna zajmowało czasu od prawie czterech pracujesz zjednoczonych emiratach arabskich opowiedz wyglądało znalezienie pierwszej pracy kraju co zawierała propozycja rekrutera obliczyłeś kosztować cię kraju praktycznie każdą pracę pierwszą znalazłem pasywnie linkedin rekruter wielkiej brytanii zadzwonił zapytał byłbym zainteresowany pracą uk po przeliczeniu kosztów zarobków zrezygnowałem byłoby korzystne tamtym czasie w odpowiedzi zaproponował pracę uae opłacało bardziej na poziom możesz pozwolić zjednoczonych emiratach arabskich to drogi kraj koszty emiratach arabskich trzy razy wyższe polsce jednak zarobki trzy razy wyższe w efekcie poziom wyższy względu dobra luksusowe samochody elektronika itp kosztują tyle samo największy koszt mieszkanie tysięcy złotych miesięcznie dodać jedzenie rozrywkę wydatki wychodzi potrzeba przynajmniej tysięcy miesięcznie utrzymać podobnym poziomie polsce tysiące nie polecałbym nikomu przyjeżdżać pracy mniej tysięcy miesięcznie trzeba wziąć uwagę fakt prawdopodobnie pracować partnerki moich znajomych stewardessami pracują w przypadku programistów zazwyczaj rekrutacja przebiega internet przyjeżdżać miejsce mnie akurat znalazł rekruter wielkiej brytanii global m można odezwać pytać oferty pracy jest kilka dobrych firm którymi zainteresować emirates careem dubizzle czym zajmujesz jestem programistą android a obecnie zostałem wydelegowany platformę ios robię oficjalną aplikację mobilną linii lotniczych emirates pracuję dziale it aplikacji mobilnych linii lotniczych emirates uae na moim piętrze tworzymy aplikacje mobilne pasażerów linii lotniczych w wlicza aplikacja android aplikacja ios strona mobilna emirates strona desktopowa tworzona innym piętrze wszystkimi menedżerami testerami designerami osób całym piętrze nas samą aplikacją android ios pracują sumie zespoły zespoły android ios każdy zespół osób sumie osób wyobrazić takim ciężko dojść konsensusu jakikolwiek temat większość ludzi którymi pracuję hindusi ich poziom pisania kodu niskim poziomie ogólnie polscy programiści cieszą dobrą renomą pracuję dwoma polakami najlepsi programiści całej firmie jakie miałeś pierwsze wrażenia przesiadce programowanie platformie ios z jednej strony ios android podobne zazwyczaj rozwiązuje same problemy podobny nawet frameworki siebie zbliżone kotlin swift niewiele siebie różnią w iosie pracuje ciężej względu kilka rzeczy po pierwsze xcode porównaniu android studio ubogi podstawowe rzeczy refaktoring otwarcie definicji klasy działa poprawnie wydaje apple poświęca mniejszą uwagę deweloperom tworzącym oprogramowanie platformę google zestaw narzędzi bibliotek ios ograniczony porównaniu javy androida kolejna kwestia taka programiści ios hermetyczne rzadko interesuje dzieje ios jaki stan zastałeś zacząłeś pracę aplikacją kiedy zostałem zatrudniony zespół zastałem znajdował patologicznym stanie obecnie aplikacja gust niskim poziomie a dwóch latach nieustannego ulepszania kodu mozolnej pracy firma zdecydowała wprowadzenie zmian dział it działał nieefektywnie drogi utrzymaniu produkował niskiej jakości aplikacje psuły dział it operował systemie wodospadowym przydzielano ludzi projektów trwających lata rekrutowano bazie znajomości sprawdzenia kompetencji kiedy dołączyłem zespołu wypuszczenie aplikacji play store a trwało trzy miesiące wliczając wszystkie testy dziur dzisiaj zajmuje kilka tygodni a docelowo powinno trwać kilka dni ogólnie rzecz biorąc hierarchiczny model organizacji sprawdza przypadku tworzenia oprogramowania decyzje temat oprogramowania przychodzą góry odrealnienia rzeczywistości z jakich narzędzi korzystacie pracy w androidzie dagger2 rxkotlin retrofit2 picasso androidx livedata wszystkie biblioteki powinny znaleźć w ios gorzej powyższych dependency injection temat istnieje przypadku aplikacji ios sugestia zastosowania rxswift została odrzucona wielokrotnie zespół ogólnie tworzy widoki mvvm klasycznie użycia bibliotek ile osób liczy zespół zajmujący aplikacją zespoły duże sprawia sporo problemów w mniejszym zespole praca pewnością przebiegałaby szybciej osób zespole stanowczo szczególnie każda osoba odmienne zdanie jak rozwijasz umiejętności dbasz ciągle czasie robię kursów udemy pojawi nowa technologia interesuje następnie zasubskrybowany newsletter android weekly ios weekly bieżąco dzieje mojej branży dodatkowo staram pracy wychodzić inicjatywą dodatkowych projektów zwanych poc proof of concept takich projektów pojawia całkiem sporo czyli masz płatną pracę nadal korzystasz kursów udemy oj zdecydowanie z udemy korzystam obecnie ukończonych kursów kilka ukończyłem różnych powodów dla forma nauki udemy najłatwiej przyswajalna instruktora prowadzi rękę krok kroku model biznesowy udemy sprawdza instruktor otrzymać najlepszą ocenę uczniów poświęca więcej uwagi materiały aktualne kurs kompletny inne strony przykład pluralsight model abonamentowy dostępem wszystkiego wiele kursów niekompletnych autorzy motywacji dbać w ostatnim czasie medium stało popularne częściej biorę stamtąd informacje przypadku szukam jakiegoś konkretnego rozwiązania oczywiście programista przetrwałby be stackoverflow znajduje rozwiązanie problemów programistycznych jaki kurs udemy szczególnie polecasz ciężko wytypować konkretnie z mojego doświadczenia wynika kurs oznaczony bestseller pewno tylko spotkałem rozczarowaniem kupnie bestsellera otrzymałem zwrot pieniędzy kupiłem gdzie chciałbyś pracować kilka w jakim chciałbyś podążała twoja kariery jeszcze zdecydowałem będę chciał zostać liderem zespołu programistów będę chciał pracować samodzielnie aplikacją może będę chciał pracować pełni zdalnie konieczności dojeżdżania pracy najprawdopodobniej wrócę kraju zobaczymy sprawy potoczą wymieniłeś trzy potencjalne kariery ciebie byłaby najbardziej rozwijająca każda rozwija innym kierowanie dużym zespołem stanowiłoby największe wyzwanie wiązałoby największym stresem praca domu opcja najbardziej komfortowa miałbym mniejszą motywację rozwijania rafał mańka senior android developer emirates ukończył studia psychologia społeczna swps warszawie potem okazało wykształceniem raczej pracy znajdzie najlepiej byłoby przebranżowić zdecydował nauczyć php język najprostszy zmienił język po miesiącach dostał pracę developer android weblify rok później zatrudnił firmie robi oprogramowanie fakturowanie rynek szwajcarski potem napisał rekruter zapytaniem chciałbym wyjechać emiratów wbrew pozorom kariery programisty testera prosta wszyscy znamy przykładowy przebieg juniora seniora warto wiedzieć wielu programistów dochodząc etapu regulara seniora odczuwa potrzebę zmiany bycia kimś innym tak przypadku moniki wolak pawła miry którymi porozmawialiśmy rozwijaniu swoich firmie ericsson dlaczego zdecydowali zmianę jak wyglądały pierwsze dni nowych rolach komu polecają kariery tego dowiecie rozmowy moniką track flow managerem pawłem pełniącym rolę operative product ownera zanim przejdziemy jaką kariery przebyliście opowiedzcie czym zajmujecie monika od dwóch track flow managerem zakres moich obowiązków ewoluuje momentu przejęcia zależy zmian cały czas zachodzą naszym projekcie organizacji moje obowiązki związane pracą zespołu czuwa pętlami testowymi naszej części produktu celu szybkiego poprawnego połączenia wszystkich modułów końcowy produkt moim zadaniem wspieranie zespołu realizacji zadań wprowadzanie usprawnień sposobie pracy podejmowanie decyzji problematycznych momentach decydowanie zmianach reprezentowanie zespołu podczas spotkań innymi modułami przedstawicielami zespołów developerskich paweł jestem objęciu stanowiska operative product ownera wydarzyło naturalnie prostu nadszedł odpowiedni moment okazja awans w naszym dziale rola bliska klasycznemu product ownerowi scrumie pewnymi dodatkowymi obowiązkami menedżerskimi rola kierownicza kolegami nasz dział odpowiada utrzymanie ulepszanie skryptów continuous integration odpowiadamy przebieg wizualizację procesów testowych jak takim bywa czasami działa użytkownik czasami usprawnić zautomatyzować dodać funkcjonalności zajmuję m in akceptacją zgłaszanych zleceń priorytetyzacją zadań współdecydowaniem używanych technologiach rozwiązaniach koordynacją rozwoju podproduktów a wdrażaniem nowych osób dziale w praktyce praca bardziej ludźmi produktem podprodukt swoją grupę developerów pracujących często zgłaszający prośby zmian potrzebują najpierw porozmawiać zapytać szczegóły techniczne oszacować szanse wdrożenie ryzyko związane funkcja typu spoc single point of contact z pełnionymi was rolami związane umiejętności miękkie w rozwijacie monika bardzo ważna praktyka każdego dnia dowiaduję czegoś nowego potem przydaje pracy obserwowanie innych praca różnymi zespołami każda retrospektywa spotkanie uczestniczyłam a zwykłe rozmowy kawie sposoby rozwijanie umiejętności miękkich teoria podstawą byłam zewnętrznych szkoleniach scrumowych zakończonych certyfikatami professional scrum master i professional scrum product owner i dodatkowo wolnych chwilach czytam artykuły książki typach osobowości należy współpracować paweł zadania organizacyjne wymagają sprawności odwagi przełamywania barier zwykłego mówienia konkretów podejmowania trudnych decyzji uważam umiejętności rozwinąłem wszystkim podczas studiów działając różnych organizacjach w pracy natomiast warto uczestniczyć czynnie spotkaniach zadawać pytania dyskutować argumentować poświęciłem trochę czasu pracy budowanie relacji ludźmi wiesz możesz wyjść współpracownikami przysłowiowe piwo polegać sprawach prywatnych znacznie potem pracuje udzielać feedbacku mniejszym ryzykiem ktoś obrazi monika pół stanowisko scrum mastera testera to znaczy wahałaś zmianą byłaś przekonana rezygnacji pracy testera monika swoją pracę rozpoczęłam tester dziale agile development rozwijaliśmy projekty procesach zwinnych przypadku mojego scrum w tamtym czasie dziale przyjęte roli scrum mastera rolą techniczną powierzanie prowadzenia większości spotkań project product managerami sztokholmu znalezienie równowagi pomiędzy tymi dwoma rolami niezwykle złożone stąd bycie scrum masterem dodatkiem wyzwaniem osoby technicznej uwielbiam wyzwania uczenie nowych rzeczy skorzystałam nadarzającej okazji dzięki mogłam pomagać zmianach zespole rozwinąć umiejętności miękkie podnieść zdolności komunikacyjne języku angielskim dlaczego zainteresowałaś scrumem monika na studiach informatycznych poznałam podstawowe modele procesów produkcji oprogramowania kaskadowy iteracyjny równoległy spiralny niczego dowiedziałam procesach zwinnych w pracy poznałam kanban scrum a lean po poznaniu podstaw scruma postanowiłam poszerzyć doświadczenie chciałam developerów kimś innym i akurat momencie pojawiła możliwość zostania scrum masterem skorzystałam paweł jakiego etapu doszedłeś programista wejście nową rolę spowodowało przestałeś rozwijać zawodzie paweł absolutnie przestałem rozwijać szkoda wszystkich poświęconych przestała główna odpowiedzialność pracy wciąż koduję wolnym czasie chcę wypaść obiegu po trzech latach bycia juniorem regularem zostałem senior developerem awans zbiegł czasie przejęciem funkcji operative product ownera natomiast rozszerzanie obowiązków odpowiedzialności następowało raczej ciągły niezależnie nazwy stanowiska byłeś podobnej sytuacji monika naraz funkcje programisty kogoś zajmuje sprawami organizacyjnymi pamiętasz moment zdecydowałeś skupisz rolach organizacyjnych paweł nie wiem konkretny moment decyzja skupieniu pracy organizacyjnej narastała mniej więcej momentu zostałem opiekunem naszych praktykantów wcieliłem podczas wakacyjnego projektu rolę kogoś rodzaju product ownera scrum mastera minizespół stworzyliśmy praktykantami mały realnie wdrożyć prawdziwego scruma pracowaliśmy sprintach odbywały wszystkie zalecane spotkania powstawały przyrosty zaprezentować większej grupie skupiłem koordynowaniu działań wtrącając nadmiernie kodu z biegiem czasu taka koordynacja potrzebna poziomie pracy naszych zespołów wyewoluowało zapotrzebowanie moją obecną rolę powiedziałeś chwilą chcesz wypaść obiegu programista to znaczy powrót programowania twój backup plan paweł nie zakładam góry poradzę nazywałbym backup planem może prostu pewnym momencie dojdę wniosku chciałbym robić innego wrócić pełnoetatowo programowania późno nie chciałbym odpłynąć całkowicie czystego zarządzania wolę cały czas rozumieć mówią koledzy biurek dookoła wesprzeć technicznie obydwoje mieliście wcześniej doświadczenia programistyczne testerskie przydają pracy monika doświadczenie testerskie ułatwia zrozumienie problemów pomaga estymacji czasu potrzebnego dostarczenie rozwiązania zdarza krytycznych sytuacjach pomagam troubleshootingu w moim przypadku doświadczenie testerskie wiedza techniczna ułatwiają wiele znaczy osoba nietechniczna sprawdziłaby moim stanowisku paweł wiedza programowaniu pewnością przydatna część mojej pracy polega byciu pośrednikiem pomiędzy naszymi interesariuszami a programistami dane rozwiązania wdrażać dobrze rozumieć jednych drugich przekaźnikiem informacji aktywnie uczestniczyć dyskusjach czasem doradzić dorzucić swój punkt widzenia ryzyko głuchego telefonu pewno mniejsze bywa czasem małą pułapką niektórych zadaniach pojawia pokusa zrobić samodzielnie znajduję czas polegać pełnoetatowych developerach technicznych ekspertach przydaje wiedza doświadczenie zakresu szeroko pojętej inżynierii oprogramowania projektowanie rozwiązań podział zadań mniejsze określanie wymagań spełnić dobry kod zapobiec błędom proponowanie ulepszeń opowiedzieliście swojej przygodzie testowaniem programowaniem chwilę zakończyła wejściem role nie macie wrażenia testerka programista mielibyście większy wpływ produkt monika uważam każda osoba pracująca ericsson wpływ produkty czasem pośredni a czasem bezpośredni da zmierzyć tym bardziej porównać dużych projektach jakimi zajmujemy wiem testerka miałabym wpływ produkt obecnie pewno miałabym wyzwań pracując ci paweł jako programiście ciężko zaproponować czego potrafiłem samemu zrobić występowało pewne ograniczenie własną wiedzą doświadczeniem oczywiście kilka pomysłów udało wdrożyć raczej rozwiązania konkretnych problemów jedną zalet funkcji opo składać więcej propozycji rozwiązań dobra produktu wdrażać inni zasadzie umowy programistami chciałbym działało dawało efekty nie wtrącam szczegóły techniczne kod dacie radę wdrożyć skala pomysłów szersza zamyka konkretnym rozwiązaniu kto waszym zdaniem sprawdzi idealnie takiej roli jaką pełnicie roli track and flow managera operative product ownera monika w roli najlepiej poradzi osoba otwarta pełna zapału potrafiąca słuchać szybko reagować potrzeby podejmować konkretne decyzje potrafiąca słuchać zrozumieniem sprawnie odpowiadająca zadane pytania dynamiczna elokwentna pozytywnie nastawiona zmian lubiąca nowości nie mieć zaplecza technicznego widziałam osoba podobnym stanowisku nietechniczna potrafiła problemów prowadzić techniczne dyskusje podejmować właściwe decyzje paweł osoba otwarta nową wiedzę ciągłe zmiany dookoła reagująca szybko sprawnie problemy lubiąca pracę ludźmi akceptująca fakt czasem więcej rozmawiamy kodujemy choćby podstawowy background techniczny pewno potrzebny umiem wyobrazić rozmawiam czymś czym zupełnie pojęcia na pewno przyspiesza podejmowanie decyzji dlatego mojej opinii osoba zupełnie nietechniczna mogłaby poradzić stanowisku potraficie perspektywy czasu określić mogliście szybciej później zmienić stanowisko a zrobilibyście zupełnie monika wyzwania podejmowałam związane doświadczenia pozytywne negatywne doprowadziły pełnię taką a inną rolę ericsson wiem podjęłabym ryzyka związanego przejściem nową rolę podjęcia nowych zadań pewno byłabym track and flow managerem może byłabym product ownerem nadal testerem paweł na początku pracy obecnym dziale trochę przytłaczała ilość nowej wiedzy umiejętności zdobyć stanowić realne programistyczne wzmocnienie zespołu jako junior chciałem prostu programować tworzyć tysiące linijek kodu najlepiej szybko zobaczyć efekt zmian to wiedza studiów nieinformatycznych uczyło inżynierii programowania projektowania architektury a szczegółów składni poszczególnych języków mój kierownik przekonywał wcale polega praca developera perspektywy czasu widzę rację dojrzały programista poświęcić więcej czasu zastanowienie działa a efektem wielodniowej pracy bywa czasami poprawka jednej linijki kodu odpowiadając pytanie chyba mogłem zrobić wcześniej musiałem nabrać odpowiedniego doświadczenia a później mam nadzieję stało odpowiednim momencie czas pokaże co sprawia czerpiecie satysfakcję swojej roli monika nowe wyzwania ludzie którymi pracuję siła napędowa jeśli stałe znane przewidywalne równoznaczne nudą nie lubię stać miejscu do czasu zaczęłam pracę track and flow manager prawie pół zmieniło mojej pracy zaczynałam tester potem podjęłam wyzwanie bycia scrum masterem testerem jednocześnie następnie wyjechałam pół sztokholmu pracować nieznanymi ludźmi po powrocie kraju pracowałam zespole zajmującym frameworkiem testerskim jednocześnie przygotowując prowadząc szkolenia nowej platformie którą projekt przenoszony następne pół znów spędziłam sztokholmie proxy product owner zespołu zajmującego wdrażaniem continuous integration mojego projektu po powrocie krakowa nadal kierowałam zespołem członkami developerzy polski szwecji węgier czasu zmieniło urodzenia synka po powrocie macierzyńskiego oswojeniu zmianami nastały wraz przejęciem ericpola ericsson rozpoczęłam pracę obecnym stanowisku dostarcza wielu wyzwań czynienia ludźmi różnych charakterach doświadczeniach wieku narodowości strefy czasowej to ekscytujące paweł wyznaję zasadę nikogo powinno tajemnicą pracujemy pieniędzy ważny work life balance ale przecież stoi przeszkodzie praca dawała satysfakcję na obecnym stanowisku daje wszystkim praca ludźmi realny wpływ decyzje dotyczące naszych produktów zwiększone obowiązki odpowiedzialność zauważyłem trochę więcej chodzę rozmawiam zamiast siedzieć biurku aspekt zdrowotny najważniejsza stoi miejscu cały czas uczy nowych rzeczy czasami nudna monotonna praca pewnie wygodna chyba monika wolak track and flow manager ericsson magister inżynier informatyki stosowanej wydziale fizyki informatyki stosowanej agh posiada doświadczenie testerskie scrumowe związane prowadzeniem szkoleń obecnie pracuje continuous integration prywatnie tomasza mama trzyletniego mikołaja paweł miry operative product owner ericsson magister inżynier fizyki technicznej wydziale fizyki informatyki stosowanej agh działacz organizacjach studenckich programista języków skryptowych python perl bash w pracy pewien czas pracę developera rolą scrum mastera obowiązkami team leadera podejmuje dodatkowych zadań organizacyjnych w wolnym czasie dba marzenę wspiera młodzież pierwszych krokach programistycznych kolekcjonuje kasety magnetofonowe rzuca siekierami drewniane tarcze w projektach programistycznych nierzadko pracujemy zespołach potrzebujemy komunikować innymi często zdajemy sprawy komunikacja miejsce wypowiemy jednego słowa w artykule chciałem zwrócić uwagę porozumiewanie rozmowy miejsce możemy zrobić najkorzystniejsze naszego zespołu a konsekwencji produktu razem tworzymy sebastian ewak programista pracujący outsourcingu pracował dwudziestu projektach sześciu technologiach od współpracujący firmą nomtek mobile mixed reality developer prywatnie interesuje tematami komunikacji rozwoju osobistego jeździ nartach trenuje kung fu architektura fundament współpracy wybór architektury decyzji ułatwia wręcz automatyzuje podejmowanie wielu kolejnych kiedy umówimy określoną strukturę kodu musimy implementowaniu każdej funkcjonalności nowo zastanawiać omawiać zaprogramować typowy element nawigacja wyświetlanie widoku zmniejsza wysiłek potrzebny zapoznanie kodem pozostałych członków zespołu wiemy ułożone typowe fragmenty implementacji możemy poświęcić większą uwagę rdzeniowi analizowanego rozwiązania dodatkową korzyścią dalsze dyskusje temat struktury kodu bardziej skupione jeśli trafimy implementację pasuje zdefiniowanych architekturę elementów najczęściej rozmowa sprowadza określenia kształt powinien przyjąć brakujący element układanki powinien istniejącymi niektórzy uważają zdefiniowana architektura należy bezwzględnie przestrzegać z moich doświadczeń wynika architektura wręcz powinna ewoluować wraz projektem nie jesteśmy stanie góry przewidzieć zmieniała aplikacja a zasady pomagają rozwijać początku odpowiadają złożoności jaką przychodzi mierzyć kolejnych miesiącach latach prac zmiany rzeczywiście przysłużyły projektowi zadbać dokonywane porozumieniu zespołem celem doboru rozwoju architektury moim zdaniem powinno ustalenie rozwiązania doskonałego istnieje chodzi natomiast uzgodnić podejście zaadresuje typowe problemy da przestrzeń tworzenia kolejnych funkcjonalności wszyscy zespole zaakceptują jeśli późniejszym etapie dostrzeżemy praktyczne wady przyjętego rozwiązania możemy powinniśmy ulepszać warto pamiętać stosunkowo przekształcić jedną formę porządku inną natomiast uporządkowanie chaosu element aplikacji zaimplementowany zupełnie wymaga wiele więcej wysiłku wiąże większym ryzykiem co kodzie piszczy kod komentarze powinny odpowiadać trzy podstawowe pytania korzystać naszego rozwiązania robi zdecydowaliśmy a podejście duplikacja informacji kosztuje sporo czasu wysiłku początku późniejszym utrzymaniu starajmy powtarzać przekazania odpowiedzi każde trzech pytań używajmy jednego narzędzia jeśli chodzi wyjaśnienie robi kod najlepiej posłużyć samym kodem mam myśli zastosowanie znanych porad mówiących dzielić implementację odpowiednio małe fragmenty zrozumiały nazywać funkcje zmienne logicznie grupować porady proste przysparzają trudności kiedy podzielimy rozwiązanie mniejsze części wiedzieć wymagają dalszego podziału czy czytelne nazwy rzeczywiście zrozumiałe innych pomocne wypadkach zadanie pytania dodanie komentarza sprawi zrozumieć robi implementacja jeśli powinniśmy ponownie pochylić formą często znajdziemy poprzez zmianę kodzie uniknąć konieczności pisania tekstu dezaktualizuje na poniższym przykładzie pokażę możemy zwiększyć czytelność rozwiązania pisania dodatkowych komentarzy najpierw postać wymagająca dodatkowych objaśnień patrząc powyższy fragment możemy domyślić wysyła jakiś rodzaj powiadomienia nie natomiast pojęcia treścią powiadomienia kogo adresowane co stanie zmienimy nazwy funkcji zmiennych w drugim przykładzie jesteśmy stanie odczytać notyfikacja kierowana pacjentów zawiera komunikat odwołaniu wizyt dentysty są informacje związane dziedziną naszej aplikacji pomocy autora bylibyśmy stanie domyślić oczywiście samą wiedzę przekazać pomocą komentarzy wiązałoby niepotrzebnie większym kosztem ryzykiem dezaktualizacji komunikatu wydaje główną przyczyną spotykamy kod pierwszego przykładu zwana klątwa wiedzy kiedy piszemy funkcję sendnotification oczywiste wysyła pacjentowi powiadomienie anulowaniu wizyty dentysty a kończy karma kota przecież pracujemy zadaniem td jesteśmy kontekście wyobrażamy ktoś znać a kodzie pracowała inna osoba sami będziemy musieli wrócić dłuższym czasie wiedza taka oczywista bez komentarza skoro pomocą samego kodu jesteśmy stanie wyrazić wiele faktycznie komentarze zbędne niestety najlepszy kod stanie opisać zdecydowaliśmy a rozwiązanie spore znaczenie po pierwsze naszym opisie możemy ująć listę rozwiązań rozważaliśmy zaznaczając ostatecznie wybraliśmy wyobraźmy widok prezentujący kolekcję produktów na górze znajduje nagłówek początku pełną wysokość natomiast przewijamy stronę menu zakotwicza górnej krawędzi zmniejsza postaci cienkiego paska produkty wyświetlane formie wąskich prostokątnych kart odrzucamy kontrolkę listy rozciąga elementy całą szerokość ekranu zamiast postanawiamy użyć tabeli scalamy komórki pierwszym wierszu reprezentował nagłówek karty wyświetlamy pojedyncze komórki poniżej przyczepienie nagłówka krawędzi ekranu okazuje wyzwaniem znajdujemy bibliotekę umożliwia idąc dalej zauważamy tabela reaguje próby zmiany rozmiaru nagłówka przy zmniejszaniu kontrolka pozostawia białą przestrzeń a powiększaniu nagłówek zakrywa elementy znajdujące poniżej z dokumentacji dowiadujemy tabelka wspiera elementy stałych rozmiarach możliwości zmiany zachowania decydujemy napisać własne rozwiązanie podstaw po zaimplementowaniu pozostawiamy komentarz opis wyjaśnia elementy zmiennym rozmiarze tekst odnoszący tabeli informuje rozwiązanie dany dzień wystarczające może api tabeli zostanie wzbogacone funkcje dynamicznej zmiany wielkości elementów mając wiedzę kontrolka została użyta razu osoba utrzymująca kod mogła podjąć decyzję uproszczeniu implementacji dokumentując naszą motywację ułatwiamy podjęcie lepszych decyzji przyszłości informacja dotycząca listy okazać przydatna uzasadnieniem niewykorzystania rozwiązania wymagania biznesowe dotyczące prezentować dane jak każde wymagania czasem ulec zmianie być testach użytkownikami okaże karty powinny prezentować więcej informacji dodatkowa szerokość pomocna implementujący bazie komentarza wnioskować innych przeciwwskazań zastosowania listy zdecydować zastosowaniu czasami wybór nietypowego rozwiązania podyktowany wymaganiami biznesowymi wyobraźmy naszym widoku użytkownicy mieli problem małymi przyciskami wymagały precyzji kliknięciu ponieważ wizualnie rozmiar przycisków porządku podjęta została decyzja powiększeniu interaktywnego obszaru kontrolek wprowadzamy zmianę voilà aplikacja razu staje użyciu po jakimś czasie inna osoba pracuje samym widokiem zauważa grafika przycisku pokrywa obszarem kliknięcia to pewnie bug myśli ktoś zmieniał obrazek zapomniał dostosować obszar interakcji pod naszą nieobecność osoba poprawić błąd razu zgłosić defekt czasem taka poprawka prześlizgnie uwag w stare problemy aplikacji wracają gdybyśmy zostawili komentarz linijce odpowiadającej powiększenie obszaru klikalnego byłoby jasne rozwiązanie celowe działanie innym przypadkiem kod zaskoczyć przeglądającą osobę obejścia stosowane pracy bibliotekami trudnych nowych problemach wróćmy chwilę sytuacji zmieniającym rozmiar nagłówkiem tabelą tym razem elementami komórkach pola formularza użytkownik wpisywać tekst jak okazuje oferuje funkcjonalności automatyczne centrowanie pól tekstowych użytkownik widział wpisywany tekst wspaniale tylko końca funkcjonalność działa prawidłowo założeniach spełnia tabelka elementy stały rozmiar niestety akurat zmieniliśmy zachowanie wymaganie biznesowe sprawdzamy dokumentacji dowiadujemy automatyczne przewijanie zostało uznane podstawowe użyteczne da wyłączyć testujemy różne podejścia zauważamy kontrolka obsługuje przewijanie pomocą elementu suwaka pierwszego hierarchii powyżej pola tekstowego a każde pole tekstowe wyposażyć własny suwak wtedy tabelka przestanie nieprawidłowo przesuwać treść nagłówek zmienia rozmiar udało sami spodziewaliśmy takiego problemu a dopiero rozwiązania a kiedyś zmieni zachowanie systemowe ktoś odziedziczy kod zostawiamy krótki komentarz informujący element formularza połączony własnym suwakiem spowoduje usunięcie jednocześnie dajemy szansę zaimplementowanie lepszego rozwiązania przyszłości api zacznie oferować funkcje przykład wyłączenie automatycznego przewijania obejścia wiążą ryzykiem możemy ograniczać odpowiednio opisując podejście motywację testy kompilowana dokumentacja choć temat testów automatycznych zbadany praktyce nadal przysparza wielu trudności mamy wątpliwości testować jaką strukturę nadać naszym testom kiedy napiszemy czasem okazuje utrzymanie zajmuje ogromne ilości czasu zaczynamy zastanawiać rzeczywiście warte takiej inwestycji cała niepewność trudności pojawiają najbardziej podstawowym poziomie pisania kodu testowego nie dziwić bardziej zaawansowane mniej techniczne zastosowania wsparcie implementacji dokumentacja rzadko wykorzystywane praktyce wynika moim zdaniem dwóch powodów po pierwsze faktu testowanie podobnie programowanie umiejętność którą rozwijać poznanie teorii a następnie ciągłą praktykę nie da dniu czytania książek razu samodzielnie efektywnie pisać użytecznych testów to proces wymaga czasu wysiłku licznych prób błędów drugim powodem moim zdaniem jakąś informację przykład testy dokumentacją naprawdę rozumiemy podświadomym poziomie akceptujemy w przypadku testów problemem odniesieniu bibliotek produktami dokumentację inaczej wewnętrznymi api zazwyczaj posiadają testy dla test kod czytając testy zapoznajemy implementacją prostu robimy a korzystając bibliotek czytamy dokumentację chcemy wiedzieć sprawnie użyć a potrzeby przypadku naszych głowach porównanie test kod zastąpić test dokumentacja jeśli jesteśmy stanie dowiedzieć samego dokumentacji równie szybko warto skorzystać dobrze napisane testy pokazują użyć api różne opcje wpływają zachowanie zareaguje przypadku podania nieprawidłowych danych wejściowych gdy zawiedzie jako ostatni temat pozostała dokumentacja każdy projekt skorzysta jakiejś minimalnej postaci przykład plik readme zawiera informacje przygotować lokalne zbudować aplikację w dużych rozproszonych zespołach wręcz konieczna ciągłe omawianie podejść koncepcji bezpośrednio byłoby zbyt czasochłonne ma znaczące wady dezaktualizuje tendencję puchnięcia a wielu zwyczajnie lubi pisać prozy zminimalizować przypadłości starać ograniczać ilość dokumentacji jaką tworzymy jest możliwe strat wiele celów chcemy osiągnąć pomocą da zrealizować bardziej efektywny standardowe architektury swoją dokumentację systemy zarządzania zależnościami opisują zewnętrzne biblioteki dołączone aplikacji jeśli kod piszemy siebie dokumentuje a dodatkowo potrzebne dodajemy znaczące komentarze końcu całość okraszamy testami ilość dokumentacji jaka pozostaje napisania formie tekstu staje znacząco mniejsza kiedy dokumentacja techniczna zawiera najważniejsze informacje przynależą konfiguracja uruchomienie aplikacji listę zewnętrznych usług korzysta wysokopoziomowy opis rozwiązań używanych wielu miejscach projekcie uzasadnienie obrania konkretnego skali całego przedsięwzięcia opis rozpatrzonych odrzuconych alternatyw tekstu napisania powinno pozostać niewiele dodatkowo możemy ułatwić innym zastępując część tekstu obrazkami długi opis jakiegoś rozwiązania da zastąpić diagramem podobnie zamiast rozpisywać temat jakich warunkach system użyty możemy dołączyć grafiki prezentują docelowe zbliżone jeśli aplikacja przykład usprawnić proces produkcji fabryce zdjęcie cennym wiedzy pierwszy rzut oka widać jakich warunkach użytkownik korzystał czym konkretnie zarządzała no wiecie projekt uznać tako udokumentowany mieć najlepszą architekturę idealnie napisany kod komentarze teksty mickiewicza oczywiście miliony testów tak wdrażając powyższe propozycje zadajcie pytanie pomoże wam danym momencie najbardziej jakich oczekujecie efektów ciągle sprawdzajcie następuje poprawa bądźcie cierpliwi wiele wymaga umiejętności rozwiną czasem nie razu wam udawało chciałbym wspomnieć kwestii dogmatycznego podejścia stylu koniec ktoś internetach napisał proszę traktujcie artykułu broni przeciwko niewiernym psują projekt trzymając wszystkich zasad robi takie zerojedynkowe zamknięte myślenie racji dziedziny bliskie praktyce pogarsza relacje innymi utrudnia współpracę a koniec końców chodzi przecież razem pracowało przyjemniej skuteczniej niech kod wami z maciejem aniserowiczem developerem kilkunastoletnim doświadczeniem znanym wielu interesujących inicjatyw chociażby devstyle podcast devtalk rozmawiamy ciekawym momencie niedługo rusza projekt dna droga nowoczesnego architekta maciej wydawcą pogadaliśmy samym programie zapowiada niezwykle atrakcyjnie problemach związanych rozwojem zawodowym eksperckimi stanowiskami it niektórzy zastanawiają istnieniem a chciałbym zapytać istnieje osiągnięciu magicznego miana senior developera a wyglądać w branży it problem stosunkowo szybko osiągamy magiczny sufit często wystarczy niewiele zdobyć tytuł senior developera zacząć zastanawiać dalej dalsza prowadzić bardziej miękką twardą stronę zwykło nazywać team leader architekt definicji stanowisk wiele dodatkowo obowiązki jednej drugiej pozycji przenikać to pewne warto zatrzymywać senior developerze aktywnie dbać rozwój swój swojej kariery a ktoś widzi siebie umiejętności liderskich końca interesuje architektura jednocześnie pozostać senior developerem są mógłby uznać atrakcyjne względem finansów możliwości rozwoju umiejętności liderskich nauczyć rodzi to wymaga nieco pracy sobą niestety mało wcześniej przygotowywany zrobienia ta mocno charakter pozwala poznać siebie samego stawić czoła własnym strachom nowym wyzwaniom trudne warto natomiast tematy architektoniczne niejako naturalnym kierunkiem twardego rozwoju programisty jeśli kogoś interesuje architektura czas zastanowić inwestuje karierę programisty utarł podział miękkie twarde kompetencje powiązane zawodowe nie wszyscy taką klasyfikacją zgadzają moim zdaniem taka perspektywa realnie oddaje możliwości zdobywania kolejnych umiejętności naszym rynku it co myślisz skróceniu dystansu czasowego dzielącego stanowiska juniorskie seniorskich kiedyś potrzeba kilkunastu dziś standardem staje raczej kilka podczas rekordziści wyrabiają kilkanaście miesięcy czy dobre branży samych developerów ciężko ocenić dobre złe zależy konkretnego przypadku jedna osoba zachłyśnie zacznie zbytnio pysznić inna wykorzysta okazję mądrego pokierowania dalszą karierą na pewno wyzwania należą ja pewnym etapie zastanawiałem przypadkiem ciągu pierwszej dekady swojej kariery osiągnąłem wszystkiego kolejne kilkadziesiąt powtarzaniem samych znanych schematów wspomniałeś mądrym kierowaniu swoją karierą skąd właściwie dowiedzieć robi warto kimś konsultować istnieje ogóle jakiś zbiór uniwersalnych dobrych praktyk istnieją książki napisane osoby eksplorowały różne opcje branży it dzielą swoimi doświadczeniami sam zresztą taką napisałem jednak jednego właściwego podejścia jednej właściwej zawsze zachęcam eksperymentów szukania własnej drogi to daje największą satysfakcję nie namawiam ciągłego niekontrolowanego wyniszczającego rozwoju wszystkich kierunkach według ekstremalnie ważne poznawanie słuchanie samego siebie wybór wyzwań powodujących dyskomfort zabrzmi zbyt górnolotnie zwolennikiem swoim a cudzym najwięcej uczą hartują charakter własne błędy kiedy według ciebie developer staje seniorem o lepszy juniora mida dużo zależy definicji stanowisk warto zastanowić konkretnymi obowiązkami każdym odpowiedzialnością wynikającą posiadanego doświadczenia zaufania senior developer moim zdaniem więcej programista od doświadczonej osoby wymagać twardych miękkich umiejętności kontakt klientem pokierowanie zespołem mądre kwestionowanie wymagań biznesowych udział procesie definiowania zaliczyłbym obowiązków seniora takich umiejętności nabywa latami biorąc udział wielu projektach ucząc błędach często swoich myślę sporo programistów zadawać pytanie wiadomo osiągnęło poziom seniorski czy prostu czuje ostatnio miałem ciekawą rozmowę podczas rozmówca stwierdził seniora poznasz półce książkami tytułów czysto technicznych zaczynają pojawiać pozycje psychologii komunikacji zarządzania coś senior potrafi zaobserwować inaczej podchodzi problemów jakiś czas wcześniej zauważa wzorce powtarzające wyzwania stanie zasugerować rozwiązanie problemu wyciągając wnioski doświadczenia i wszystkim pisanie kodu ostatnich elementów całego procesu niekoniecznie najważniejszy jak należy poprowadzić swoją karierę osiągnięcie stanowiska seniorskiego oznaczało końca rozwoju tak naprawdę trzy przyjęte stopnie rozwoju programisty junior mid senior zubożają postrzeganie programistycznej kariery można dochrapać stanowiska senior developera prostu biorąc udział projekcie określoną liczbę jednak możemy wpaść pułapkę zamiast doświadczenia zdobyć rok powtórzony dziesięciokrotnie warto szukać nowych wyzwań aktualnych projektach zawsze da zrobić lepiej pomóc eksplorowanie nowinek technologicznych zadbanie solidne podstawy naprawdę niewiele zmieniają przestrzeni dekad sporo mówi temat zjawiska wypalenia zawodowego starszych specjalistów it czy wasz program oprócz przekazywania solidnej dawki wiedzy merytorycznej przewiduje zapoznawanie kursantów skutecznymi technikami sprytnymi hackami zapobiec szkolenie dna droga nowoczesnego architekta skupia wiedzy technicznej zapobieganie wypaleniu zawodowemu walka zjawiskiem bardziej obszar psychologii naszych trzech mentorów posiadamy odpowiednich kwalifikacji mam planach realizację miękkiego programu doświadczonych programistów zaproszę eksperta dziedzinie rozmowa tematach wiąże szczególnie dużą odpowiedzialnością jednak najwcześniej przyszłym na skupiamy dna dba solidną techniczną nogę programistycznego rozwoju gdzie powinien szukać pomocy chętny rozwoju senior spełnia wszystkie wymagania zajmowanego stanowiska brakuje naturalnych bodźców rozwoju warto poszukać inspiracji dalszego rozwoju chociażby klasycznych lekturach inżynierii oprogramowania sięgając wstecz niejednokrotnie zgłębienie podstaw opiera cała branża daje zupełnie nową perspektywę wykonywane obowiązki otwiera całkiem nową gamę potencjalnych dróg rozwoju wiele ciekawych opcji pojawi zaczniemy kwestionować założenia przyjęte aktualnych projektach nie chodzi oczywiście wzbudzenie częstej chęci przepisania wszystkiego nowa a raczej poszukiwanie stabilnej długoterminowej drogi rozwoju zarówno naszych systemów swojego w programie dna znaleźć wiele praktycznych wskazówek dotyczących jednego drugiego aspektu ulepszenia projektów poszerzenia swoich horyzontów masz jakieś konkretne tytuły uważasz szczególnie poszerzające horyzonty bardziej autorów na pewno bertrand meyer robert c martin michael feathers martin fowler kent beck eric evans vaughn vernon czy kompleksowy plan rozwoju zawodowego dna uwzględniał indywidualne preferencje uczestników drogi rozwoju agenda dna powstała bazie wieloletnich doświadczeń konsultacyjnych naszych mentorów szydło jakuba pilimona jakuba kubryńskiego oni prowadzą własne duże projekty wspomagają radą dziesiątki innych zespołów tysiące godzin spędzonych kodzie konsultacjach salach szkoleniowych skutkują niesamowicie precyzyjną perspektywą potrzeby rozwoju polskich programistów architektów ci trzej panowie dokładnie wiedzą czego brakuje polskiemu it zaserwujemy dna na szkolenia mentorów dna niejednokrotnie zapisywać rocznym wyprzedzeniem nam chodzi efekt skali wiedzę udostępnić szerzej przy takim podejściu takim rozmachu indywidualne preferencje niemożliwe aspekt zadbamy dna zestaw merytorycznie materiałów szkoleniowych zamknięta społeczność nowoczesnych architektów tam gronie innych podobnych ambitnych specjalistów podyskutować dopytać wszelkie intrygujące kwestie wykraczające przewidzianą agendę dna jak chciałbyś zachęcać potencjalnych uczestników udziału programie dna brakującym ogniwem rozwoju polskich specjalistów it o osoby niewielkim doświadczeniem przebierać materiałach edukacyjnych seniorzy pozostają drogie szkolenia wysokiej ceny wcale prosto załapać program wystartuje wrześniu jesteśmy pewni zapotrzebowanie wiedzę ogromne w czerwcu zrealizowaliśmy przedsprzedaż podczas pokazaliśmy agendę dna zaufanie naszych mentorów wydawcy przekroczyło najśmielsze oczekiwania w ciągu zaledwie dni konta wpłynęły prawie miliony złotych czyni dna ogromnym przedsięwzięciem crowdfundingowym i branży it ogóle historii polskiego biznesu online wiemy komu przydać wasze szkolenie innej beczki kogo dla osób mało doświadczonych aktualnym etapie swojego rozwoju powinny skupiać nauce języków programowania frameworków wzorców projektowych poziomie kodu takie osoby mogłyby poczuć sfrustrowane materiałem my chcemy wypełnić lukę edukacji innym poziomie abstrakcji doświadczonych midów seniorów architektów warto zapisać darmowy cotygodniowy newsletter architektoniczny http droga dev jeśli podsyłane tematy czarna magia oznacza wcześnie dna z jakim wydatkiem liczyć potencjalny uczestnik programu czy przewidziane jakieś udogodnienia dofinansowania system ratalny cena dostępu znana wrześniu uruchomimy nabór dna program kierujemy osób dużym doświadczeniem it kwota fakturze raczej najważniejszym czynnikiem decydującym przystąpieniu bądź szkolenia dna trwało minimum tygodni a osoby zorientowane stawkach szkoleń stacjonarnych pewno pozytywnie zaskoczone nie przewidujemy płatności ratach wielu specjalistom pracodawcy wykupili dostęp korzystając oferty przedsprzedażowej we wrześniu taka możliwość czego zachęcamy więcej osób dziale przejdzie dna lepiej wytwarzanych systemów klientów sam koszt uczestnictwa programie kontekście pomijalny maciej aniserowicz emerytowany programista kilkunastoletnim doświadczeniem autor książki zawód programista kursu gita aktualnie rozwija działalność online blog devstyle podcast devtalk kanał youtube skupia dostarczaniu polskiej społeczności it najwyższej jakości materiałów edukacyjnych klasy premium wydawca dna drogi nowoczesnego architekta prywatnie miłośnik muzyki jazdy samochodem
załóżmy pewną aplikacje którą troszczymy robimy zapewnić najlepszą jakość kodu pokrycie testami jednostkowymi sposobów możemy użyć zabezpieczyć kod błędami dwoimy troimy końcu udaje pokryć kod mamy pewność bug wkradł naszej aplikacji ale pewno antkowiak backend engineer collibra polska od java developer volvo it później pracował software engineer nokii przez lata consultantem firmie infusion od java software developer siili solutions poland a później java senior developer sii poland dwóch prowadzi bloga blog lantkowiak stwórzmy aplikacje którą zadbamy zacznijmy zewnętrznego serwisu będziemy wstrzykiwać naszej klasy teraz stwórzmy główną klasę naszej aplikacji jak widzimy rocket science pobieramy zewnętrznego serwisu liczby a następnie porównujemy jeżeli pierwsza większa odejmujemy drugą otrzymaną liczbę zwracamy wynik w przeciwnym przypadku rezultat zwracamy sumę dwóch pobranych liczb pora przetestować naszą aplikację stwórzmy najpierw pomocniczą klasę implementować interfejs naszego zewnętrznego serwisu i pierwsza metoda testowa w powyższej metodzie testowej sprawdziliśmy pierwszy przypadek sytuację pierwsza pobrana liczba zewnętrznego serwisu większa kolejnej teraz pora drugi przypadek tutaj pokryliśmy drugi przypadek sytuacjęm druga liczba większa pierwszej wygląda pokryliśmy wszystkie branche kod pełni przetestowany wiedzieć dobre testy jednostkowe testy mutacyjne tutaj pomocą przychodzą testy mutacyjne czym to technika polegająca wprowadzaniu małych losowych zmian kodzie naszej aplikacji zmiany powinny zostać wykryte testy jednostkowe jeżeli któraś zmian została wykryta oznacza testy dobre wydawało jakie zmiany poniżej lista przykładowymi zmianami zostać wprowadzone naszym kodzie zmiana granicy warunkach zostanie zmienione itd negacja warunków zostanie zmienione itd usunięcie warunków zastąpienie stałą wartością a b zostanie zmienione true zmiana operacji matematycznych dodawanie zostanie zamienione odejmowanie a mnożenie dzielenie zmiana wartości zmiennych wartości defaultowe stałe int zostanie ustawiony inną losową wartość zwrócenie null zamiast obiektu pominięcie wywołania metody typu void właśnie zapoznaliśmy przykładowymi modyfikacjami zostać wprowadzone aplikacji podczas testów mutacyjnych testy jednostkowe powinny napisane zmiany spowodowały testy przejdą testy mutacyjne praktyce wróćmy naszego kodu napisaliśmy początku spróbujmy przeprowadzić testy mutacyjne z pomocą przyjdzie biblioteka pit konfiguracja konfiguracja uruchomienie pit banalnie proste pierwsze musimy zrobić dodać plugin naszego poma domyślnie wszystkie klasy naszej aplikacji zostaną poddane testom mutacyjnym jeżeli chcemy zmienić możemy skonfigurować pakiety klas testów wzięte uwagę uruchomienie aby przeprowadzić testy mutacyjne wystarczy wywołać następujące polecenie gdy operacja zakończy sukcesem zostanie wygenerowany raport wynikami znajduje następującą target pit reports yyyymmddhhmm zmutujmy aplikację pora wrócić naszej aplikacji wykonać testy mutacyjne po zakończeniu testów otrzymamy wygenerowany raport możemy wyczytać kod pełni pokryty testy jednostkowe line coverage możemy zobaczyć trochę czerwonego koloru pokryciu mutacyjnych testów a możemy domyślać czerwony kolor oznacza dobrego po wklikaniu trochę głębiej będziemy mogli zobaczyć poniższy ekran możemy zobaczyć linia programu wystarczająco przetestowana a poniżej listę mutacji zostały przeprowadzone poszczególnych liniach kodu na zielono zaznaczone mutacje zostały wykryte testy natomiast czerwono mutacje przeżyły testy wychwyciły w naszym przypadku została wychwycona zmiana warunku if ie czyli przypadku został wykryty warunek brzegowy został sprawdzony testach poprawy takim drugi test pokrył warunek brzegowy po modyfikacji mutacje straszne testy mutacyjne przejdą zielono podsumowanie dzisiaj zapoznaliśmy podstawami testów mutacyjnych testy pomóc sprawdzeniu dobre testy jednostkowe sama koncepcja testów mutacyjnych niczym nowym dopiero stosunkowo niedawna używana praktyce testy mutacyjne dosyć kosztowne wymagają sporej czasu procesora przeprowadzić wszystkie kombinacje mutacji dopiero niedawna komputery tyle szybkie robić rozsądnym czasie większość projektów automatyzowane testy aplikacji internetowych wymaga wykonywania skryptów wykorzystaniem różnych przeglądarek manualne zarządzanie konfiguracją wersjami sterowników przeglądarek odpowiednim uruchomieniem testów czasochłonne podatne błędy warto używać narzędzi automatyzujących proces rafał borowiec w branży it przygodę rozpoczynał tester oprogramowania oprócz testowania oprogramowania zapewniania jakości specjalizuje wytwarzaniu oprogramowania zarządzaniu projektami zespołami chętnie dzieli wiedzą prowadzi blog dotyczący programowania wykładowcą trenerem it występuje prelegent wydarzeniach branżowych dotyczących zarówno zapewnienia jakości testowania programowania mechanizmy biblioteki webdrivermanager frameworku junit umożliwiają testowanie różnych przeglądarkach wprowadzania zmian kodzie dzięki automatycznemu dobieraniu odpowiedniego sterownika wykorzystaniu zewnętrznej konfiguracji uruchamiania skuteczność rozwiązań pokażę modyfikując projekt testów aplikacji todomvc wsparcie różnych przeglądarek pory całkowicie manualne kod kod znajduje repozytorium git https gitlab com qalabs blog junit5 selenium todomvc example branchu page objects zmiany opisywane artykule znajdują branchu configuration java kiedy pisałem tekst maju najnowszą dostępną wersją java sdk zaktualizujmy stworzony projekt jak zrobić w celu zmiany wersji java zmodyfikuj plik build gradle zmień wartość właściwości sourcecompatibility dla porządku warto zauważyć java wersją długim okresem wsparcia ang long time support lts a ostatnia wersja lts java tip w problemów upewnij masz swoim systemie operacyjnym zainstalowane java sdk wersji poprawnie skonfigurowane intellij instrukcje konfiguracji weryfikacji znajdziesz naszych wcześniejszych artykułach systemu windows https blog qalabs java przygotowanie srodowiska macos https blog qalabs narzedzia java selenium macos gradle wrapper junit selenium w kolejnym kroku zaktualizujemy gradle wrapper wersji junit wersji selenium wersji ułatwić zadanie przyszłości dokonamy małego usprawnienia pliku build gradle znaczy dodamy właściwości numerami wersji poszczególnych bibliotek następnie wykorzystać podawaniu nazw zależności bloku dependencies w celu pliku build gradle dodaj następujący blok a następnie wykorzystaj utworzone właściwości dalszej części skryptu zastępując numery wersji tip aby powyższa zmiana została zastosowana intellij konieczne odświeżenie konfiguracji projektu podstawowa konfiguracja logowania zanim przejdziemy głównego tematu artykułu znaczy automatycznej konfiguracji uruchomienia testów różnych przeglądarek warto dodać projekcie konfigurację logowania do logowania użyjemy biblioteki logback została zaprojektowana następczyni popularnej biblioteki log4j w celu pliku build gradle dodaj następujące zależności aby skonfigurować logera katalogu src test resources utwórz plik logback xml następującą zawartością powyższa konfiguracja zapewnia logowanie konsoli zwane standardowe wyjście tip więcej temat biblioteki logback konfiguracji dowiesz oficjalnej dokumentacji projektu https logback qos ch zarządzanie sterownikami przeglądarek wykorzystanie webdrivermanager webdrivermanager biblioteka umożliwiająca automatyczne zarządzanie binariami sterowników przeglądarek wymaganymi selenium webdriver dodanie biblioteki webdrivermanager projektu proste znaleźć centralnym repozytorium maven dzieki czemu dodać zależność projektach opartych zarówno maven gradle na początek dodamy odpowiednie wpisy pliku build gradle wykorzystując opisane wyżej podejście umieszczeniem numeru wersji osobnej właściwości aby skorzystać funkcjonalności automatycznego zarządzania należy użyć statycznych metod klasy webdrivermanager pozwalają konfigurację wspieranego bibliotekę sterownika w naszym projekcie podstawową konfigurację przeglądarki potrzeby testów zawiera klasa browser stąd dodamy kod wykorzystujący webdrivermanager ponieważ statyczny blok wykonywany podczas klasy pamięci powyższy kod wykona uruchomieniem testów to rozwiązanie docelowe użyłem szybki nieznacznymi modyfikacjami kodzie wykorzystać webdrivermanager w dalszej części artykułu rozwiązanie zostanie usprawnione uruchomienie testów w miejscu warto sprawdzić wprowadzone zmiany wpłynęły wykonanie testów w celu uruchom testy obserwuj wpisy konsoli a logach powinna pojawić informacja pochodząca klasy webdrivermanager testy wykonują poprawnie chociaż pobierać sterowników instalować ręcznie systemie dba webdrivermanager konfiguracja typu przeglądarki w aktualnym rozwiązaniu zmienić typ przeglądarki wykonywane testy chrome firefox musimy zmodyfikować kod klasie browser uruchomić testy ponownie można znacznie ułatwić zadanie wyeliminować konieczność modyfikacji kodu testów poprzez przekazanie typu przeglądarki parametru konfiguracyjnego uruchomieniu testów typ przeglądarki parametr konfiguracyjny parametry konfiguracyjne pary klucz wartość dostarczymy silnika testów junit pomocą właściwości systemowej jvm niestety gradle aktualnie dostarcza dedykowanego sposobu przekazywanie parametrów silnika testów zatem przekazać bezpośrednio skryptu build gradle aby osiągnąć zmodyfikujemy zadanie test pliku build gradle powyższy kod przekaże silnika testów junit wartość zmiennej systemowej którą pobierze parametru projektu wartość parametru definiowana podczas uruchomienia gradle pomocą parametru p dzięki takiemu rozwiązaniu będziemy mogli uruchomić testy przekazując typ przeglądarki parametr uruchomienia ponieważ zdarzyć wartość parametru zostanie przekazana pomocą zmiennej systemowej przykład podczas uruchomienia testów ide zdefiniujemy wartość domyślną dodając parametr browser pliku src test resources junit platform properties własne rozszerzenie junit tak zdefiniowany parametr wykorzystamy testach pomocą własnego rozszerzenia junit podstawie wartości podanej konfiguracji zainicjuje odpowiedni sterownik chromedriver firefoxdriver udostępni testach istnieje wiele mechanizmów rozszerzeń junit zależności potrzeb między innymi conditional test execution określenie warunków decydujących uruchomieniu testów parameter resolution rozwiązywanie parametrów wstrzykiwanych testów test lifecycle callbacks wpinanie odpowiednie kroki cyklu testu test result processing przetwarzanie rezultatów wykonania testów tworząc rozszerzenie wykorzystamy mechanizm rozwiązywania parametrów zadaniem rozszerzenia utworzenie dostarczenie argumentu typu browser metod beforeeach aftereach klasie testowej rozszerzenie wykorzystywać klasę webdrivermanager dostarczy odpowiedni sterownik przeglądarki klasa pomocnicza webdriverfactory budowanie rozszerzenia rozpoczniemy stworzenia klasy pomocniczej webdriverfactory odpowiedzialna utworzenie obiektu webdriver podstawie wartości parametru browser dostępne wartości parametru wraz odpowiadającymi klasami sterownika góry zdefiniowane mapie drivers utworzenie instancji odpowiedniej klasy realizowane użyciem klasy pomocniczej reflectionutils pochodzącej junit webdriverfactory prostą fabryką używającą realizacji swojego zadania mechanizmów refleksji java klasa browserparameterresolver na właściwe rozszerzenie składać klasa browserparameterresolver wykorzystywać interfejsy zwanego extension api umożliwiającego rozszerzeniom junit definiowanie kodu wykonywanego określonych momentach cyklu testu nasze rozszerzenie implementować interfejsy beforeallcallback parameterresolver aftereachcallback metoda interfejsu beforeallcallback użycie interfejsu beforeallcallback wymaga zaimplementowania metody beforeall zostanie wykonana junit wykonaniem pierwszej metody klasie testowej w naszym przypadku metoda odpowiedzialna konfigurację sterownika właściwego typu przeglądarki jest rozszerzeniem utworzonego wcześniej statycznego inicjalizatora klasy browser należy usunąć wartość parametru konfiguracyjnego określającego typ przeglądarki pobierana zwanego kontekstu rozszerzenia pomocy prywatnej metody getconfigparameter metody interfejsu parameterresolver interfejs parameterresolver służy dynamicznemu rozwiązywaniu parametrów trakcie wykonywania testów w naszym przypadku metoda supportsparameter weryfikuje parametr zostać rozwiązany browserparameterresolver typu browser metoda resolveparameter pobiera natomiast kontekstu rozszerzenia obiekt browser jeżeli obiekt istnieje zostanie utworzony wykorzystaniem wcześniej utworzonej klasy webdriverfactory metoda resolveparameter zostanie wykonana metoda supportsparameterzwróci wartość true metoda interfejsu aftereachcallback metoda aftereach interfejsu aftereachcallback zostanie wykonana każdej metodzie testowej klasie testowej w naszym przypadku metodzie kontekstu rozszerzenia pobierany obiekt browser a następnie wywoływana metoda quit zamykająca przeglądarkę pełna implementacja opisanego wyżej kodu następująca tip więcej rozrzerzeniach junit dowiesz oficjalnej dokumentacji https junit org junit5 docs current user guide extensions użycie rozszerzenia todomvctests w celu wykorzystania nowoutworzonego rozszerzenia należy użyć adnotacji extendwith wskazując typ rozszerzenia kolejnym krokiem usunięcie metody aftereach modyfikacja metody beforeeach metoda beforeeach akceptuje parametr typu browser zostanie dostarczony rozszerzenie browserparameterresolver metoda aftereach została usunięta zamykanie przeglądarki każdej metodzie testowej zostało zaimplementowane rozszerzeniu uruchomienie testów nadszedł czas przetestowanie rozszerzenia w celu uruchom wiersz poleceń katalogu projektu wykonaj polecenie dzięki wprowadzonym usprawnieniom przypadku testy powinny uruchomić przeglądarce firefox a celu użycia innej przeglądarki zmieniać kodzie wystarczy zmienić wartość parametru uruchomienia repozytorium git projektu kod opracowany artykule znajduje repozytorium git https gitlab com qalabs blog junit5 selenium todomvc example branchu configuration warsztat junit selenium webdriver jeśli zainteresowały przedstawione zagadnienia chcesz dowiedzieć znacznie więcej bezpośredniej rozmowie zapraszamy warsztaty automatyzacji testów aplikacji internetowych technologii java użyciem junit selenium webdriver po szczegóły kliknij każdy odrobinę doświadczenia testowaniu oprogramowania a zwłaszcza pisaniu testów automatycznych trudne bliskie niemożliwości uzyskanie stuprocentowego pokrycia kodu testami w teorii da otestować każdą linijkę kodu każdą funkcjonalność każde wejście wyjście wszak lista możliwych przypadków skończona praktyka poparta potrzebami biznesowymi priorytetami sprawia zwykle graalem a osiągnięcie jedną dwunastu prac herkulesa magdalena drechsler nowak software quality assurance engineer altium na dzień zajmuje testowaniem oprogramowania sprawia niemałą frajdę jej droga testowania wprawdzie długa niezbyt prosta możesz przeczytać pierwszym wpisie swoim blogu lubi swoją pracę stopnia zaczyna rozmawiać testowanie odmienia wszystkie przypadki w wolnych chwilach pochłania ogromne ilości książek zwłaszcza literaturę faktu najłatwiej osiągnąć poziom projekcie zaczynamy zera jeżeli początku będziemy brali developmencie testy uwagę skorzystamy dobrodziejstwa tdd będziemy wszelką cenę unikać długu technologicznego istnieje szansa uda utrzymać pokrycie poziomie w teorii brzmi pięknie zwykle natomiast taka projektowa tabula rasa oczekuje rychłego zapisania postaci roi zwrotu inwestycji powoduje silne parcie ukończenie aplikacji a sprzyja powstawaniu długu technologicznego często najbardziej kuszącym rozwiązaniem pominięcie testów odrębną sprawą jakaś część wszystkich rozwijanych aplikacji doświadczenie podpowiada mówimy raczej małym procencie większość miało szczęścia wymarzoną częstotliwością zaczynać zera zwykle dziedziczymy projekty kimś rozwijał uwaga wspomnianym długiem technologicznym aplikacja taka mieć sprzyja fortuna minimalną liczbę testów a czasem mieć wcale romantyczna czasochłonna idea pisania testów zarówno nowego odziedziczonego kodu szybko legnąć gruzach odrzucona kierownika projektu biznes raczej zainteresowany maksymalną koncentracją dodawaniu nowych funkcjonalności refaktoryzacja raczej rozpatrywana kategoriach przykrego obowiązku raczej wisimy krawędzią przepaści cóż pozostaje musimy znaleźć odpowiednią równowagę pomiędzy dodawaniem testów nowych funkcji rozszerzeniem istniejącego zestawu testów drugie sprawi funkcje trudem uzyskają magiczne czegoś zrezygnować i przechodzimy sedna tematu takiej sytuacji rzadko występującej wspomniałam istnieje ryzyko zmarnujemy zasoby czas energię testowanie czegoś przyniesie dostatecznej wartości załóżmy aplikacja sklep elektroniczny przykład codepipes blog w czasie testowania znaleźliśmy błędy użytkownik sprawdzić zawartości swojego koszyka sprawia sprzedaż niemożliwa użytkownik otrzymuje złe rekomendacje podczas przeglądania produktów oba błędy powinny zostać naprawione pierwszy rzut oka widzimy problemów wyższy priorytet wychodząc założenia niejako przewidując pewne problemy możemy wybrać element aplikacji bardziej odpowiedni zautomatyzowania wypadku powinniśmy raczej skupić testach koszyka systemu rekomendacji w skrócie naszą aplikację możemy podzielić trzy części model mentalny zaproponowany codepipes krytyczny kod wpływ użytkowanie aplikacji największy zakresie wprowadzane zmiany najczęściej największą tendencję ujawniania usterek kod podstawowy czasem psuje dostaje kilka nowych funkcji wpływ użytkowników aplikacji pozostały kod rzadko zmieniany najrzadziej otrzymuje funkcje minimalny wpływ użytkowników aplikacji jak wybrać część naszej aplikacji którą powinniśmy pokryć testami wystarczy odpowiedzieć pytanie funkcjonalność którą obecnie testujemy należy kategorii krytycznych podstawowych jeśli warto napisać test jeśli czystym sumieniem możemy skupić innych zadaniach wykorzystać zasoby przyniesie większą wartość projektowi niekoniecznie zakresie automatyzacji pisania przypadków testowych próbując osiągnąć najwyższy poziom pokrycia testami powinniśmy raczej robić stopniowo najpierw osiągnąć mityczne krytycznych funkcjonalności a dopiero wówczas osiągniemy skupić uwagę kodzie niższym stopniu krytyczności testowanie funkcjonalności chybił trafił prostu góry biorąc uwagę priorytetyzacji raczej dużej szansy przyniesienie korzyści artykuł został pierwotnie opublikowany jakosctobedzie gdy nowy klient pojawia firmie zajmuje tworzeniem oprogramowania oznacza zawarcie nowego kontraktu umowa zazwyczaj zakłada stworzenie produktu bądź rozwinięcie modułu w cieniu dostarczanych wartości biznesowych skradają jakość wymagania nierozłączna część umowy dodatkowo produkt dostarczony określonym terminie to sprawia rozpoczyna wielka wojna pomiędzy spełnionymi wymaganiami a czasem aleksander rydzewski lider zespołu dziale badawczo rozwojowym boeing w swojej karierze testerem automatycznym programistą fullstack aplikacjach ułatwiły pracę wielu ludzi w aktualnej pracy zajmuje wyszukiwaniem nowatorskich zastosowań sztucznej inteligencji algorytmów optymalizujących celu poprawienia usług dostarczanych branżę lotniczą prywatnie jeździ snowboardzie interesuje technologicznymi nowinkami kulturą azjatycką po określeniu elementów współpracy klientem zebrany zespół specjalistów zabiera wykonania zadania odbiorca produktu każdej kolejnej wersji nanosi poprawki powaga sytuacji zakłada wykonać czasu następnego spotkania drugiej strony czas zostaje zakończenia projektu niebezpiecznie kurczy programiści zaangażowani projekt pewnym czasie zauważają najprostsze zadania zajmują więcej czasu praca rozbudowanym kodzie zaczyna sprawiać problemy a czas powinien przeznaczony budowanie nowych funkcjonalności rozciąga nieskończoność przynosi rezultatów jakich oczekiwaliśmy znaczy projektu wkradła trucizna powoli uśmierca tworzony produkt czasu ograniczyć rozprzestrzeniania cały projekt legnie gruzach kierownik zespołu trucizna nazywa długiem technologicznym dotyka wszystkich projektów informatycznych właśnie nadszedł czas walkę tą chorobą pytanie brzmi wygra historia dotyka wszystkich projektów nawet najlepszy zespół specjalistów czasem zaczyna odczuwać problem długu technologicznego zbiorem zadań odłożonych później uproszczeń kodzie błędów tworzonych podczas pracy zespołu po pewnym czasie wszyscy programiści zadają pytanie uniknąć powstawania długu technologicznego na pytania postaram odpowiedzieć artykule najważniejsze brzmią czym czym polega wpływ projekt refactoring co wpływa rozprzestrzenianie długu technologicznego projekcie jakie narzędzia metody stosować mierzyć dług technologiczny jak określić pracować funkcjonalnościami a skupić długu czy refactoring potrzebny pracach prototypami refactoring w przedstawionej historii zauważyliśmy dług technologiczny występuje razu pojawia zazwyczaj projekt zwiększa rozmiary a klient zmienia wymagania projektu kolejnych iteracjach dług rozwija przemyślane początku struktury naginane warunków wymaganych klienta nagięcie logiki modułu polega przekształceniu moduł spełniał funkcjonalność jakiej oczekuje jednoczesnym wyrzuceniu najmniejszej możliwej części aktualnego rozwiązania tak stworzona struktura naginana zbyt wprowadzać niepożądany chaos projektu najprostszą metodą pomaga zredukować zagmatwanie kodu refactoring proces polega poprawie konstrukcji kodu celu uzyskania wyższej jakości produktu najczęściej refactoring zmienia kod aplikacji tworząc bardziej przejrzystą zrozumiałą czasem pozwala dodatkowo wprowadzić wyższą wydajność danej funkcjonalności całej aplikacji zadanie trywialne przeanalizowanie dogłębne zrozumienie kodu pochłania wiele godzin programista zaangażowany projekt wnikając wewnętrzne systemu przeglądane dłuższego czasu a analiza ujawnić najgorsze koszmary wewnątrz struktury projektowej poprawnie przeprowadzony refactoring wpłynie pozytywnie poprawę czytelności użyteczności kodu to kolei pozwoli sprawne dodawanie nowych funkcjonalności opóźnień wynikających chaotyczną niestabilną konstrukcję aby pełni szczerym pewna grupa programistów uważa refactoring dotyczy procesu zakończonym zadaniu celu poprawy jakości swojego rozwiązania jest oczywiście część refactoringu jednakże doraźne uporządkowanie kodu w artykule skupiamy procesach większa grupa programistów wykonuje chcąc wszczepić nowy kawałek kodu starego modułu zmieniając strukturę przystosować nowo powstałych wymagań w skrócie artykule skupię pracy polegającej przestawianiu istniejących klocków tworzonego oprogramowania celu sprawniejszej możliwości dodawania nowych elementów z perspektywy klienta płaci tworzenie aplikacji proces refactoringu mieć sensu klient stanie zauważyć zmiany wpływają stabilność konstrukcje projektu niewyjaśniony dostatecznie proces wytwórczy sprawia klient drobne zmiany potrafią wpłynąć negatywnie strukturę niedawno wytworzonego oprogramowania niedostateczne doinformowanie konsekwencjach zmian dodatkowy brak zaufania firmy czasem powoduje spięcia kolei przekładają jakość oprogramowania spięcia powodują popularność technik małych firmach zaniedbywana zaniedbywanie technik porządkują kod ewidentny błąd procesie tworzenia oprogramowania chaotyczny kod powoduje aplikacja którą dostarczamy cechuje niską jakością najdrobniejsze zmiany wprowadzane systemu powodują aplikacja mniej stabilna programiści pracujący projekcie unikać skomplikowania chaosu panującego systemie takim wypadku tworzą obejścia funkcjonalne polega specjaliści istniejącego rozwiązania powielają istniejące klasy metody tworząc indywidualne każdej nowej funkcjonalności to kolei powoduje lawinowe obniżenie jakości projektu sprawia utrzymanie kodu staje niemożliwe tworzony projekt dostarczony klienta dostarczony uniemożliwiający dalszy rozwój gdy projekt rozrasta olbrzymich rozmiarów klient ogniwo wpływa pogłębienie długu technologicznego praca zespołu wypadkach kluczowe znaczenie jakość dostarczanego produktu w przedsięwzięciach wielkości występuje błąd ludzki konsekwencje wyboru narzędzi dodatkowym czynnikiem duża rotacja ludzi negatywnie wpływa jakość produktu niezaznajomieni kodem programiści znając mechanizmów istniejących centrum systemu tworzą kod szkodzi aplikacji aby zredukować wpływ nieznajomości systemu zmiany powinny nadzorowane bardziej doświadczonych specjalistów wybór narzędzi bywa problemem projektach długoterminowych technologie nieustannie zmieniają dostrzegamy lepiej dopasowane zadania narzędzia wady starych rozwiązań w czasie rozwoju produktu niektóre rozwiązania przestają aktualne w takim wypadku należy zadbać zastąpienie nadal rozwijamy produkt aspekty przedstawione powyżej sprawiają refactoring czasie wykonywania przynosi bezpośrednio wartości biznesowej pozwala później obniżać koszta wytwarzania oprogramowania przy długoterminowych projektach olbrzymia przewaga czasowa dodatkowo refactoring wpływa jakość produktu zadowolenie zespołu pracuje kodem niewidocznym efektem ubocznym opisywanego projektu obraz naszej firmy rzetelnego dostawcy oprogramowania dostarcza produkty najwyższej klasy jakości to jakość pomaga utrzymywać dobre znajomości uzyskiwać przyszłe kontrakty wrażenie niezwykle ważne pomimo dobrego pru marketingu firma wybierana pierwszy wybór produkty niskiej jakości dlatego uważam refactoring dbałość szczegóły czynnikami niezwykle istotnymi tworzeniu każdego oprogramowania redukowanie długu technologicznego zaniedbywany dług technologiczny przyjmuje wiele potwornych form a każda równie ciężka przełknięcia zarówno kierownika projektu klienta płaci aby klient mógł zauważyć przeznaczane pieniądze należy odpowiedni zaprezentować problemy tworzeniem nowych funkcjonalności przy okazji należy przygotować plan działania naprawi istniejący stan rzeczy planując pracę refactorowanym kodem celu osiągnięcia czystego oprogramowania należy przeanalizować istniejącą sytuacje może okazać projekt uratowania może zdarzyć projekt zaniedbywany dłuższy czas wprowadzenie poprawek aktualnej struktury skonsumuje więcej pracy programistów poświęcone pory najczęściej sytuacja typu zdarzyć rozwijamy projekt tworzony inną firmę zaniedbywała pracę jakością oprogramowania taki stan powinien zostać wykryty podjęciem współpracy zakomunikowana klientowi podnosząca koszta rozwiązania jeśli sytuacja typu zdarzyła naszej firmie a klient produkt zaniedbywane podstawowe praktyki programistyczne niestety najprawdopodobniej stracimy klienta dodatkowo niefortunna decyzja sprawi klient pewno chciał odzyskać pieniądze nikt lubi wyrzucać pieniędzy kosza jeśli natomiast widzimy możliwość chwilowego pogłębiania długu celu zaobserwowania szerszego wachlarza możliwości sytuacja powinna przedyskutowana klientem klient zwiększonego ryzyka ponosi decydując możliwe zwiększone zyski negatywne konsekwencje wynikające decyzji podjęcie ryzyka okaże problematyczne zaciągnięty dług operacji należy spłacić zmniejszając ryzyko produktu późniejszych etapach to wskazywać czynienia takim systemem indywidualnych każdej funkcjonalności bądź pliki zawierające kilkaset linii kodu modyfikowane każdą zmianą przedstawione systemy zazwyczaj napisać nowa pracować nieuporządkowanym kodem najprawdopodobniej testowany naprawa takiego stanu wiązać dłuższym czasem choćby połową przeznaczonego aktualne rozwiązanie innym problemem zmierzyć czasie doraźnej redukcji długu przestarzała technologia może zdarzyć kluczowe działania systemu biblioteki wspierane zbyt problemów wewnętrznych dalej korzystać w naukowców norweskiej politechniki oslo przeprowadziło badanie grupie pracowników różnych szczebli kariery dużych firmach w skład grupy wchodziły zarówno osoby biorą udział konstruowaniu kodu architekci osoby zajmują kierowaniem projektów dodatkowo trzy firmy bardziej dbały kod zostały przepytane dokładne techniki wykorzystują monitorować zapobiegać powstawaniu długu technologicznego niewątpliwie interesującą rzeczą badanych osób monitoruje długu technologicznego czasu przeznaczonego poprawę co ciekawe badanie pokazuje projektów informatycznych dostarczonych bądź przekracza swojego budżetu osoby zaangażowane projekty uważają oprócz niesprecyzowanych wymagań błędem złe narzędzia monitorowania stanu projektu błędne zarządzanie ryzykiem projekcie brzmi znajomo prawda norweskie badanie sugeruje wszystkich respondentów wplata czas przeznaczony poprawki jakościowe zredukowanie długu technologicznego proces tworzenia oprogramowania osoby brały udział takim badaniu stwierdziły czas przeznaczony poprawki wydłuża czas tworzenia nowych funkcjonalności między a można założyć redukowanie długu wydłuża realizację projektu czasu jednakże projekty czas dłuższy zazwyczaj projekty polegające utrzymaniu produktu dobrej jakości długi czas wplatanie poprawki jakościowej proces tworzenia aplikacji sensownym podejściem pozwala zredukować dług technologiczny nie idealne rozwiązanie czym powiem później testy wykonywanej pracy inżynier powinien mieć czas dogłębne zrozumienie struktury jaką pracuje możliwość wykonania zmiany takim stopniu uszkodzić struktury kodu aby wykonywać cięcia chirurgiczną precyzją potrzebne testy pokrycie kodu testami pozwala poprawiać złożone funkcjonalności obawy uszkodzenie przyspiesza pracę programisty późniejszych terminach pokazuje klienta realizację założeń niefunkcjonalnych odporność systemu błędy użytkowników aby testy wykonywane regularnie należy wzbogacić system kontroli wersji git systemy continuous integration jenkins teamcity każdą zmianą dostarczaną wersji produkcyjnej testują rozwiązanie pomocy testów jednostkowych wydajnościowych dobrą metodyką tworzenia testów tdd test driven development polega stworzeniu testów walidujących nieistniejącą funkcjonalność a następnie zaimplementowaniu funkcjonalności sprawi poszczególne testy wykonają poprawnie podobną technikę stosują testerzy manualni swoich testach tworząc początku scenariusz chcą zrealizować testy wykonywane bardziej naginane uzyskanego rozwiązania nie bądź małostkowy code review inną znaną popularną techniką code review polega umożliwieniu programistom przeglądania dostarczanego kodu pomocą wbudowanych funkcjonalności systemy github gitlab do celu zostały stworzone dedykowane aplikacje fisheye specjaliści zaangażowani projekt powinni mieć czas przejrzeć kod wyprodukowany kolegą zespołu zadecydować zmianach powinny zastosowane dopuszczeniem kodu produkcji moim zdaniem technika wpływająca dodatnio projekt pojedynczą częścią pracuje programista a cała grupa patrząca kod pryzmat swoich umiejętności zapewniając przejrzystość wysoką wydajność dodatkowo technika pozwala uczyć nowych pracowników projekcie funkcjonalności zaszytych systemie bądź wydajniejszych technik dostępnych technologii przy code review czai nieznaczna pułapka należy pamiętać praca projektem patrzeć kod pryzmat przyjaźni kilka razy spotkałem pracą musiała odrzucona podzielona mniejsze kawałki liczba zmian projekcie zbyt duża code review jednego człowieka mimo przyjaźni pracy poświęconej osoby jakość projektu ważniejsza czas spędzony poprawkami z drugiej strony code review należy małostkowym jeśli osoba dziesiąty przegląda kod czepia pociętego kodu traci czas projektowy powodując opóźnienia taka sytuacja powinna przedyskutowana zespole na pewno obecność testów code review czas wpleciony proces tworzenia oprogramowania pomagają redukcji długu technologicznego w wypadku możemy zająć refactoringiem podczas naszej pracy należy pamiętać problemie przyszliśmy danej sekcji aplikacji zdarza poprawki pochłoną zapomnimy problem chcieliśmy zrealizować początku wpleciony refactoring dodatkowo wadę pracownik poświęca czasu dług technologiczny kierownik projektu to prowadzi kolejnego problemu jakim monitorowanie wielkości długu technologicznego monitorowanie wielkości długu technologicznego w poprzednim punkcie przestawiłem czasu konsumuje praca długiem technologicznym jednakże czas szacunkową wersją wydarzeń prezentowaną programistów architektów monitorowali czasu poświęcanego walkę długiem technologicznym zespoły zapytane norweskich naukowców monitorują ilość pozostałego długu technologicznego odpowiedziały zapisują informacje dokumencie excel bądź word naprawdę jestem trochę zażenowany przechowywany intranecie firmy to rozwiązanie zalecane wady którymi możliwość zgubienia pliku ciężka dostępność najprawdopodobniej nikt zagląda sfrustrowanymi programistami inni respondenci odpowiedzieli dużej liczbie projektów występują komentarze todo miejscach należy przeprowadzić refactoring aktualne narzędzia pracy programistów eclipse visualstudio intelij webstorm potrafią monitorować miejsca jednakże technika zalecana techniką wspomagającą jest spowodowane ciężko określić sugeruje kod todo może mały blok kodu równie implikować poprawki plikach wchodzących skład aplikacji inna bardziej doświadczona część respondentów odpowiedziała problemów związanymi długiem technologicznym używana specjalna tablica systemie zadań jira redmine pivotaltracker bądź bugzilla norwescy badacze stwierdzili najlepsza możliwa forma długu technologicznego tablica skonstruowana oddzielnie stosunku realizowanych zadań a zarazem programista poświęca czas uporządkowanie kodu dokładnie wiemy czasu poświęcił zadanie programiści napotykają problemy kodzie problemu tworzyć zadania rozwiązują mniej palące kwestie oprogramowania wskazują zauważone zaszłości systemu zadania powinny wyglądać narzekanie lament temat złej struktury kodu jeśli osoba zespołu widzi problem rozwiązania powinien mieć czas opisanie zasugerowanie mocno spowalnia pracę kolegów bądź systemu względem wydajności spróbować oszacować czasu powinno zająć zadanie tablica taka powinna traktowana kierowników projektów ujście frustracji programistów każdy problem znajdujący liście samoczynnie zniknie każde zadanie listy powinno zrewidowane architekta aplikacji bądź osobę najbardziej zaznajomioną modułem osoba odpowiedzialna weryfikację zgłoszonego zadania powinna przemyśleć sens połączyć zadania odpowiadają element poprawić estmaty następnie zadanie odpowiada jakość kodu a poprawką wydajnościową aplikacji powinno skierowane właściciela bądź kierownika produktu następnie każdej iteracji tworzenia oprogramowania powinien przeznaczony czas poprawek jakościowych zgłoszonych takiej tablicy jest wygodna metoda redukowania długu technologicznego przynajmniej czasu wyjścia nowocześniejszej metody tworzenia aplikacji jaką pracujemy statystyczna analiza kodu inną metodą walki długiem technologicznym testy statyczna analiza kodu statyczna analiza kodu polega przejrzeniu struktury aplikacji ide określenie miejsc funkcje powtarzają warunki pętli szansy wykonać funkcje zmienne wykorzystywane naszej aplikacji taka forma testów pozwala trzymanie kodu dobrej kondycji zaśmiecanie kodu niepotrzebnymi elementami zaciemniają postrzeganie kodu według norweskich badań najczęstszą technologią ide analizy statycznej sonarqube drugą wspomnianą metodą mierzenia wzrastającego długu technologicznego testy metryka pokazująca liczbę błędów wykrywanych testy testerów produkcji momencie pomocna jeśli zauważymy jakimś module liczba błędów narasta a funkcjonalności stworzone zachowaniem najwyższej jakości oznaczać dany moduł mieć problemy stworzoną architekturą którą należałoby zrewidować poprawić celu zmniejszenia powiązań między funkcjonalnościami jeśli będziemy zwracać uwagi narastającą ilość błędów okazać skończymy naszego projektu powiązania błędy przerosną wartość dodaną produktu techniki monitorujące dług technologiczny dodatkową techniką podnoszącą jakość produkcji skomplikowanych systemów audyt jakościowy co pewien okres sprint powinien przeznaczony poprawienie jakości zaobserwowanie miejsc problem architekturą audyt typu stosowany firmie uber został zaprezentowany książce susan j fowler sprawdza doskonale dużych projektach utrzymywane długi czas wiele osób osoby podczas specjalnego spotkania architektem proszone zaprezentowanie rozumieją aktualną strukturę aplikacji modułu działanie wytłumaczenie funkcjonalności modułu uporządkowany zajmuje reguły sporo czasu odbywa indywidualnym spotkaniu zmniejszyć stres pracownika pozwala zaobserwowanie części systemu programiści rozumieją pojawiają obejścia postępuje narastanie długu technologicznego zadanie należy sprawnego architekta zauważy problemy stworzy zadania polegające uproszczeniu konstrukcji bądź zoptymalizowaniu reszta czasu przeznaczonego audyt powinna przeznaczona rozwiązanie typu kwestii to cykliczne wydarzenie dodatni wpływ jakość produktu zespół cyklicznie komunikować problemy zrozumieniem produktu przedstawić wątpliwości niejasnej struktury kodzie podsumowując techniki monitorujące należy zaznaczyć zarówno audyt stworzenie tablicy błędami testy sprawdzają mocno konstrukcja stała niestabilna pozwalają analizę wielkości istniejącego długu technologicznego aby zobaczyć przyszłość ewentualne pogłębienie długu należy zatrudnić sprawnego architekta analizuje aktualną sytuację rynku technologii niestety narzędzie stanie planować architektury lider technologiczny powinien posiadać czas przeanalizowanie nowo pojawiających opcji analiza powinna zawierać czas zaplanowanie prac zmienią produkt używa najnowszych zdobyczy techniki jeśli sytuacja zostanie przeanalizowana zostaniemy dinozaurem przegonionym konkurencję szybciej adaptującą rynku dodatkowo należy nadmienić metoda pozwala wyeliminowanie długu technologicznego całkowicie metody pozwalają redukować dług utrzymywalnego poziomu błędy ludzkie nieustanny rozwój zmiany technologii pozwalają pozostawienie systemu samemu skończyłoby pewno prototypy prototyp początkowa wersja produktu pokazać wartość biznesową pomysłu do pracy prototypem reguły przeznaczona mała grupa ludzi rozwijających oprogramowanie małą skalę stąd nazwa mvp minimum viable product dopiero prototyp pozyska pewno grono zainteresowanych klientów prototyp przekształcany pełnoprawny produkt dodatkowo projektu dostarczeni dodatkowi ludzie ułatwić przynoszenie dodatkowej wartości biznesowej szybszy tego typu podejście opisane książce dan a olsena porównuje zespołu rzuca małymi kamieniami różnych kierunkach nasłuchując kamień trafi ciekawego jeśli kamień pewnym wyda interesujący dźwięk wytaczamy ciężkie działa sprawią osiągniemy satysfakcjonujący efekt mimo tworzenia nowych funkcjonalności należy pamiętać mvp produktem pierwotnych analiz klienci oczekują dlatego pierwszej kolejności należy ustalić wymagania funkcjonalne niefunkcjonalne spełniać produkt pierwsza wersja aplikacji znacząco różni czego oczekiwać prawdziwi użytkownicy systemu często klient płaci produkt zdaje sprawy czego użytkownicy naprawdę chcą dlatego pierwszych wersjach systemu należy skupić tworzeniu kodu możliwie najłatwiej przystosowany zmian zmiany prototypach występują operacje zwane pivotem zmianą pozwalającą lepsze dopasowanie firmy rynku jest naturalne zachowanie startupów w takim momencie systemu wycinane najlepsze elementy odpowiednie algorytmy zdarza prototyp tworzymy ląduje koszu prace zaczynamy początku jest sytuacja podobna przerośniętego długu technologicznego okazuje czas poświęcony poprawki przekroczyłby czas tworzenia nowego systemu przyznanie błędu niewątpliwie ciężkie zaprezentowane odpowiednim momencie potrafi zaoszczędzić pieniędzy firmy klienta dług architekta należy pamiętać stworzyć prototypu wprowadzić produkcję zazwyczaj prototyp powstaje innymi technikami mniejszą skalę prawdziwy produkt z powodu posiada dług technologiczny pozbyć wdrożeniem wielką skalę dług rozmyślnym posunięciem strategicznym dobrze skalowalne rozwiązanie znacznie przekracza czas przeznaczony stworzenie całego prototypu zastosowanie rozwiązania taką skalę kompletnie bezużyteczne jesteśmy pewni wartości biznesowej produktu a efekty testujemy małej grupie użytkowników testach walidacji biznesowej w takim wypadku inteligentny architekt zaciąga dług przyszłości zamiar spłacić niedorzecznym wydaje tworzenie aplikacji cały rynek zainteresowany kulturystyką okazać założenia kompletnie chybione z drugiej strony tworzenie małego prototypu wdrażanie pełną skalę produkcyjną ludzie przekazywać dostęp mało rozsądne ilość użytkowników powinna ustanowiona klientem początku wymagania niefunkcjonalne klient niektóre wymagania zbyt wygórowane specjaliści zadanie rzetelnie poinformować klienta zaistniałej sytuacji przygotować model bezpiecznego wdrożenia systemu rynku system projektowany mniej restrykcyjne wymagania reguły zablokuje dostęp sprawi cała struktura stanie niestabilna pozostawi użytkowników dużą dozą niezadowolenia ludzie reguły niecierpliwymi istotami jeśli technologia którą dostarczyliśmy zacinać niedużo lepsza konkurencji najprawdopodobniej użytkownicy wrócą starych nawyków aplikacji działają natychmiastowo odzyskanie zaufania potrwać długo sprawi najważniejsze początkowe zyski wystarczające przetrwać zachwycić użytkowników należy założyć prototyp małą wersją większej aplikacji należy zredukować wymagania funkcjonalne niefunkcjonalne takiej grupy pozwoli stworzenie aplikacji działającej małym zakresie zaciągnięcie takiego długu zazwyczaj decyzją architekta powinna dotyczyć momentu wzbudzeniem zainteresowania użytkowników podsumowując kiedy skupić długu a funkcjonalnościach dług technologiczny podstępnym efektem ubocznym tworzenia utrzymywania oprogramowania w każdym projekcie miejsce programiści muszą stosować refactoring braku bezpośredniego wpływu wartość biznesową rozwijać projekt terminie zachowaniem wymagań niefunkcjonalnych aby początku szybko walidować idee możemy zaciągać dług technologiczny wykorzystując pewne uproszczenia algorytmów sprawią produkt szybciej zwalidowany biznesowo musimy pamiętać dłuższej perspektywie spłacić dług pracując jakością stworzonego rozwiązania oficjalnym wdrożeniem systemu w dłuższej perspektywie współpracy klientem należy wplatać refactoring czas naszej pracy wykorzystując podstawowe techniki tj code review pokrycie aplikacji testami aby przepalać czasu irytuje klienta móc zaprezentować klientowi wyniki jakimi pracujemy należy monitorować status naszego projektu aby robić efektywnie pory zaprezentowałem stworzenie tablicy problemów zgłaszanych programistów audyt jakościowy pokazujący zrozumienie struktury aplikacji programistów w skład grupy metod wchodzi statyczna analiza kodu pozwala uproszczenie konstrukcji kodu stworzenie bardziej zrozumiałej struktury jeśli potrzebujemy twardych liczb przekonać klienta racji wykonywania refactoringu przedstawiam kilka ostatnich metod policzalnych pomiarów oparciu wyżej wymienione techniki dbanie jakość dostarczanych aplikacji najważniejszym zadaniem zespołów projektowych refactoring pozwala trzymać systemy braku bezpośredniego wpływu wartość biznesową projektu pośrednio proces potrzebny tlen istotom oddychania bez refactoringu uporządkowania entropia tworzonych zmian poprawek rozdarła kod a spędzalibyśmy olbrzymią ilość czasu analizowaniu zagmatwanej logiki aplikacji jeśli kogoś przekonują metryki a bezpośrednia wartość pieniężna wynikająca kosztów operacyjnych znalazłem argument czysto matematyczny w została wydana książka między innymi opisuje kątem finansowym należy wprowadzić refactoring projektu na podstawie książki stworzyłem cztery wzory pomagają ustalić każda iteracja posiada swój koszt utrzymania aktualnego kodu w przypadku książki rok uważam koszt kwartału sprawdza aby wyliczyć koszt iteracji należy policzyć kosztują zmiany błędy powstałe aplikacji pomocą prostego wzoru błędy zmiany wszystkie zmiany powstają procesie tworzenia oprogramowania klienta drugim krokiem obliczenie kosztu pracy refactoringiem zespole pomocą wzoru następnie obliczyć współczynnik przyrostu kosztów aby zrobić skorzystać wzoru dodając siebie koszty utrzymania ostatnich n kwartałach wyliczone wzorem następnie podzielić wartość koszt pierwszego kwartału biorącego udziału pomiarze pomnożony n następnie odjąć wartość wyjdzie wartości otrzymamy znormalizowany przyrostu kosztów utrzymania zazwyczaj równania używa ostatnich kwartałów otrzymać mniej zaburzony wynik możemy dodać więcej miesięcy równania dużo osób zatrzymuje kroku wylicza przyrost kosztów wynosił więcej jeśli wartość miary wynosi więcej korzysta refactoringu są różne uzasadnienia decyzji jedne teorie mówią zysk jakościowy refactoringu czym zgadzam bierze uwagę późniejszej opinii naszej firmie twórcy oprogramowania inna kuriozalna teoria brzmi zebralibyśmy cały koszt utrzymania aplikacji danym kwartale banku lokatę otrzymalibyśmy większy zysk jeśli chcemy klienta oszacować dokładną miarę zysku należy skorzystać wzoru tzn dodać siebie wynik wzoru ostatniej iteracji a następnie odjąć koszt ostatniej iteracji pomnożony współczynnik zysk powinien wyjść walucie którą wyliczyliśmy pozostałe wartości mimo koszt najbardziej poprawny przekonać wiele osób osobiście uważam pomija wiele ważnych cech ryzyko danym momencie utrzymania projektu może okazać kod zagmatwany koszt utrzymania momencie rozpoczęcia pomiaru duży w takim wypadku kolejnych miesiącach koszt zwiększał powinien zawyżony sprawiał kłopotów programistom nawet duże błędy popełnione programistów zmieniać współczynniku inną sprawą fakt wysokim ryzyku uzyskanym podczas tworzenia oprogramowania zdarzyć refactoring zastosowany przewyższa jakiekolwiek koszta produkcji oprogramowania wyliczone estymaty zawierają informacji programiści konsumują czasu zajmując wszczepianiem swoich rozwiązań istniejący system głównym kosztem tworzenia oprogramowania sądzę estymaty pasują bardziej czysto utrzymaniowych zespołów niedużym długiem technologicznym zdarza niezbyt refactoring jedną istotniejszych rzeczy sprawiają produkt potrafi dojść fazy wydania właściwych użytkowników zachęcam monitorowania długu technologicznego proste potrzebne produktu metryki testy liczba zadań wróciła fazy produkcyjnej czas odpowiedzi jeśli pewna metryka zaczyna sprawiać kłopoty przeprowadźmy mały audyt stwórzmy tablicę problemów zlokalizujmy błędy naszym zespołem sprawi niskim kosztem oszczędzimy wielu godzin pracy celu wprowadzenia zmian skomplikowanego testowalnego kodu zaoszczędzony czas przyszłości będziemy mogli wykorzystać tworzenie szybciej cennej wartości biznesowej bibliografia a martini t besker j bosch technical debt tracking current state of practice a survey and multiple case study in large organizations science of computer programming elsevier pp october j verner j sampson and n cerpa what factors lead software project failure second international conference research challenges in information science marrakech pp doi rcis s fowler production ready microservices o reilly media edition december d olsen the lean product playbook how innovate with minimum viable products and rapid customer feedback wiley edition june i mistrik r bahsoon r kazman y zhang economics driven software architecture morgan kaufmann edition july
wyobraź jesteś markecie budowlanym szukasz wałka malowania nie znasz sklepu kierujesz znakami w oddali widzisz duży baner dział budowlany w połowie drogi celu prawej stronie wyłania kolejna wskazówka szyld narzędzia zmieniasz trasę spacerujesz chwilę dostrzegasz alejkę opisaną narzędzia malarskie po chwili udało końcu znalazłeś taki docierania produktów sklepie online odpowiednikiem nawigacji można razu pójść punktu informacji zapytać znajdują wałki malowania to odpowiednik wyszukiwarki damian góra wordpress developer netizens niezależny twórca popularnych wtyczek wordpressa jest zafascynowany ogromną społecznością użytkowników deweloperów skupionych wokół cmsa ze szczególną uwagą przygląda rozwojowi woocommerce a zwolennik technik skutecznego stawiania celów strategii lean software development w branży it gdyby samego wejścia sklepu towarzyszył pracownik zaprowadzi każdego produktu zapytasz a drodze opowie szczegółach byłby odpowiednik wyszukiwarki produktów podpowiedziami ang autocomplete suggestions podpowiedzi usprawniają proces wyszukiwania produktu pojawiają użytkownik zaczyna wpisywać zapytanie pomagają doprecyzować czego szuka proc najbardziej dochodowych sklepów online zaimplementowane podpowiedzi swoich wyszukiwarkach produktów z pozoru prosta funkcjonalność złożona istnieje wiele czynników wpływają skuteczność takiego rozwiązania poznajcie kilka dobry praktyk pozwolą lepiej zrozumieć przydatność podpowiedzi wyszukiwarkach e commerce pierwsza część dotyczy strony wizualnej interakcji użytkownika wyszukiwarką podpowiedziami a drugiej części poruszane zagadnienia związane przetwarzaniem optymalizacją zapytań frontend w niektórych sklepach lepiej sprawdzi nacisk wyszukiwanie podpowiedziami a innych branży modowej lepiej zadziała nacisk optymalizację nawigacji opisany dalej zestaw dobrych praktyk wyjaśnia znaczenie miejsca osadzenia wyszukiwarki form prezentacji podpowiedzi miejsce wygląd umiejscowienie wyszukiwarki zupełnie zmienić podejście użytkowników wyszukiwania produktów sklepie jeżeli głównym sposobem wyszukiwania powinna nawigacja pole wyszukiwania stonowane wyróżnione pole wyszukiwania spowoduje spadek zainteresowania użytkowników nawigacją gdy użytkownicy wiedzą czego chcą katalog produktów duży należy promować korzystanie wyszukiwarki można zrobić manipulując pozycją kontrastem rozmiarem dobrym miejscem wyróżnienia wyszukiwarki obszar górnej części strony miejsce paska nawigacji zwiększenie kontrastu pola wyszukiwania obramówki rozmiaru pozwoli wyróżnić moduł tle innych wyeksponowanie pole wyszukiwania obszar górnej części strony przykładzie sklepu empik com zakres nazwy produktów zbieżne niezależnie kontekstu występują problem dotyczy głównie dużych sklepów w sklepie online empik wpisaniu frazy the beatles wyświetlają podpowiedzi produktów dodatkową informacją kategorii jakiej znajdują ta fraza pasuje niezależnych kategorii przykład wyświetlania dodatkowej informacji kategorii produktu przypadku dana fraza więcej znaczenie w wyszukiwarce empik com fraza the beatles pasuje produktów znajdujących różnych kategoriach częstym rozwiązaniem sklepów produkty podobnych nazwach znajdują wielu kategoriach wyświetlenie dodatkowego pola umożliwiającego zawężenie wyników kategorii głównej użytkownik wpisaniem frazy zawęża wyniki wyszukiwania wybranego działu specialiści ux instytutu baymarda przeprowadzili testy podważają skuteczność ręcznego zawężania wyników wybór kategorii użytkownicy reguły korzystają narzędzia dopiero pierwszym wyszukaniem pojawią zbyt ogólne podpowiedzi o wiele skuteczniejszym narzędziem wyświetlanie informacji zakresie podpowiedzi tym samym zmniejszy liczba czynności dokonać użytkownik znalazł czego szuka dobrze połączyć podejścia brak pasujących podpowiedzi dalej fraza pasuje produktów zupełnie normalne zjawisko w dalszej części artykułu wskazówki zrobić zwiększyć szanse lepsze dopasowanie produktów frazy to kilka dobrych praktyk sytuacji zapytanie zwraca podpowiedzi podstawową najprostszą zmianą zadziała niektórych przypadkach wyświetlenie numeru telefonu działu sprzedaży można wyświetlić kilka fraz zwracających wynik najbardziej pasowałyby zapytania dodatkowo sprawdzić szukana fraza pasuje kategorii wtedy zamiast podpowiedzi produktami wyświetlić pasujące kategorie dobrym pomysłem zaproponowanie produktów fraz aktualnie popularne sklepie dobranie podstawie spersonalizowanych informacji użytkowniku zamiast prostej podpowiedzi brak wyników wyszukiwarka sklepie made com wyświetla popularne produkty popularne frazy kilka linków informacyjnych zanim użytkownik zacznie pisać niektóre sklepy wykorzystują moment użytkownik kliknął pole wyszukiwania zaczął pisać sklep media expert takim przypadku wyświetla spersonalizowane informacje produktach kategoriach markach podstawie historycznych wyszukiwań użytkownika stronie informacje dodatkowe wyświetlane zanim użytkownik zacznie pisać frazę przykład pochodzi sklepu mediaexpert kiedy podpowiedzi nikt lubi zbyt dużego wyboru lepsze efekty osiągnie ustawiając limit podpowiedzi maksymalnie pozycji zbyt duża liczba powodować szum informacyjny użytkownicy zdezorientowani zacząć ignorować podpowiedzi spędzać zbyt czasu analizie podpowiedzi powinny mieścić aktywnym widoku strony częstym błędem wyświetlanie zbyt wielu podpowiedzi przypiętym górnej części ekranu pasku wyszukiwania ang fixed w takim przypadku podpowiedzi zostać przycięte dołu stałe przewijanie ekranu dół rozwiąże problemu problem narasta ostatnią pozycją link zobacz wszystkie warto unikać paska przewijania wewnątrz elementu podpowiedziami wprowadza dodatkową zbędną interakcje użytkownika narzędziem nie nazwa produktu najprostsza najczęściej spotykana forma podpowiedzi sprowadza wyświetlania samych tytułów produktu można spotkać bardziej rozbudowane formy zawierające dodatkowo zdjęcie produktu krótki opis cenę kod produktu kategorię markę cechy ułatwiające dokonanie trafniejszego wyboru nie wszystkie elementy konieczne to zależy specyfiki branży w niektórych użytkownicy szukają głównie kodzie produktu warto poinformować użytkownika pojawiające podpowiedzi związane wpisywaną frazą najczęściej robi poprzez zmianę grubości koloru fonta częściach nazwy produktów zawierają wpisywaną frazę jeżeli nazwą produktu wyświetlane elementy skrócony opis kod produktu warto wyróżnić wspólne frazą fragmenty tekstu w innym przypadku istnieje szansa wyniki pozornie trafne użytkownik straci zaufanie wyszukiwarki może przydarzyć fraza pasowała opisu produktu jeżeli wyświetli fragmentu opisu podświetlaną frazą użytkownik wiedział taka odpowiedź istotna pod maską dobrze zoptymalizowany interfejs wyszukiwarki oparty szybkich istotnych podpowiedziach poniżej kilka dobrych praktyk pomogą zwiększyć konwersję sprzedaży jednocześnie zmniejszając irytację użytkowników podpowiedzi szybsze preloadera czas oczekiwania podpowiedzi powinien mniejszy s w przedziale czasowym wyeliminowane zostaje wrażenie oczekiwania wyniki nie najlepszym akceptowalnym czasem oczekiwania wyniki przedział między a tutaj zauważalna zbędna reakcja interfejsu serwerem czas oczekiwania powyżej niedopuszczalny powodować zagubienie irytację użytkownika jednym najszybszych metod wyszukiwania informacji listy inwersyjne ang inverted index ta metoda pozwala otrzymywać krótkie czasy odpowiedzi zapytania dużych baz danych milionami produktów listy inwersyjne zaimplementowane m in silnikach elasticsearch apache solr w księgarni helion podpowiedzi zapytania php pojawiły milisekundach jest dobry wynik użytkownicy wpisują dokładnych fraz produkt opisać wiele sposobów wpisują użytkownicy wyszukiwarce rezonuje opisem produktu sklepie dysonans spowodowany literówkami fleksją szczególnie uciążliwa języku polskim synonimami inną kolejnością wpisywanych słów używaniem skrótów używaniem pauz kropek spacji innych znaków specjalnych należy przygotować użytkownicy szukać produktów używając słów nikt spodziewa przykład podpowiedzi wyszukiwarki google com frazy prostymi błędami powinny zwracać pustych wyników większość problemów rozwiązać dzięki czemu użytkownicy mogli znaleźć produkty szukają literówki tak długo jesteśmy ludźmi będziemy mylić literówki błędy ortograficzne opanować wdrażając funkcjonalność fuzzy search did you mean fuzzy search pozwala zwrócić relewantne produkty spełniają kryteriów dokładnego dopasowania zbliżone szukaj frazy wykorzystywany m in algorytm levenshteina zwraca liczbę działań dystans wykonać słowa a otrzymać słowo b optymalny dystans wynosi przekształcenia inaczej wyniki będa zbyt przypadkowe przykład działania fuzzy search podpowiedziach wyszukiwarce produktów allegro did you mean wykorzystuje mechanizm fuzzy search w przypadku braku dokładnego dopasowania szuka podobnej frazy zwraca produkty wyświetla podpowiedź typu czy chodziło dokładna fraza w kontekście podpowiedzi wyszukiwarkach produktów rozwiązanie najlepsze wymaga dodatkowego działania użytkownika lepiej razu wyświetlić właściwe produkty pomimo literówki połączyć rozwiązania wyświetlić zarówno poprawną frazę pasujące produkty normalizacja frazy wpisana użytkownika fraza wymaga formatowania w celu używa m in tokenizera rozbija frazę pojedyncze słowa wyrównuje wielkość liter wycina niepotrzebne znaki usuwa słowa stop listy ang stop words pomimo wpisania frazy hp f6v25ae system wyświetlił podpowiedziach odpowiedni tusz nazwie spację zamiast przykład pochodzi mediaexpert dzięki tokenizacji znika problem niewłaściwą kolejnością słów nie znaczenia użytkownik wpisze monitor graficzny graficzny monitor monitor graficzny podpowiedzi powinny same szczególnie przydaje branżach asortyment posiada złożone nazwy elektronika agd w sklepach wpisać więcej słowo zobaczyć bardziej trafne podpowiedzi stemming uwzględnienie fleksji stemming proces zamiany końcówek fleksyjnych pozostawiając temat wyrazu jeżeli zakres wyszukiwania obejmuje opisy produktów duże prawdopodobieństwo same słowa użyte różnych odmianach dąży indeksie wyszukiwawczym zapisać jedną formę wyrazu a podczas wyszukiwania mapować wszelkie odmiany słowa systemy systemowy systemem systemach reszta odmian poddane stemmingowi powinny dać termin system synonimy według instytutu baymarda największych sklepów internetowych proc uwzględniało poprawnie synonimy procesie wyszukiwania wdrożenie synonimów znacznym stopniu zwiększyć konwersję sprzedaży poza słownikowymi synonimami warto zadbać alternatywne terminy wynikające specyfiki branży dobrym przykładem polichlorek winylu oficjalna nazwa pvc pcw powszechnie stosuje niepoprawną nazwę pcv przykład wykorzystania synonimów podpowiedziach wyszukiwarce twojemeble monitoring kluczowym elementem pomoże podjąć słuszne decyzje optymalizacji wyszukiwarki analiza wpisywanych użytkowników fraz zwracanych podpowiedzi wpisywanych fraz pozwala poznać preferencje użytkowników dzięki dobrej analityce odpowiednio zareagować przypadku spory procent wpisywanych fraz wyświetla podpowiedzi podpowiedzi znaczenia proc wyszukiwań dotyczy produktów nie wszyscy użytkownicy wpisują wyszukiwarki nazwy produktów analizując frazy wpisywane użytkowników przygotować zestaw słów związane produktami a należałoby uwzględnić podpowiedziach wynikach wyszukiwania zazwyczaj terminy związane zwrotami reklamacjami anulowaniem zamówienia sztuczna inteligencja nlp w ostatnich latach sztuczna inteligencja ai wkracza większych obszarów człowieka dzięki zautomatyzować usprawnić wiele procesów w systemach wyszukiwania informacji sztuczna inteligencja odgrywa znaczącą rolę pomaga rozpoznawać kontekst wyszukiwania podstawie wpisanej frazy znając lepiej znaczenie frazy motyw historię użytkownika pomaga lepiej dobierać sortować wyniki wyszukiwania interakcja użytkownika wyszukiwarką staje swobodniejsza bardziej naturalna w większości sklepowych wyszukiwarek użytkownik wpisać słowa kluczowe zostały użyte opisania produktu zazwyczaj tytuł opis atrybuty kod produktu lepiej dopasowane wyniki osiągnąć stosując wcześniej opisane zabiegi typu fuzzy search normalizacje stemming synonimy wykorzystanie ai użytkowników zupełnie doświadczenie wyszukiwania przetwarzanie języka naturalnego ang natural language processing nlp sztuczną inteligencję wykorzystuje narzędzie twiggle twórcy twiggle deklarują produkty wyszukiwać używając naturalnej ludzi składni językowej system potrafi przekształcić wpisaną frazę szereg danych osadzonych kontekstach przykład tłumaczenia frazy format json uwzględnieniem kontekstu grafika pochodzi strony https twiggle com search enhancement bardzo trudno budować typu rozwiązania oparciu języki fleksyjne zalicza m in język polski czasy wpisać wyszukiwarki czekolada niskiej zawartości cukru dodatki błękitnej sukienki spodziewać najlepszym możliwych wyników chyba jednym ciekawszych zastosowań ai wyszukiwarkach produktów rozpoznawanie obrazów filmów taką technologię wykorzystuje clarifai clarifai potrafi rozpoznać zdjęć filmów szereg terminów opisują scenografię obiekty nastroje elementy baza terminów zamknięta obecnie zawiera tysięcy fraz frazy dostępne języku polskim w kontekście sugestii produktów wyświetlanych podczas wpisywania frazy ai przydać podpowiadania właściwych produktów mniej literalnych fraz analizując dane informacje użytkownikach wyszukiwania historyczne informacje zamówieniach sezonowość czas lokalizację trendy wyróżnić podpowiedziach produkty najprawdopodobniej zostaną zakupione użytkownika danego wyszukiwania dokąd zmierza e commerce podpowiedzi wyszukiwarkach produktów praktycznym dodatkiem wykorzystać wielu elementów poprawiających konwersję sprzedaży ogólny odbiór sklepu całości jeżeli przygotowane zgodnie dobrymi praktykami dać korzyści razu wdrożeniu prawie wszystkie największe sklepy online polsce posiadają podpowiedzi swoich wyszukiwarkach formy różne niektóre sklepy posiadają proste autouzupełnianie nazw produktów a skomplikowane systemy podpowiedzi zdjęciami opisami cenami innymi informacjami ułatwiającymi użytkownikom dokończenie procesu wyszukiwania interesujące przyglądanie jaką stronę zmierzają systemy wyszukiwania e commerce szczególnie kontekście rozwoju sztucznej inteligencji przetwarzania języka naturalnego
libra kryptowaluta opracowywana zespół facebooka zrobiło głośno koniec maja ujrzy dziennego od początku projekt spotyka licznymi przeciwnościami zaskakuje biorąc uwagę złą passę facebooka trwającą najmniej czasu afery cambridge analytica w najnowszym raporcie kwartalnym firma marka zuckerberga przyznaje wątpliwości wobec własnych kompetencji wymienia zagrożenia pierwsze wątpliwości wątpliwość przyszłości projektu stworzenia kryptowaluty miałby objąć niemal miliarda użytkowników całym została wyrażona raporcie kwartalnym firmy wirtualna waluta miała pozwolić płatności messengerze whatsappie komunikatorach stanowiących część ekosystemu facebooka pojawi rynku jednym głównych oficjalnych powodów takiego posunięcia miałoby niewystarczające doświadczenie firmy zakresie technologii blockchain zła prasa facebooka do pory mogło zdawać głównym zagrożeniem najgłośniejszego projektu facebooka ostatnich miesięcy niechętne nastawienie regulatorów krajowych dużych instytucji finansowych ostatnio pisaliśmy skandalu wybuchł alexander lipton profesor massachusetts institute of technology mit zajmujący matematyką kwestiami związanymi blockchainem wprost zasugerował pomysł librę dużej mierze pochodzi publikacji przygotowanej współpracowników użycie nieuprawnione a wzmianka prawdziwych autorach projektu nigdzie pojawia oprócz zarzucił twórcom libry nieodpowiedzialne podejście kwestii powstania hiperinflacji państwach rozwijających braki kompetencjach największe zagrożenie widzi facebook prezentuje zgoła inaczej co zaskakujące według przedstawicieli giganta technologicznego główną przeszkodą stanąć drodze realizacji ambitnego celu braki kompetencjach własnego zespołu jeśli prawda rzeczywiście trudno spodziewać najbliższym czasie powstanie kryptowaluta spełniająca odpowiednie wymagania skuteczności a wszystkim bezpieczeństwa twórcy przyznają oszacowanie zysków strat okazać problematyczne związku istnieje duże ryzyko inwestycja projekt libra okazać nietrafiona kolejne zagrożenie związane niepewnością materii przepisów dotyczących kryptowalut podlegają ciągłej ewolucji a pamiętać należy facebook musiałby dopasować usługi ustawodawstwa wszystkich krajów miałaby działać libra a przeciwnym zrezygnować części rynków niepewna przyszłość pod koniec maja pisaliśmy premiera libra coin planowana rok niedługo ogłoszeniu wiadomości internecie pojawiła oszukańcza strona oferowała sprzedaż fałszywych walut premierą w omawianym raporcie przedstawiciele facebooka twierdzą póki nadal planują wypuszczenie kryptowaluty przyszłym trudno odnieść wrażenia między wierszami przekazują innego co działa niekorzyść giganta technologicznego kierowanego marka zuckerberga lista zagrożeń projektu wciąż wydłuża z całą pewnością twórcy zdają sprawę pewnym momencie raportu szczerze przyznają nie pewności libra związane produkty usługi zostaną udostępnione zaplanowanym czasie ogóle
jako programiści każdego dnia tworzymy niezliczone ilości kodu testujemy upiększamy a koniec weryfikujemy kolejny spójność niezawodność podczas continuous integration natomiast prawdziwa wartość wykorzystanego rozwiązania sprawdzona drugiego programistę czytając kod zna domenę biznesową firmowe praktyki style guide a zna wprowadza dzień reguły czystego kodu robert duraj programista zespole evojam dzień zajmujący technologiami frontendowymi mobilnymi ewangelista pracy zdalnej asynchronicznej pozwalającej zdrowy work life balance godzinach rycerz jedi chętnie zamienia x winga kawę dobrą książkę największą zaletą sprawdzania kodu drugą osobę fakt posiada zupełnie punkt widzenia naszego w artykule postaram pomóc niezdecydowanym zajrzeć głąb procesu code review czym pomóc codziennej pracy zróbmy review czym dokładnie code review najprościej rzecz ujmując czytanie naszego kodu kogoś innego kropka jedną głównych zasad czystego kodu pisanie inni ludzie mogli zrozumieć cytując martina fowlera byle głupiec potrafi pisać kod zrozumiały komputera dobry programista pisze kod zrozumiały ludzi code review staje zatem pierwszym najbardziej krytycznym krokiem wprowadzenia reguły jeżeli twój kolega zespołu stanie zrozumieć kod został wrzucony repozytorium znaczy poszło w dzisiejszych czasach deweloperzy tysiące różnorakich narzędzi pozwalających przeprowadzenie takiego przeglądu github bitbucket gitlab posiadają specjalne rozwiązania swoich interfejsach pozwalające zmian dodawanie komentarzy konkretnych linii znaków dzięki code review przeprowadzone sprawnie głowami wisi deadline budujemy zespół bazując code review programowanie pracą twórczą taka widziana każdego każdy problem zostać rozwiązany kilka naście różnych sposobów a dodatek poprawny podczas review skupiasz kodzie zmiennych funkcjach sposobie jakim twój kolega podszedł rozwiązywanego zadania zaczynasz patrzeć problem oczami kogoś innego w trakcie code review zaczynasz myśleć problemie nowych kategoriach różnych punktów widzenia konfrontujesz swoim własnym ostatecznie prowadzi dyskusji konkretnymi partiami kodu właśnie ostatni punkt największy wpływ budowanie zespołu pomocą code review wszystkie nieporozumienia wokół kodu zebrane miejscu komentarzach tam możesz jasno wyrazić obawy oczekiwania wątpliwości omówić całym zespołem trakcie developmentu uwaga istnieje duże niebezpieczeństwo podejściu przede wszystkim musisz zachować pełną neutralność swoich komentarzach to twoja prywatna opinia masz prawo wyrażona prywatna opinia dyrektywa ex cathedra nawet jesteś liderem technicznym programistycznym bogiem wszystkim powinieneś szanować swoich kolegów próbują rozwiązać dany problem miej głowie rozwiązując problem podlegali różnym wpływom takim choćby przyzwyczajenia poprzedniej pracy innych technologii najważniejszą cechą podczas przeprowadzania code review pozostawienie otwartego umysłu rozwiązania mając głowie cały czas dobro projektu konsekwentne stosowanie samych reguł wszystkich przypadkach oczywiście wszystkie sugestie rację bytu mówimy rozwiązaniach stricte koncepcyjnych pod względem czystości kodu powinieneś pozostać bezlitosny wszelkich uchybień chcąc rozwijać kulturę przeprowadzania code review zespół stosować powszechnie przyjętych zaakceptowanych wszystkich reguł jednocześnie programista pamiętać code review celu pomóc drugiej osobie powinno odbierane takie podejście buduje silny wspierający zespół solidnymi fundamentami rozwoju rozwijaj ucz nauczaj będąc pisarzem poprawiasz swój warsztat pisząc to oczywiste jednak zanim dotrzesz obserwujesz inni autorzy tworzą książki w kreują postacie planują całe fabuły rozwiązują wątki z takim bagażem wiedzy możesz spróbować robić własny nie kopiując wyciągając esencję doświadczenia przekształcając własne potrzeby ten proces wygląda analogicznie programowania stajesz lepszym programistą pisanie nowych algorytmów całych aplikacji stajesz lepszym programistą czytanie czyjegoś kodu robiąc pasywnie uczysz nowych rozwiązań metodologii zaczynasz myśleć kodowaniu szerszej perspektywy możesz myśleć twój kod perfekcyjny prawdopodobnie nikt krótkiej historii komputeryzacji napisał kawałka perfekcyjnego kodu mało prawdopodobne będziesz pierwszym zrobi andy hunt nie martw tworzenie oprogramowania procesem wszyscy uczymy siebie code review najlepszych narzędzi oferującym zyski obu stron korzysta zarówno programista osoba czytająca kod dzięki możesz dzielić swoją wiedzą doświadczeniem innymi programistami prostu podsuwając niewielkie sugestie usprawnień pozwól komentarze wypadkową twoich najlepszych programistycznych umiejętności komentarze temat testów jednostkowych pomóc twoim kolegom lepiej rozumieć sens tworzenia utrzymywania z drugiej strony twój chaotyczny kod mógłby zrefaktoryzowany pomocą kogoś doświadczeniem metodologii domain driven development te proste przykłady pokazują potężnym narzędziem potrafi code review opierasz czystej chęci pomocy dzielenia wiedzą richard feynman twierdził możemy nauczyć nowych rzeczy poprzez tłumaczenie zagadnień innym najprostszy możliwy rozwijaj ucz nowych metodologii dziel wiedzą dyskutuj kolegami utrzymać bystrość umysłu programistyczne umiejętności najwyższym poziomie rutynowe code review jak zostało powiedziane początku code review systemów wczesnego ostrzegania programowaniu kiedy sprawdzasz czyjś kod dostrzegasz błędów popełniasz każdego dnia jest podstawowych powodów warto namówić zespół wdrożenia regularnego code review dojrzałe zespoły traktują code review codzienny zwyczaj nikt zespołach stanie wyobrazić jakakolwiek zmiana mogłaby zostać wdrożona akceptacji oto kilka podpowiedzi czym warto pamiętać przeprowadzając review bazujących doświadczeniach naszego zespołu im więcej osób lepiej code review przeprowadzane bądź trzy osoby jeżeli projekt danym etapie wystarczająco duży zebrać taką liczbę recenzentów zapraszamy kolegów innych projektów dołączyli nie wymówek prowadzisz projekt samodzielnie rób code review obowiązkowe niezależnie zmiana duża mała znaleźć ktoś rzuci okiem zaakceptuje najlepszym sposobem utrzymać regułę mocy ustawienie wymaganej liczby akceptacji zanim kod możliwy zmerge owania zaplanuj czas review jeżeli zespół duży produkuje kodu sprawdzenia najrozsądniejszym wyjściem przeznaczenie konkretnej części dnia przeprowadzenie code review pozwoli uniknąć rozproszeń utrzymać czystą listę oczekujących pull requestów rób małe zmiany nikt lubi dużych partii kodu sprawdzenia jeżeli planujesz wprowadzić dużą zmianę podziel swoją pracę mniejsze partie wysyłaj review małe pull requesty akceptowane szybciej trzymaj przyjętych zasad bardzo code review sprowadza dostrzegania błędów odnoszących stylu kodu uniknąć warto przyjąć konkretne zasady prowadzenia projektu zespole narzucić wszystkim firmowy style guide dostosować narzędzia odpowiedzialne automatyczne sprawdzanie stylu dzięki prosty utrzymasz porządek jednolitość kodu projekcie potrzeby wspominania review czytaj uważnie code review powoduje odpowiedzialność kod rozproszona bierzesz pełną odpowiedzialność kod zarówno developer recenzent skup uważnym przeczytaniu zrozumieniu czytanego kodu potraktuj swoją rolę poważnie powyższe wskazówki którymi kierujemy naszej codziennej pracy evojam pomóc ci przeprowadzać code review efektywnie nim zaczniesz rewolucję swoim zespole porozmawiaj kolegami razem stwórzcie konkretne zasady którymi będziecie kierować przeprowadzając review mam nadzieję podpowiedzi pomogą ci wprowadzić taką rutynę dobra zespołu projektu problem jednoosobowej armii code review zdaje egzamin przeprowadzane przynajmniej osoby co tworzymy projekt sami mając wokół nikogo mógłby zerknąć wrzucamy repozytorium przede wszystkim powinieneś przestać myśleć swoim kodzie swojej własności nikt zobaczy zawsze istnieje prawdopodobieństwo kiedyś przyjdzie ci podzielić swoim kodem kimś innym nie pozwól byś musiał wstydzić nawet pracujesz powinieneś ignorować code review możesz przeprowadzać wiele różnych sposobów rób code review samemu bierz odpowiedzialność twój kod traktuj napisany kogoś innego sprawdzaj taką samą skrupulatnością jakbyś sprawdzał kod koledze zespołu twórz pull requesty własnymi rozwiązaniami próbuj czytać wielokrotnie rozumieć dokładnie napisałeś problemem podejścia punkt widzenia sprawdzasz własny kod wyłącznie bagażem własnych doświadczeń umiejętności efektywne code review kogoś zupełnie innego wysyłaj małe partie kodu znajomych możesz poprosić zaprzyjaźnionych developerów wolnej chwili spojrzeli twój kod szczególnie ważne części twojej aplikacji upewnić niczego zapomniałeś w celu musisz wcale dzielić całym kodem a niewielką częścią w przypadku wprowadzasz review różne punkty widzenia recenzenci rozumieć końca kontekstu domeny biznesowej mając niewielką wiedzę projekcie publikuj kod stackoverflow stackoverflow serwis odpowiedziami każde możliwe pytanie programistyczne miejsce pokazania swojego kodu celu przeprowadzenia review możesz pewien ktoś odpowie twoją prośbę kilka minut problem rozwiązaniem podobny poprzedniego punktu niewielka kontekstu biznesowego jak widzisz przeprowadzanie code review jednoosobowym zespole czymś niewykonalnym jakkolwiek każda opcji jakieś słabe strony nie powinno ciebie powodem całkowitej rezygnacji dyskutowania swoim kodzie innymi developerami podsumowanie praktykowanie code review popycha twój zespół ciągłego uczenia dzielenia wiedzą innymi buduje kulturę rozwoju wzrostu kompetencji przy odpowiednim nastawieniu sposobie komunikowania buduje solidne relacje zawodowe code review oferuje zalet stosunkowo niskim koszcie zachęcam przekonać praktyce otworzyć nową furtkę rozwoju swojego zespołu wprowadzając code review waszej codziennej programistycznej rutyny jeżeli wykonywanie obecnego zawodu sprawia ci satysfakcji wydaje ci zarabiasz zbyt mało artykuł cię zainteresować postaram najlepszy możliwy opisać skutecznie możesz przebranżowić programistę nie wymaga nakładu finansowego podejmowania studiów informatycznych w większości przypadków wystarczy systematyczna praca przebranżowienie programistę zasięgu ręki odpowiednim podejściem powinno zająć ci dłużej rok karol trybulec software engineer hsbc w ukończył technikum informatyczne w uzyskał tytuł magistra inżyniera wydziale mechanicznym politechniki krakowskiej informatyka specjalizacją inżynieria oprogramowania interesuje informatyką pojęciu ogólnym szczególności programowaniem c c c net elementy assemblera tworzeniem aplikacji internetowych xhtml html css sass sql javascript jquery angular2 asp net mvc net core node js zabezpieczeniami komputerowymi dlaczego warto przebranżowić jeżeli ktoś lubi pracę biurową praca programisty wydaje idealna programowanie potrafi pracą bezstresową dającą jednocześnie ogromną satysfakcję jest zawód naddający kobiet paradoksalnie kobiet it mało szczególnie stanowiskach typowo programistycznych szereg benefitów większość firm działających obszarze it przeważnie naprawdę dochodowe biznesy biura sprzęt całe pracy dzięki doinwestowane wysokim poziomie pracownicy firm it praktycznie posiadają szereg benefitów próżno szukać indziej są m in darmowe owoce kawa herbata znajduje kuchni pokoje relaksu prywatna opieka zdrowotna wysokie permie darmowe szkolenia sprzęt wysokiej jakości ergonomiczne krzesła klimatyzowane biura możliwość podróży wiele innych czasem porównuję miejsca szkół praca nauczyciela przychodni szpitali praca lekarza tam odpadają płytki a człowiek siedzi starym drewnianym taborecie wtedy stwierdzam ciężko dobre warunki pracy gdziekolwiek indziej it dodatkowo większości firm obowiązują elastyczne godziny pracy naprawdę wygodnie godzić zawodowe różnymi obowiązkami po zdobyciu odpowiedniego doświadczenia pracować zdalnie domu niesamowitym dodatkowym atutem wysokie zarobki zawód programisty obecnych czasach zawodem płatnym według agencji sedlak sedlak mediana zarobków młodszego programisty brutto a eksperta brutto statystyki r wydaje dużych miastach sprzyjających okolicznościach odpowiednie technologie wynagrodzenie potrafi znacznie większe można całą pewnością przyznać zarobków naszym kraju da osiągnąć innym zawodzie jednoczesnym małym progu wejścia branży proces przebranżowienia ostatnio pomagałem przebranżowić mojej dziewczynie tak wielu innych ludzi polsce stwierdziła pomimo posiadania technicznego wykształcenia wyższego stanie znaleźć pracy naszym kraju korzystając własnego doświadczenia wniosków rozmów innymi programistami starałem znaleźć optymalną przebranżowienia poniżej opiszę prostych krokach krok wybierz obszar programowanie zbyt duże rozległe uczyć wszystkiego musisz zdecydować pewną wąską dziedzinę zaczniesz szkolić przede wszystkim powinien wybór pomiędzy front endem a back endem czym różni drugiego opisałem innym wpisie nazwie nauczyć programowania pokrótce dodam szybciej dasz radę nauczyć front endu aby opanować front end będziesz potrzebował mniej wiedzy teoretycznej it wybór powinien podyktowany twoimi predyspozycjami decydując front end fajnie mieć jakieś poczucie estetyki z kolei programista back endu powinien mieć predyspozycje analitycznego myślenia powyższej przedstawiłem przykładowe zestawy technologii musisz umieć celując dany zawód są przykłady istnieje wiele więcej stanowisk wszystkie przedstawione przeze zestawy ang technology stacks dotyczą wytwarzania aplikacji internetowych wydaje obecnych czasach lepiej celować aplikacje internetowe ang web applications aplikacje okienkowe ang desktop applications trend obecnie firmy przenoszą chmur internetu zdecydowanie odradzam natomiast język c język niskiego poziomu obecnie niszowy nietypowych zastosowań nie naddaje kogo przebranżowić raczej specjalistów branży nie polecałbym php visual basica pascala języków funkcyjnych chyba wiesz celujesz jakiegoś powodu ci potrzebne krok ustal czasu poświęcisz naukę moim skromnym zdaniem jesteś stanie przebranżowić okresie miesięcy celujesz wąską dziedzinę jedną konkretną technologię język nauka programowania trudna chińskie znaki im więcej będziesz bardziej zacznie sklejać jedną logiczną całość jeżeli myślisz przebranżowieniu programistę poważnie obierz strategię nauki nauka dziennie oprócz weekendów idealne rozwiązanie pracujesz możesz pozwolić pracować daj siebie podczas nauki programowania siedź cały dzień jakbyś wykonywał jakieś obowiązki pracy po nauki chcę ci uczyć czy samo powiedziałbyś pracy nauka pracy weekendy bądź naprawdę ciężkie a nauka zajmie ci wiele dłużej sam pracę pełny etat programowanie studiami uczelni trybie dziennym politechnika krakowska trwało lata chwilami byłem zmuszony przeskakiwać etatu a mieszkaniu całymi dnami taki tryb służy nauce jeżeli masz taką możliwość ucz programowania całymi dnami gwarantuję ci sukces jeżeli musisz pracować wiedz zajmie ci razy dłużej drodze zniechęcisz nawet obiecasz systematyczną naukę pracy oszukasz zmęczenia wydłużysz doby powyższa infografika trywialna obrazuje ciężko znaleźć czas naukę innymi obowiązkami wypełnianie czasu wolnego nauką weekendy oczywiście da ci dodatkowy czas spędzony przyswajaniu wiedzy jednocześnie działać zniechęcająco dłuższą metę wyciągnąć wnioski szacujmy nauka programowania pierwszym przypadku zajmie ci miesięcy naukę pracą zajmie ci miesięcy a odliczysz weekendy prawie lata jakiejkolwiek drogi byś wybrał postaw systematyczność ustal grafik wszelką cenę staraj przestrzegać systematyczność ważna nauce programowania a odrywając tematyki dni prawdopodobnie zapomnisz czego uczyłeś kilka dni jeżeli sądzisz szacowanie miesięcy realne weź uwagę nieważne jakąkolwiek liczbę wymyślisz chodzi raczej liniową zależność wydłużającego okresu nauki a konkretną liczbę dokładnością miesięcy krok wiedzy jeżeli wybrałeś konkretną technologię przyjąłeś jakąś strategię nauki zastanów będziesz czerpał wiedzę decydując naukę programowania musisz umieć uczyć nie innej możliwości zdecydowanie zawód programisty zdecydowanie ciągłą systematyczną naukę poszerzanie swojej wiedzy gdybym zdefiniować programowanie komuś zielonego pojęcia powiedziałbym skuteczność jaką potrafisz rozwiązywać problemy ang problem solving użyciem internetu ogólnodostępnych narzędzi języków programowania nikt broni ci używać internetu szukać gotowych rozwiązań czegoś umiesz problemem problem zaczyna czegoś umiesz a dodatkowo masz zielonego pojęcia znaleźć rozwiązanie moim skromnym zdaniem szkoły programowania strata czasu niezastąpionymi wiedzy natomiast książki danej technologii języku filmy postaci kursów artykuły dostępne internecie dlaczego szkoły programowania przede wszystkim drogie po drugie kurs wcześniej później kończy a ty znowu wracasz punktu wyjścia musisz nauczyć uczyć samemu wykładowca poświęci ci całego swojego czasu a dodatek każdej szkole występować duże nierówności grupie pieniądze przeznaczyłbyś szkołę programowania proponuję ci wydać książki kursy wideo uwierz słowo działy programowaniu rozumie pierwszym przeczytaniu są osobiście wracam kilka miesięcy każdą rozmową rekrutacyjną a później znowu zapominam działało taka zaleta książki kursu wideo możesz wiele razy wrócić możesz czytać tyle razy zrozumiesz krok naucz systemu kontroli wersji git system kontroli wersji absolutna podstawa każdego rozpocząć przygodę programowaniem co typowy projekt programistyczny trwa tygodni kilkunastu miesięcy przeważnie projektem pracuje programistów zdarzają duże systemy którymi pracują dziesiątki programistów wiele czy wyobrażasz ciężko integrować sobą pracę wielu ludzi programiści nieświadomie nawzajem usuwają psują własne istniejące fragmenty kodu często dopisując nową funkcjonalność przypadkowo dotykają funkcjonalności którą zrobił wcześniej ktoś takie integracje dużych ilości kodu postaci zwykłego tekstu integrować sobą jakimś narzędziem właśnie służą systemy kontroli wersji oprócz systemy kontroli wersji zapewniają wersjonowanie wspierają przenoszenie kodu pomiędzy komputerami dodatkowo stanowią zabezpieczenie istniejącego kodu utratą powodu awarii dysku twardego generalnie rzecz biorąc narzędzie niezbędne codziennej pracy nieważne będziesz młodszym starszym programistą najpopularniejszym programem kontroli wersji git można obsługiwać zarówno linii poleceń polecam graficznymi programami możesz zainstalować systemie windows warto założyć konto systemie github com darmo tworzyć własne projekty przechowywać kod oprócz możesz działanie gita rozpoczęciem pracy programisty jeżeli chcesz przebranżowić programistę powinieneś stworzyć własne repozytorium kodu systemie github com wrzucić kilka swoich projektów następnie opis projektów powinieneś dołączyć swojego cv wraz linkiem repozytorium szukając pracy junior programista ktoś sprawdzi twoje programy a pozwoli poznać twoje umiejętności krok zbuduj portfolio projektów ten punkt trochę powiązany poprzednim zbudować portfolio projektów musisz umieć jakiś system kontroli wersji nie zastanawiaj innym oprócz gita jest sprawa niezwykle ważna posiadasz doświadczenia wykształcenia informatycznego w takim wypadku portfolio własnych projektów absolutny must have pozwoli ci wejść branży it nie wyobrażam jakiej zasadzie miałoby odbywać przyjęcie kandydata ukończył studiów it doświadczenia pracy stanowisku programisty własne proste projekty idealna informacja pracodawcy umiesz programować jakiejś technologii umiesz system kontroli wersji pracy będziesz korzystał dnia pierwszy dzień podłączenie komputera przebranżowienie zmianę zawodu traktujesz poważnie podchodzisz profesjonalnie sam poszukiwaniem pierwszej pracy oczywiście posiadałem portfolio własnych projektów jednak oprócz projektów pomógł swój blog studia it znajomość wielu technologii interesowałem programowaniem dziecka gdy byłem mały nikt doradził projekty umieścić githubie szkoda zrobiłem co ciekawe pytania gita podstawową obsługę zostały zadane mojej pierwszej rozmowie pracę studiów krok przygotowanie teoretyczne rozmowy jeżeli umiesz jakąś technologię podstawowym zakresie posiadasz kilka małych projektów czas zainteresowanie teorią niestety rozmowa rekrutacyjna większości przypadków przepytanie kandydata teorii w przypadków zadawane pytania dotyczyć danego języka technologii programistą jesteś jak przygotować etapu twoje powodzenie zależy oczywiście stopnia jakim przyswoiłeś dany język programowania pytań rozmowy rekrutacyjne wyszukuj internecie hasłami java interview questions znajdziesz naprawdę użytecznych informacji te pytania umieszczane razem odpowiedziami będzie ciebie dodatkowej wiedzy szansa pewne uporządkowanie niejasności jak rozłożyć czasie wszystkie powyższe kroki idealnie byłoby gdybyś posiadał kogoś znajomego umie programować mógłby odpowiadać wszelkie twoje niejasności z takiej opcji skorzystała dziewczyna wydaje nauka programowania przyśpieszyła kosmicznym tempie zacząłem tłumaczyć pewne mechanizmy pomocą historyjek codziennego przyznajmy wprost nauczycielem znam odpowiedniej metodyki nauki programowania tylko biorąc uwagę szybkość rozwoju branży taka ogóle istnieje wraz moją dziewczyną przyjęliśmy następujący plan nauki aż chwili obecnej sprawdza idealnie mogę powiedzieć obecnie znajdujemy wspólnie końcowym etapie jako doświadczony programista wydaje przebranżowienie przebiegło pomyślnie miesiące czy rzeczywiście stało zweryfikują prawdopodobnie zbliżające rozmowy rekrutacyjne czy przebranżowienie programistę moim daniem czasach idealnych zostawić swój dotychczasowy zawód zabrać programowanie wynika małego progu wejścia zawodu kolei spowodowany ogromnym deficytem pracowników jeżeli chcesz zostać programistą najlepiej zacznij myśleć być kilka kilkadziesiąt trend rynku it odwróci a dostanie branży opłacalne artykuł został pierwotnie opublikowany p programowanie
pracować mniej wyższej płaszczyźnie tj zamiast tworzyć kod opracowywać strategie tworzyć architektury optymalizować firmę lider cel najbliższe lata pawła komarnickiego zaprosiliśmy rozmowy opowiedział pracownika sklepu został grafikiem później freelancerem web developerem runtastic większość swojej kariery zawodowej spędził linz otworzył swoją firmę po programista takim doświadczeniem zakłada własną firmę przecież seniorzy tyle zarabiają dobry programista berlinie liczyć dobre zarobki tysięcy eur rocznie więcej trybikiem maszynie a decyzje dotyczące produktu przykład rozwiązania techniczne podejmowane product ownerów osoby samym szczycie hierarchii przez tworzyłem produkty zera pewnym momencie dotarło chciałbym oprócz tworzenia samego kodu mieć większy wpływ projekt kierunek podejmowane decyzje osobną sprawą spora rotacja pracowników startupach chciałbym pewnym momencie mieć swój własny stały zespół pracowałby oparciu wspólne wartości jakie wartości pomysł scalały zespół pracując startupach zbyt wiele widziałem pełen przekrój tworzonych kultur zarówno miejscach wspominam koszmar wobec czuję sentyment którymi staram inspirować w mojej firmie chciałbym opierać szczerości ludzie szczerzy wiele problemów zostaje rozwiązanych zanim naprawdę staną problemami nikt czuje obrażony odsunięty zignorowany chciałbym stworzyć przyjazne rozwoju profesjonalnego osobistego wiele firm którymi miałem styczność idzie celu trupach a pierwszymi ofiarami takiej polityki pracownicy chciałbym firma tworzyła pozytywne emocje zyskamy wszyscy wspomniałeś dobrej przyszłości czym ciebie jest zdecydowanie przyszłość muszę martwić miesiąc kwartał rok zespół firma sprawnie działać zarabiać siebie aktualnie dążę stworzenia projektów firm stanowić pasywny przychód tj będę musiał spędzać całego mojego czasu pracy a będę cto prezes nadawał kierunek planował wspierał zespół doradca myślisz własna firma najlepsza droga samorozwoju tak od początku mojej kariery interesowałem wszystkimi aspektami tworzenia cyfrowych produktów designu user experience programowanie copywritingu fotografii jeden moich szefów powiedział zbyt wiele umiejętności siedzieć godzin dziennie pisać kod miał rację praca korporacji daje poczucie bezpieczeństwa potrafi zdusić kreatywność własna firma złotym czym przekonałem całkiem niedawno pracując siebie nagle horyzoncie pojawiły tematy księgowość aspekty prawne gdpr umowy negocjacje itp którymi pracownik musiałem martwić zakładając własną firmę liczyć godzin pracy biurku a zaskakująco duży kawałek dnia zajmą formalności marketing nawiązywanie kontaktów opowiedz drodze jaką przebyłeś podjęcia decyzji otwarciu własnej firmy czym zajmowałeś pierwszej pracy formalnie zanim rozpocząłem studia moją pierwszą pracą wykładanie owoców warzyw hipermarkecie wytrzymałem dni czasie udało znaleźć pierwszą branżową pracę grafik animator małej agencji reklamowej była raptem piątka a zakres usług oscylował pomiędzy tworzeniem małych serwisów grafiką druku tworzeniem wyklejanych kasetonów sklepów jakie doświadczenia wyniosłeś pracy była mała firma miałem okazję zobaczyć wygląda rynek reklamy praniu różni względem obraz miałem głowie nastolatek jedną najważniejszych rzeczy nauczyłem pracując takim konsekwentne komunikowanie postępów elastyczność zespół pracował próżni musieliśmy komunikować klientami mieli plany z powodu istotne efektywne komunikowanie wymagań postępów prac uniknąć pomyłek typu kaseton wyklejony czerwono a pomarańczowo czasami zmienić priorytety biegu pracować presją był dobry trening radzenia zadaniami w międzyczasie udzielałeś forach pomagałeś innym pisać lepszy kod pamiętasz jakiś ciekawy problem rozwiązanie przyniosło tobie satysfakcję moim konikiem tamtym okresie udzielanie rad temat optymalizacji kodu html tworzenia czystych lekkich serwisów użyciem html5 css javascript w ramach kontekstu czas google zaawansowane większość serwisów internetowych robionych flashu a tematyka seo sem powijakach do większość serwisów tworzona tabele rzecz pomyślenia niestety pamiętam szczegółów było prostu wspieranie programistów tworzeniu lżejszych nowocześniejszych serwisów a sprawianie bardziej czytelnie przyjazne crawlerów google w postanowiłeś przenieść austrii pracować runtastic jak przebiegał proces rekrutacyjny do pory potrafię ułożyć głowie stało wylądowałem austrii po zakończeniu studiów otworzyłem działalność polsce móc księgować usługi pory wykonywałem student moich klientów tworzenie serwisów obsługa serwerów itp niestety szło zbyt płynnie byłem niedostatecznie doświadczony mógł wprowadzić produkt rynek ponadto rynek pracy programistów ruby tamtym okresie praktycznie istniał na palcach jednej ręki mogłem policzyć firmy używające ruby rails dodatek rozsiane całej polsce ofertę pracy runtastic znalazłem polskim forum ruby rails angielsku napisałem zaczepnie wiadomość cała machina jakoś ruszyła mieliśmy wideorozmowy czym zostałem zatrudniony zaproszony przeprowadzki były trochę czasy nikt wymagał ode tworzenia prac domowych zdawania testów udowadniania umiem programować wystarczyła rozmowa jaki stan aplikacji zastałeś zmiany udało tobie wprowadzić runtastic całkiem dobrym stanie dołączyłem zespołu potrzebna wiedza doświadczenie migracją ruby rails ruby rails część starego kodu działała wymagała refaktoryzacji warto pamiętać początki istnienia platformy ponieważ miałem doświadczenie dziedzinie a oferowałem wiele innych umiejętności byłem doskonałym kandydatem oprócz pracy backendem miałem okazję stworzyć pierwszą wersję kalendarza nowej wersji serwisu z wiem dobre kilka miesięcy moim odejściu kod stanowił trzon internetowej wersji produktu dlaczego odszedłeś firmy wydawała idealnym miejscem ciebie byłem zadowolony pracy runtastic austrii powodów podatkowych mogłem przebywać pół po czasie musiałbym przenieść swoją rezydenturę podatkową własną mini firmę byłoby trudne logistycznie wróciłem polski przypadek dałem zwerbować berlina razem balastu postaci własnej mini firmy opowiedz kosztach linz ogóle mieszka takim mieście linz niesamowitym doznaniem jest miasto zaskoczyło wiele sposobów architektury jakości podejścia ekologii logistyki kultury jest miarę miasto przykład zaprojektować biorąc uwagę komunikację miejską całe miasto przebiegały linie tramwajowe pokrywające większość długości a poprzek przebiegały linie autobusowe tworząc komunikacyjny szkielet miasta dla fascynujące linz miało bogaty kulturowy charakter tuż odrestaurowanej starówki przepływa dunaj otoczony takimi atrakcjami przykład zamek muzeum techniki galeria sztuki lentos wieczorami niesamowity widok rozświetlony lentos rzucał blask dunaj jakość linz nieporównywalnie wyższa jakość wrocławiu po pierwsze miasto mniej zatłoczone bardziej zielone pory uważam linz oazę zieleni najbardziej ekologiczne miejsce jakim dane przebywać a lokalne podejście spędzania czasu natury wyciągnięcie ręki zmieniło stosunek spędzania wolnego czasu w czasie aktualnie polsce toczy debata temat handlowych niedziel linz musiałem zrywać sobotę rano zrobić zakupy większość sklepów otwarta a niedzielę praktycznie wcale i nikt marudził prostu reszta soboty wyjście restauracji pobiegać pojeździć rowerze myślę względem linz pewien wyjątkowe podział biurowy tydzień aktywny weekend zakorzeniona umysłach austriaków wspierana bogatą ofertą atrakcji mieście a dostępem rzeki gór kilometrami rowerowych przyjazną komunikacją miejską itd jeśli chodzi kwestie języka byłem absolutnie zaskoczony sześćdziesięcioparoletnia właścicielka mieszkania mówiła sprawnie angielsku samo językiem angielskim sprawnie porozumiewali inni ludzie pracy sklepach ulicach był przyjemny akcent moją znajomością niemieckiego obawiałem wyjazdu krajów niemieckojęzycznych niepotrzebnie przez blisko jedenaście pracowałeś stanowisku developera co najciekawszego spotkało cię czasie w czasie pracowałem wieloma ciekawymi projektami najciekawszą rzeczą czasie możliwość pracy wielonarodowych zespołach w znalazłem przyjaciół hiszpanii anglii wietnamie japonii zebrałeś doświadczenie postanowiłeś przełożyć własną firmę którą dodatku otworzyłeś berlinie z jakimi kosztami początkowymi musiałeś liczyć początkowe koszty trudno oszacować m in wizyta notariusza wpis rejestru firm rejestracja działalności kapitał początkowy firmy ug najmniej gmbh najmniej a obowiązkowa roczna składka stowarzyszeniu przedsiębiorców do dochodzą koszty księgowości najmniej miesięcznie plus roczne rozliczenie kosztuje nie mało najpierw znalazłeś team pierwsze zlecenie pracuję swoim własnym produktem zarówno mojej własnej firmie współzałożycielem ciężko powiedzieć pierwsze idea w rekrutujesz ludzi swojej firmy berlin rozbudowane zaplecze chodzi rekrutację oprócz standardowych headhunterów wiele lokalnych serwisów ofertami jak wygląda rekrutacja pracowników rynku niemieckim czym charakteryzuje powiedziałbym taka polsce firmy zatrudniają głów publikują oferty pracy serwisach ogłoszeniami wystarczy złożyć cv umówić rozmowę jakie masz plany przyszłość względem firmy siebie wobec firmy rozwój rozwoju chcę mieć mega korporacji wobec pracować mniej wyższej płaszczyźnie tj zamiast tworzyć kod opracowywać strategie tworzyć architektury optymalizować firmę lider nie obawiasz otwierając firmę przestaniesz zajmować programowaniem nie pozwolę stworzyłem siebie niszę mogę programować projektować grafikę zajmować treścią tworzyć multimedia dodanie kolejnej rzeczy którą mógłbym robić widzę bardziej możliwość rozwoju ciekawe wyzwanie paweł komarnicki właściciel cubitoo absolwent informatyki politechnice wrocławskiej zawodowo specjalizuje tworzeniu aplikacji internetowych podstaw od mieszka stałe berlinie aktualnie prowadzi własną agencję interaktywną współtworzy startup wspierający psychologicznie osoby cierpiące choroby przewlekłe zapalony gracz kucharz fotograf hobbysta w pierwszej części wywiadu agatą cieplik rozmawialiśmy wygląda proces rekrutacji dropboxie agata opowiedziała swojej rekrutacji pierwszych dniach nowym jorku siedzibie firmy w drugiej części pytamy dalej przebiegała kariery poleca zrobić osobom chciałyby pracować takiej firmie dropbox z agatą cieplik rozmawiają piotr nowosielski p just join it marcin kosedowski m kodilla chcielibyśmy podziękować dwóm fantastycznym partnerom infoshare academy prowadzi stacjonarny kurs programowania a kodilli prowadzi internetowe bootcampy gwarancją zatrudnienia na hasło just join macie zniżkę kursy zaczynamy p dużo kobiet dropboxie a w ciągu ostatnich dwóch tygodni rozpoczęły pracę dziewczyny oprócz przychodzi stażystka będę mentorem w moim zespole programistki pracujące full time koleżanka w paper duży udział kobiet natomiast samym biurze nowym jorku pięćdziesięciu programistów stu osób programistek plus stażystka p są jacyś polacy biurze a u biurze polaka jest specjalny kanał slacku polaków sześciu osób wiem h1b jedyna polką dwóch programistów miało przenosić san francisco marcu kwietniu wizie l1 reszta udziela slacku wiem dokładnie pracują m mam kilka pytań dotyczących samej pracy najpierw uświadomić słuchaczy warto podkreślić dropbox wielką firmą zatrudnia tysiąc osób którymi zarządzać możesz powiedz jakiej metodologii pracujecie a w zasadzie zespół określa pracować natomiast hierarchia swojego managera któremu raportuje firma podzielona cztery filary w każdym kolejne zespoły kolejne poziomy poza spotkanie swoim managerem jakiś czas narzuconego schematu korzystamy różnych narzędzi phabricator narzędzie facebooka jira pracujemy kwartał wyznaczone jakieś cele wybiera czego chciałby podjąć m kto wyznacza cele a jest trochę mieszane najpierw managerowie swoich zespołach organizują burzę mózgów pytając pomysły chcemy zmienić produkcie to fajne byłam osobą zespole wiedziałam możemy zrobić działa warto poprawić zostałam wciągnięta burzę mózgów pomysły zostały wzięte uwagę manager później kompiluje dokument prezentuje gronie pozostałych managerów ustalają ważniejsze słabe szybko jesteśmy stanie wdrożyć daną rzecz m powiedzmy wymyśliłabyś jakąś nową funkcję usprawnienie chciałabyś wprowadzić zajęłoby tygodnie programowania jak wygląda cała a można próbować przejść burzę mózgów jakiekolwiek cotygodniowe spotkanie zespołu są krótsze raz pół dropboxie organizowany hackweek polega samodzielnie niewielkich zespołach wymyśla swój własny projekt niekoniecznie związany robi firma po tygodniu takiego programowania wypuszcza prototyp oceniany każdy takim hackweeku zgłosić swój projekt zrobienia wtedy zbiera komisja projekty ocenia rozmawia autorami projektu szacuje potrzeba czasu takiego wdrożyć niestety pomysł następnego dnia wdrażany nie wypuszczą produktu jakiejś funkcjonalności potwierdzenia użytkownicy zadowoleni jest nowość nazywa hacklab osobny zespół zajmujący zbierać pomysły pracowników wdrażać zmianę to trzecia opcja zasugerować rozwój firmy m zgłaszałaś jakieś pomysły hackweek a tak dodałam funkcjonalność paper tłumaczy pisze ludzi różnych regionów władających różnymi językami brakowało funkcjonalności takiej belce tłumaczeń wdrożyliśmy był fajny projekt mogła zapoznać naszą bazą całym naszym kodem to trzeci miesiąc dropboxie hackweek czułam tyle komfortowo wiadomo czym szaleć to fajna możliwość zapoznać dzieje stronie klienta m mogłabyś opowiedzieć wygląda proces code review możesz wspomnieć kluczowych poprawkach punktu widzenia bezpieczeństwa a po pierwsze wrzucamy swój kod code review samodzielnie wybieramy kod sprawdzał najczęściej osoba zespołu specjalizuje części projektu do automatyczne reguły sprawdzają wprowadzasz zmiany jakimś konkretnym pliku kluczowy te reguły dopasowują poszczególne grupy review erów danej rewizji wewnątrz paper osobna grupa osób przypisanych paper infra reviewers security reviewers to bazuje duże doświadczenie osoby samym produktem kodem tą konkretna częścią kodu m uważasz ważne ktoś zrobił code review a uważam ważne to fajna opcja druga osoba rzuci okiem kod masz unit testy sprawdzałeś kilka razy swój kod lokalnie maszynie testowej istnieją miejsca pojawić błąd przewidziałeś dana osoba rzuci okiem powie hej stary zadziała m korzystacie continuous integration blokujecie branche a używamy phabricatora podpiętego arka pushujemy swoich branchy najważniejsze zostanie zaakceptowana zmiana ląduje commit queue wykonywane wszystkie testy jednostkowe testy ui dopiero zostaje wrzucone mastera zaakceptowane następnie taką zmianę możemy wypchnąć pracowników dropboxa mniej więcej dniu uwag taka zmiana zostaje wypchnięta użytkowników zewnętrznych m czyli bezpieczny proces jakie macie pokrycie unit testami a na pewno wydaje cała infrastruktura pokryta testami przejście wszystkich testów zajmuje niekiedy minut czasami uciążliwe wiesz popsute chcesz szybko wypchnąć jakąś zmianę p w dropboxie odpowiadasz promocję programowania kobiet możesz więcej opowiedzieć a całkiem niedawno powstał wewnętrzny osobowy zespół biurze nowym jorku nazwaliśmy new york city site builders moim zadaniem dotarcie mniejszości reprezentowane it przypadku kobiet a dbanie całe biuro przyjaznym miejscem m czy usa promować programowanie kobiet a wydaje promować na pewno trochę chodzi dostęp różnych firm konferencji są różne organizacje polsce geek girls carrots organizują kursy programistyczne bootcampy uczą programować zaprezentować rozmowie kwalifikacyjnej p przejdźmy pytań naszych widzów pierwsze dotyczy kosztów san francisco nowym jorku a nowy jork tani wynajem mieszkania dosyć drogi płacisz wysoki podatek stanowy fakt mieszkania nyc jest sporo osób ramach optymalizacji podatkowej mieszka new jersey codziennie dojeżdża wtedy płacą podatku miejskiego jeśli chodzi same mieszkania zależy mieszkać można poszukać czegoś uptown bardziej północ queens brooklyn trochę taniej trzeba liczyć dojazd zająć trochę dłużej p jakie ceny mieszkań manhattanie a queens a wiem manhattanie znajomi płacą między a wielkości mieszkanie w queens znaleźć podobne mieszkanie manhattanie trochę większe p bardzo duża różnica daleko queens manhattanu a to zależy miejsca queens ogromne mi dojazd metrem pracy zajmuje pół godziny p słyszałem kolei mieszkania san francisco droższe nowego jorku a mieszkania okropnie drogie moi znajomi mówią najlepiej mieszkać miastem dojeżdżać kolejką pracy p jak kwestii cen innych rzeczy usa a kiedy pracujesz firmach technologicznych wydajesz pieniędzy jedzenie lunche obiady picie cały tydzień masz zapewnione bilet miesięczny metro dużo zależy umówisz podpisując umowę mieszkanie musisz płacić dodatkowo energię wodę za prąd wychodzi mniej więcej miesięcznie internet niektóre firmy płacić telefon musisz samodzielnie płacić rachunków oferują zwrot kosztów komunikacji miejskiej przykład dają rower p ktoś zadał pytanie wygląda według sprawa związana przyszłościowymi językami programowania w warto wejść czym skupić perspektywie najbliższych a po części odpowiedziałam wcześniej pytanie wszystko zależy bardziej interesuje zaczynałam frontendu proste niski próg wejścia jednocześnie starać bieżąco technologie webowe zmieniają dynamicznie sama przywiązywałam konkretnego języka technologii uważam lepiej poznać wiedzieć działa poznać różne paradygmaty próbować programowania funkcyjnego programowania obiektowego tyle poznać konkretny język nauczyć myślenia dany jeśli nauczysz myśleć dany nauka nowego języka p jak wygląda praca zdalna dropboxie czy zostawać godzinach a nikt wymaga zostawania godzinach wszystko zależy organizujesz pracę nikt pilnuje jesteś godzin najważniejsze komunikować masz czymś problem czymś zawieszasz zamiast siedzieć godzinach dłubać czymś wychodzi prostu pytasz kogoś pomóc zgłaszasz problem manager wiedział postępy braki ewentualne zagrożenia danym projekcie jeśli chodzi pracę zdalną wystarczy dogadać wcześniej wysyłasz sms rano dnia chcesz pracować domu p ciekawe pytanie padło chwilą szczególnie osób rozważających przeniesienie nowego jorku jaka według ciebie minimalna płaca opłaca ogóle rozmawiać pracodawcą oferującym pracę nowym jorku a generalnie przyjmuje rocznie brutto klasa wtedy spokojnie przeżyjesz zostanie p odnośnie samej rekrutacji możesz podać przykładowe zadanie musiałaś rozwiązać podczas jednej rozmów kwalifikacyjnych jak zaawansowane zadania jakich zagadnień dotyczą a z mojego punktu widzenia zadania rekrutacyjne dropboxie szczególnie trudne nastawione sprawdzenie twojej wiedzy danego języka programowania sprawdzić tok myślenia jeśli chodzi zagadnienia pewno pojawi jakaś rekurencja kolejnych etapach pojawić programowanie wielowątkowe zoptymalizować p czy rekrutowałaś dropboxa wcześniej google jakoś specjalnie przygotowywałaś wszystkiego a początkowo przed moimi pierwszymi rozmowami google miałam kartce rozpisane algorytmy sortujące wiedziałam zestresuję powiem jakąś głupotę z każdą kolejną rozmową rekrutacyjną p czy dropboxie patrzy bardziej doświadczenie ukończoną uczelnię jeśli chodzi język angielski warto mieć jakieś certyfikaty potwierdzające umiejętności a tak naprawdę dostać ofertę firmy potrzeba niczego potwierdza umiejętności fakt warto mieć cv przyciągnie wzrok rekrutera nikt patrzy studiowałeś jakimi ocenami nikt oczekiwał ode certyfikatów sprawdzali radzę podczas rozmowy rekrutacyjnej natomiast studia same istotne pracować usa wiza h1b zielona karta wizy osób wyższym wykształceniem p na studia pomogły dostać dropboxa a wynikało doskonaliłaś godzinach dużo czasu poświęciłaś a na pewno początkowo poświęciłam czasu później mniej zaczęłam studiować pracować gdybym miała wrócić domu klepać kod mogłabym oszaleć co znaczy czasami robiłam studia pewno dają taką podstawę teoretyczną dzięki pewniejsza robię p wrócę pewnego pytania pojawiło ono dotyczy architektury paper czy jakieś mikroserwisy innego a tak mikroserwisy niedługo będziemy stawiać kolejny korzystamy trochę różnych zewnętrznych rozwiązań samego wyszukiwania plikach p na koniec chciałbym spytać jaką radę byś dała osobie chciałaby przyszłości dostać takiej firmy dropbox co zrobić jaką podążać a myślę podejść strategicznie jeśli chcesz pracować usa musisz mieć studia bez wykształcenia wyższego zdobędziesz wizy trzeba mieć uwadze licencjat polsce trwa lata a usa lata zrobić licencjat polsce lata rok magisterki minimum zostało zakwalifikowane równoważny poziom wykształcenia licencjatem usa do warto zdobyć wykształcenie innych miejscach pracować sprawia masz praktyczny kontakt wszystkim czego uczysz uczysz nowych rzeczy chodzi budować pewność siebie różnych obszarach p dziękuję rozmowę to szósty live stream polskimi programistami całego tym razem rozmawiamy agatą cieplik znalazła pracę dropboxie siedzibie nowym jorku piotr razem marcinem kosedowskim kodilla postanowili porozmawiać agatą procesie rekrutacji firmy czym dzień zajmują programiści dropboxa zanim przejdziemy wywiadu chcielibyśmy podziękować dwóm fantastycznym partnerom infoshare academy prowadzi stacjonarny kurs programowania a kodilli prowadzi internetowe bootcampy gwarancją zatrudnienia na hasło just join macie zniżkę kursy zaczynamy p agato opowiedz krótko a nazywam agata cieplik programuję wielu niedawno skończyłam informatykę mim ie obecnie mieszkam nowym jorku pracuję dropboxa p jak zaczęła historia kiedy pierwszy pojawiła zajawka programowanie od wiedziałaś ciągnie komputerów a historia zaczęła podstawówce lekcji informatyki uczyliśmy programować lokomocji od chodzącego sto kroków przodu poprzez rysowanie trójkątów kwadratów przerodziło pierwsze zadania rekurencją w szóstej klasie podstawówki zajęłam miejsce podium konkursie programowania lokomocja dosyć ciężka sprawa gimnazjum zbuntowałam przestałam brać udział konkursach skończyło nauczyciele sami zapisywali co ciekawe gimnazjum byłam ukierunkowana tematów robiłam olimpiadę filozoficzną w pierwszej drugiej klasie gimnazjum wraz trójką kolegów zostaliśmy wybrani stworzyć stronę internetową klasy nikt zielonego pojęcia taka strona powinna wyglądać droga mękę nasza pierwsza strona zrobiona html tabelkach wyglądało na koniec ramach podziękowania otrzymał książkę ja dostałam php praktyczne którą przeczytałam wiedza przydała wybór liceum kwestią przypadku jako latka buntowałam takimi poważnymi wyborami ostatecznie zdecydowałam mat inf na studia poszłam uniwersytet warszawski mim wydział matematyki informatyki mechaniki p na studiach robiłaś jakieś praktyki wyjeżdżałaś zagraniczne staże a pierwsze doświadczenia związane miałam szłam liceum przeczytałam przecież php praktyczne związku czym stworzyłam kogoś pierwszą stronę wizytówkę to pierwsze zarobione przeze pieniądze w liceum byłam pewna siebie szukałam gumtree ogłoszeń pracę odpowiedziałam ogłoszenie dostałam możliwość praktyki firmie netkata przez pół chodziłam kilka godzin tygodniowo oni włożyli naprawdę sporo czasu pracy poduczyć p a chodzi jakąś poważniejszą praktykę a to tuż liceum stworzyłam własne ogłoszenia gumtree odezwał krzysztof kulewski obecnie pracuje google zaprosił rozmowę rekrutacyjną firmy dts działu r d robią strony internetowe django poszłam rozmowę dostałam pracę przepracowałam zaczęłam front endu praktycznie robiłam css javascript pół przerzuciłam pisanie django p co dalej zakończyłaś współpracę tą firmą a na drugim pracowałam firmy zajmującej płatnościami mobilnymi tam przepracowałam lata w czasie dwóch wzięłam miesięczny urlop podczas robiłam praktyki londynie google p podejrzewam dostać praktyki google a nie względu fakt początku pisało rekruterów google czym mówił nadaję tą pozycję następnego dnia pisał mówił propozycję stażu google moja rekrutacja zaczęła wrześniu a praktyki miałam zaczynać lipcu etapów rekrutacji sporo ostatecznie zostałam przyjęta staż google londynu manager brukseli miejscu dostałam hosta zajmował manager przylatywał dni tygodniu londynu po próbowałam rekrutować fulltime znowu samo na wszystkie interview spóźniali potrafili odwołać minut poczułam chcę pracować takiej firmie bardziej byłam równocześnie rekrutacji dropboxa miałam zupełnie doświadczenia temacie p jak wyglądała rekrutacja dropboxa czym różniła rekrutacji google a podejrzewam przebieg rekrutacji każdej firmie podobny najpierw rozmowa telefoniczna kilka później zapraszają spotkanie biurze rozwiązujesz zadania jeśli chodzi dropbox odbyłam rozmowy telefoniczne rozwiązałam jakieś zadania techniczne po dwóch rozmowach dostałam zaproszenie biura san francisco oczywiście odbywa koszt firmy spędziłam siedmiu godzin czego miałam rozmów rekrutacyjnych wszystkie techniczne p ile czasu minęło pierwszego kontaktu dropboxem momentu faktycznie zaczęłaś pracę a minęło czasu pierwsze rozmowy dropboxem miałam mniej więcej wrześniu a pracę rozpoczęłam listopadzie ofertę złożyli styczniu od momentu mieli miesiące złożyć moim imieniu aplikację wizę h1b wizę dostałam dopiero początku września p z kojarzę czasie kończyłaś studia wzięłaś udział hackathonie facebooka opowiedz wyglądało a wydaje pierwszy organizowali lokalny etap warszawie to listopad na początku planowałam iść wiedziałam czym polegało słyszałam pójdziemy sobotę będziemy programować godziny poszłam projektu wzięłam laptopa w międzyczasie zdążyłam wymyślić mogę zrobić już samym hackathonie udało skompletować zespół napisaliśmy aplikację files for groups aplikacja skanowała wszystkie grupy przedstawiała formie folderów wyświetlała wszystkie udostępnione pliki to prosty projekt godzinach działającą aplikacją tak złożyło aplikacja została wybrana wygrała jako nagrodę facebook ufundował wyjazd usa finały p nigdy przeszło myśl aplikowanie facebooka a nigdy aplikowałam facebooka tak naprawdę moim stażem google nigdzie aktywnie rekrutowałam dropbox napisał polecił kolega stażu m powiedz proszę czym oprócz udostępniania plików zajmuje dropbox czym zajmuje dział a pracuję paper infrastructure drugie dziecko dropboxa dropbox postawić paper pokazać stanie wypromować drugi produkt edytorem tekstowym minimalistycznym wygodnym zajmuję szeroko pojętą infrastrukturą w przeciwieństwie samego dropboxa infrastruktura podzielona poddziały są ludzie zajmują bazami danych ludzie zajmują serwerami w paper teamie jest osiem osób zajmujemy ktoś zabawnie określił takim całym fullstack infrastructure obecnie zajmuję usprawnieniem działania routingu paper wkrótce zacznę optymalizować search m widziałem znasz technologii języków programowania c php wspomniałaś javę pythona w dropboxie paper czego głównie korzystasz a tak naprawdę wykorzystujemy jest typescript java scala lua niektóre rzeczy związane konfiguracją robimy użyciu ruby m na czym oparty cały silnik paper a silnik oparty javie typescript m w języków najbardziej lubisz pisać wolisz niskopoziomowe wysokopoziomowe języki a wolę języki niskopoziomowe ostatnie cztery lata pisałam wyłącznie c rok javie głównie pisałam c czuję c m nie wspomniałaś ciekawym zagadnieniu związanym terminalami płatniczymi mieliśmy okazję porozmawiać wczoraj czy mogłabyś opowiedzieć terminalach co robi czego wykorzystywane c problemy napotkać a w mojej drugiej pracy miałam czynienia terminalami płatniczymi przetwarzaniem danych kartowych terminalach w zasadzie terminale prymitywnymi urządzeniami my współpracowaliśmy chińskim producentem sprzętu większość oparta okrojonym linuxie wszystkie pierwsze terminale którymi firma pracowała miały autorski chiński system operacyjny wymagał kompilatora bezpośrednio producenta nie zbyt wielu dodatkowych bibliotek pisać wyłącznie c zarówno flash ram ograniczone na szczęście terminalu musiałam pisać praktycznie razu wzięłam miały wspomnianego ograniczonego linuxa tak naprawdę mogliśmy razu pisać c producent dostarczył odpowiedni kompilator m padło ciekawe pytanie czacie czy poleciłabyś komuś dopiero zaczyna programować zająć c raczej czymś bardziej zobaczyć a myślę warto zacząć jakiegoś prostego frontendu sprawdzić potrafi wiele osób uczy używać wysokopoziomowych języków natomiast rozumie spodem działa przeszkadzać dalszej karierze m jak widzisz przyszłość języków wspomniałaś czy uważasz któryś bardziej przyszłościowy któryś warto angażować a to zależy branży myślę chodzi web iść najbardziej stronę nowoczesnych technologii zresztą zmieniają częściej pół są tematy terminale płatnicze raczej nieprędko przejdą nowsze technologie terminale verifone samym systemie operacyjnym ludzie rozumieją działa pisanie aplikacji straszną zmorą nauczysz duża szansa programista verifone znajdziesz pracę p chciałbym wrócić tematu pracy dropboxa istnieje używa pół miliarda ludzi jak wygląda ile osób pracuje dropboxa a jest tysięcy osób biura dropboxa trzy stanach san francisco nowym jorku seattle jest biuro tel aviv programistów są biura głównie sprzedażowe europie jedynie dublinie trochę programistów wiadomo samodzielnego zespołu p możesz opowiedzieć wyglądała relokacja usa na należy zwrócić uwagę a przed przyjęciem oferty relokacją warto sprawdzić sieci kosztuje miesięcznie miejscu chcemy przeprowadzić możemy zapłacić wynajem mieszkania jakiej powierzchni jakiej dzielnicy kosztuje jedzenie itd warto zwrócić uwagę firma oferuje pakiet medyczny ubezpieczenie stanach wizyty lekarzy drogie dla przykładu wizyta internisty kosztuje konsultację za zrobienie poważniejszego badania ceny wyższe dlatego warto mieć zapewnione dosyć dobre ubezpieczenie pracodawcy warto dopytać jeśli chodzi relokację moim przypadku firma płaciła bilet nadbagaż mieszkanie pierwsze dni mogła spokojnie znaleźć swojego warto dopytać firma skłonna zapłacić brokera opłatę którą płaci brokerowi znalazł mieszkanie p jak odnalazłaś podczas pierwszych dni nowym jorku a kiedy przyleciałam usa kolejnego dnia byłam umówiona moim managerem dropboxie chciał spotkać porozmawiać pokazać biuro dowiedziałam lodówka piciem wygląda wydawanie obiadów pomieszczenie a ukryte szafki alkoholem itd kiedy skończył oprowadzać spytał jakieś pytania odpowiedziałam otworzyć konto banku social security number to pytanie zaskoczyło widać ogóle przygotowany wynika przynajmniej biurze nowym jorku swego rodzaju ewenementem większość ludzi pracuje obywatele stanów zjednoczonych osoby miały wcześniej doświadczenie pracy usa wszyscy dziwią ledwo skończyłam studia spakowałam przyjechałam stanów mówią odważne jednocześnie wiedzieli czego będę potrzebować przygotowani pytania mojej strony p jak wyglądał pierwszy kontakt pracownikami dropboxa nie miałaś problemu zrozumieć dogadać a nie problemu wszyscy pozytywnie nastawieni największą rzeczą irytuje kwestia wymówić imię na imię agata angielsku istnieje ekwiwalent mojego imienia a pytanie wymawia słyszę przynajmniej tygodniu p padło międzyczasie pytanie dropbox bajery różnego rodzaju zatrzymać pracownika najdłużej typu przedszkole siłownię jak biurze nowym jorku a san francisco a w biurze san francisco trochę więcej rzeczy jest siłownia bezpośrednio biurze miejsce wysyłać paczki mają ogromną kuchnię stołówkę całe piętro budynku poświęcone jedzenie mają swoją kawiarnię samodzielnie parzą kawę w nowym jorku trochę skromniej pracuje osób w biurze san francisco nie bezpośrednio biurze siłowni tygodniu przychodzi trener jogi jest biblioteczka stół ping ponga każdy zaczyna swój dzień pracy innych godzinach p zastanawiam wygląda typowy dzień pracy czy kodujesz większość czasu spędzasz spotkaniach a zaczynam dzień reguły czytania maili jeśli ktoś pracował korporacji jednego dnia dostać sto maili czego dotyczą następnie code review przeczytanie dokumentów międzyczasie zostały zaktualizowane następnie lunch a później zależy dnia tygodnia są dni wypełnione spotkaniami brzegi dni siedzę piszę kod p co najbardziej lubisz swojej pracy dropboxie a najbardziej lubię pisać kod moment wchodzi produkcję grafach widać działa szybciej przybywa użytkowników a zmniejsza zużycie procesora moment czujesz zrobiłeś naprawdę zaczyna działać p ty sprawdzasz swojej pracy dzieje dropboxie sytuacji ktoś odstaje względem innych pracowników czy jakieś programy doszkalające a to wygląda pierwsze sześć tygodni residency program polega masz mentora chodzisz różne spotkania dodatkowe zajęcia opowiadają działa robimy code review używamy konkretnych narzędzi itd firma przeznacza jakąś kwotę rocznie każdego pracownika pracownik wyrazi chęć samodzielne doszkalanie może zakup książek udział szkoleniu konferencji w najbliższą niedzielę opublikujemy drugą część rozmowy agatą cieplik dropboxa największy koszt zjednoczonych emiratach arabskich wynajem zazwyczaj wynosi tysięcy złotych miesięcznie dolicz jedzenie rozrywkę wydatki tysięcy złotych miesięcznie nie polecałbym nikomu przyjeżdżać pracy mniej tysięcy miesięcznie mówi rafał mańka senior android developer emirates opowiedział swojej kariery poleca początkującym pracę software housie twój współlokator przekonał cię informatyce znaleźć płatną pracę rzeczywiście znaleźć studiach psychologii społecznej pracę studiach psychologicznych znaleźć trudno jedyne oferowano bezpłatne staże jeżeli chodzi pracę zawodzie programista dosyć przekonać wspomniany kolega szukał pracy a ciągle dostawał propozycje rekruterów dostał grant unii stworzenie jakiegoś oprogramowania kolegami na pracuj ofert programistów rocznym stażem stanowisko juniorskie jak wyglądało twoje przebranżowienie od czego zacząłeś naukę programowania zacząłem tutoriali youtube artykułów internecie później pojawiło teamtreehouse com udemy com korzystałem wyłącznie tutoriali wideo zajmowałem tworzeniem własnych projektów książek polecam zanim wyjdą nieaktualne materiały uczelni przydały podjąłeś decyzję kolejnych studiach razem wybrałeś informatykę pjwst warszawie do czego kontekście programowania przekonywali cię wykładowcy nie sprawdzałem wykładowców ogóle pjwstk uczelnią prywatną studiami zaocznymi dobrej renomie te trzy kryteria musiały spełnione zdecydował w retrospekcji studia potrzebne jak oceniasz kierunek pjwst pozytywnie to niewielu kierunków faktycznie przygotowuje jakoś pracy zawodzie jednak wiedzy zdobywa pracując na koniec studiów przepaść wiedzy pomiędzy ludźmi pracowali czasie studiów a tymi pracowali ile czasu studiach spędzałeś pogłębianiu wiedzy kiedy złapałeś bakcyla poczułeś codziennie pragniesz więcej studia odbywały drugi weekend sobotę niedzielę a zajęcia trwały sześć godzin praca zawodowa poniedziałku piątku zajmowała godzin dziennie plus nadgodziny zawsze robiłem tyle nadgodzin możliwe programowanie zaczęło podobać praktycznie razu podoba tworzenie nowych rzeczy umysłowe w trakcie studiów znalazłeś staż software housie czego nauczyłeś firmie w software house nauczyłem tworzenia wyglądających gotowych aplikacji szybko duży nacisk szybkość a mniejszy jakość z perspektywy czasu potrafisz ocenić praca software housie dobry start karierze moim zdaniem software software house idealna firma początek tego typu firmy bardziej skłonne zatrudnienia początkujących programistów względu koszty kładzie duży nacisk pisanie gotowych całkowitych rozwiązań więc szybko człowiek nauczyć zrobić początku końca jest tyle dobre dużym projekcie zazwyczaj pracuje wycinku czegoś rozumieć całości aplikacji praca software housie duży stres kupa nieodpłatnych nadgodzin dłuższej perspektywie polecałbym przejść firmy robi aplikację wewnętrznie własny użytek allegro pierwsza praca pewno dała tobie jakiś obraz pracy programisty możesz zdradzić po pierwsze zawód programisty polega pracy ludźmi nie tworzenie czegoś pojedynkę wszystkim dialog innymi programistami grupie programistów raczej pozytywne ludzie chętnie pomagają już wiedziałeś kim chcesz kilka nie zawsze zastanawiałem następny krok musze zrobić przejść kolejny etap ale miałem horyzoncie dłuższej perspektywy lata mniej więcej czasie postanowiłeś nauczyć innego języka programowania jakiego zdecydowałeś języka java javę mieliśmy studiach najpopularniejszy język podjęciem języka przeważało rynku ofert pracy zarobki dobre ponadto platforma android dopiero rozwijała doświadczonych programistów dziedzinie wydawało dobra inwestycja w weblify programowałeś aplikacje androida pamiętasz największy problem jakim wówczas uporałeś wtedy dopiero uczyłem problem polegał zazwyczaj zmieniłem kod miejscu a aplikacja wywalała gdzieś zupełnie indziej wszystko splątane sobą pozbawione logiki zmiana trywialna zajmowało czasu od prawie czterech pracujesz zjednoczonych emiratach arabskich opowiedz wyglądało znalezienie pierwszej pracy kraju co zawierała propozycja rekrutera obliczyłeś kosztować cię kraju praktycznie każdą pracę pierwszą znalazłem pasywnie linkedin rekruter wielkiej brytanii zadzwonił zapytał byłbym zainteresowany pracą uk po przeliczeniu kosztów zarobków zrezygnowałem byłoby korzystne tamtym czasie w odpowiedzi zaproponował pracę uae opłacało bardziej na poziom możesz pozwolić zjednoczonych emiratach arabskich to drogi kraj koszty emiratach arabskich trzy razy wyższe polsce jednak zarobki trzy razy wyższe w efekcie poziom wyższy względu dobra luksusowe samochody elektronika itp kosztują tyle samo największy koszt mieszkanie tysięcy złotych miesięcznie dodać jedzenie rozrywkę wydatki wychodzi potrzeba przynajmniej tysięcy miesięcznie utrzymać podobnym poziomie polsce tysiące nie polecałbym nikomu przyjeżdżać pracy mniej tysięcy miesięcznie trzeba wziąć uwagę fakt prawdopodobnie pracować partnerki moich znajomych stewardessami pracują w przypadku programistów zazwyczaj rekrutacja przebiega internet przyjeżdżać miejsce mnie akurat znalazł rekruter wielkiej brytanii global m można odezwać pytać oferty pracy jest kilka dobrych firm którymi zainteresować emirates careem dubizzle czym zajmujesz jestem programistą android a obecnie zostałem wydelegowany platformę ios robię oficjalną aplikację mobilną linii lotniczych emirates pracuję dziale it aplikacji mobilnych linii lotniczych emirates uae na moim piętrze tworzymy aplikacje mobilne pasażerów linii lotniczych w wlicza aplikacja android aplikacja ios strona mobilna emirates strona desktopowa tworzona innym piętrze wszystkimi menedżerami testerami designerami osób całym piętrze nas samą aplikacją android ios pracują sumie zespoły zespoły android ios każdy zespół osób sumie osób wyobrazić takim ciężko dojść konsensusu jakikolwiek temat większość ludzi którymi pracuję hindusi ich poziom pisania kodu niskim poziomie ogólnie polscy programiści cieszą dobrą renomą pracuję dwoma polakami najlepsi programiści całej firmie jakie miałeś pierwsze wrażenia przesiadce programowanie platformie ios z jednej strony ios android podobne zazwyczaj rozwiązuje same problemy podobny nawet frameworki siebie zbliżone kotlin swift niewiele siebie różnią w iosie pracuje ciężej względu kilka rzeczy po pierwsze xcode porównaniu android studio ubogi podstawowe rzeczy refaktoring otwarcie definicji klasy działa poprawnie wydaje apple poświęca mniejszą uwagę deweloperom tworzącym oprogramowanie platformę google zestaw narzędzi bibliotek ios ograniczony porównaniu javy androida kolejna kwestia taka programiści ios hermetyczne rzadko interesuje dzieje ios jaki stan zastałeś zacząłeś pracę aplikacją kiedy zostałem zatrudniony zespół zastałem znajdował patologicznym stanie obecnie aplikacja gust niskim poziomie a dwóch latach nieustannego ulepszania kodu mozolnej pracy firma zdecydowała wprowadzenie zmian dział it działał nieefektywnie drogi utrzymaniu produkował niskiej jakości aplikacje psuły dział it operował systemie wodospadowym przydzielano ludzi projektów trwających lata rekrutowano bazie znajomości sprawdzenia kompetencji kiedy dołączyłem zespołu wypuszczenie aplikacji play store a trwało trzy miesiące wliczając wszystkie testy dziur dzisiaj zajmuje kilka tygodni a docelowo powinno trwać kilka dni ogólnie rzecz biorąc hierarchiczny model organizacji sprawdza przypadku tworzenia oprogramowania decyzje temat oprogramowania przychodzą góry odrealnienia rzeczywistości z jakich narzędzi korzystacie pracy w androidzie dagger2 rxkotlin retrofit2 picasso androidx livedata wszystkie biblioteki powinny znaleźć w ios gorzej powyższych dependency injection temat istnieje przypadku aplikacji ios sugestia zastosowania rxswift została odrzucona wielokrotnie zespół ogólnie tworzy widoki mvvm klasycznie użycia bibliotek ile osób liczy zespół zajmujący aplikacją zespoły duże sprawia sporo problemów w mniejszym zespole praca pewnością przebiegałaby szybciej osób zespole stanowczo szczególnie każda osoba odmienne zdanie jak rozwijasz umiejętności dbasz ciągle czasie robię kursów udemy pojawi nowa technologia interesuje następnie zasubskrybowany newsletter android weekly ios weekly bieżąco dzieje mojej branży dodatkowo staram pracy wychodzić inicjatywą dodatkowych projektów zwanych poc proof of concept takich projektów pojawia całkiem sporo czyli masz płatną pracę nadal korzystasz kursów udemy oj zdecydowanie z udemy korzystam obecnie ukończonych kursów kilka ukończyłem różnych powodów dla forma nauki udemy najłatwiej przyswajalna instruktora prowadzi rękę krok kroku model biznesowy udemy sprawdza instruktor otrzymać najlepszą ocenę uczniów poświęca więcej uwagi materiały aktualne kurs kompletny inne strony przykład pluralsight model abonamentowy dostępem wszystkiego wiele kursów niekompletnych autorzy motywacji dbać w ostatnim czasie medium stało popularne częściej biorę stamtąd informacje przypadku szukam jakiegoś konkretnego rozwiązania oczywiście programista przetrwałby be stackoverflow znajduje rozwiązanie problemów programistycznych jaki kurs udemy szczególnie polecasz ciężko wytypować konkretnie z mojego doświadczenia wynika kurs oznaczony bestseller pewno tylko spotkałem rozczarowaniem kupnie bestsellera otrzymałem zwrot pieniędzy kupiłem gdzie chciałbyś pracować kilka w jakim chciałbyś podążała twoja kariery jeszcze zdecydowałem będę chciał zostać liderem zespołu programistów będę chciał pracować samodzielnie aplikacją może będę chciał pracować pełni zdalnie konieczności dojeżdżania pracy najprawdopodobniej wrócę kraju zobaczymy sprawy potoczą wymieniłeś trzy potencjalne kariery ciebie byłaby najbardziej rozwijająca każda rozwija innym kierowanie dużym zespołem stanowiłoby największe wyzwanie wiązałoby największym stresem praca domu opcja najbardziej komfortowa miałbym mniejszą motywację rozwijania rafał mańka senior android developer emirates ukończył studia psychologia społeczna swps warszawie potem okazało wykształceniem raczej pracy znajdzie najlepiej byłoby przebranżowić zdecydował nauczyć php język najprostszy zmienił język po miesiącach dostał pracę developer android weblify rok później zatrudnił firmie robi oprogramowanie fakturowanie rynek szwajcarski potem napisał rekruter zapytaniem chciałbym wyjechać emiratów wbrew pozorom kariery programisty testera prosta wszyscy znamy przykładowy przebieg juniora seniora warto wiedzieć wielu programistów dochodząc etapu regulara seniora odczuwa potrzebę zmiany bycia kimś innym tak przypadku moniki wolak pawła miry którymi porozmawialiśmy rozwijaniu swoich firmie ericsson dlaczego zdecydowali zmianę jak wyglądały pierwsze dni nowych rolach komu polecają kariery tego dowiecie rozmowy moniką track flow managerem pawłem pełniącym rolę operative product ownera zanim przejdziemy jaką kariery przebyliście opowiedzcie czym zajmujecie monika od dwóch track flow managerem zakres moich obowiązków ewoluuje momentu przejęcia zależy zmian cały czas zachodzą naszym projekcie organizacji moje obowiązki związane pracą zespołu czuwa pętlami testowymi naszej części produktu celu szybkiego poprawnego połączenia wszystkich modułów końcowy produkt moim zadaniem wspieranie zespołu realizacji zadań wprowadzanie usprawnień sposobie pracy podejmowanie decyzji problematycznych momentach decydowanie zmianach reprezentowanie zespołu podczas spotkań innymi modułami przedstawicielami zespołów developerskich paweł jestem objęciu stanowiska operative product ownera wydarzyło naturalnie prostu nadszedł odpowiedni moment okazja awans w naszym dziale rola bliska klasycznemu product ownerowi scrumie pewnymi dodatkowymi obowiązkami menedżerskimi rola kierownicza kolegami nasz dział odpowiada utrzymanie ulepszanie skryptów continuous integration odpowiadamy przebieg wizualizację procesów testowych jak takim bywa czasami działa użytkownik czasami usprawnić zautomatyzować dodać funkcjonalności zajmuję m in akceptacją zgłaszanych zleceń priorytetyzacją zadań współdecydowaniem używanych technologiach rozwiązaniach koordynacją rozwoju podproduktów a wdrażaniem nowych osób dziale w praktyce praca bardziej ludźmi produktem podprodukt swoją grupę developerów pracujących często zgłaszający prośby zmian potrzebują najpierw porozmawiać zapytać szczegóły techniczne oszacować szanse wdrożenie ryzyko związane funkcja typu spoc single point of contact z pełnionymi was rolami związane umiejętności miękkie w rozwijacie monika bardzo ważna praktyka każdego dnia dowiaduję czegoś nowego potem przydaje pracy obserwowanie innych praca różnymi zespołami każda retrospektywa spotkanie uczestniczyłam a zwykłe rozmowy kawie sposoby rozwijanie umiejętności miękkich teoria podstawą byłam zewnętrznych szkoleniach scrumowych zakończonych certyfikatami professional scrum master i professional scrum product owner i dodatkowo wolnych chwilach czytam artykuły książki typach osobowości należy współpracować paweł zadania organizacyjne wymagają sprawności odwagi przełamywania barier zwykłego mówienia konkretów podejmowania trudnych decyzji uważam umiejętności rozwinąłem wszystkim podczas studiów działając różnych organizacjach w pracy natomiast warto uczestniczyć czynnie spotkaniach zadawać pytania dyskutować argumentować poświęciłem trochę czasu pracy budowanie relacji ludźmi wiesz możesz wyjść współpracownikami przysłowiowe piwo polegać sprawach prywatnych znacznie potem pracuje udzielać feedbacku mniejszym ryzykiem ktoś obrazi monika pół stanowisko scrum mastera testera to znaczy wahałaś zmianą byłaś przekonana rezygnacji pracy testera monika swoją pracę rozpoczęłam tester dziale agile development rozwijaliśmy projekty procesach zwinnych przypadku mojego scrum w tamtym czasie dziale przyjęte roli scrum mastera rolą techniczną powierzanie prowadzenia większości spotkań project product managerami sztokholmu znalezienie równowagi pomiędzy tymi dwoma rolami niezwykle złożone stąd bycie scrum masterem dodatkiem wyzwaniem osoby technicznej uwielbiam wyzwania uczenie nowych rzeczy skorzystałam nadarzającej okazji dzięki mogłam pomagać zmianach zespole rozwinąć umiejętności miękkie podnieść zdolności komunikacyjne języku angielskim dlaczego zainteresowałaś scrumem monika na studiach informatycznych poznałam podstawowe modele procesów produkcji oprogramowania kaskadowy iteracyjny równoległy spiralny niczego dowiedziałam procesach zwinnych w pracy poznałam kanban scrum a lean po poznaniu podstaw scruma postanowiłam poszerzyć doświadczenie chciałam developerów kimś innym i akurat momencie pojawiła możliwość zostania scrum masterem skorzystałam paweł jakiego etapu doszedłeś programista wejście nową rolę spowodowało przestałeś rozwijać zawodzie paweł absolutnie przestałem rozwijać szkoda wszystkich poświęconych przestała główna odpowiedzialność pracy wciąż koduję wolnym czasie chcę wypaść obiegu po trzech latach bycia juniorem regularem zostałem senior developerem awans zbiegł czasie przejęciem funkcji operative product ownera natomiast rozszerzanie obowiązków odpowiedzialności następowało raczej ciągły niezależnie nazwy stanowiska byłeś podobnej sytuacji monika naraz funkcje programisty kogoś zajmuje sprawami organizacyjnymi pamiętasz moment zdecydowałeś skupisz rolach organizacyjnych paweł nie wiem konkretny moment decyzja skupieniu pracy organizacyjnej narastała mniej więcej momentu zostałem opiekunem naszych praktykantów wcieliłem podczas wakacyjnego projektu rolę kogoś rodzaju product ownera scrum mastera minizespół stworzyliśmy praktykantami mały realnie wdrożyć prawdziwego scruma pracowaliśmy sprintach odbywały wszystkie zalecane spotkania powstawały przyrosty zaprezentować większej grupie skupiłem koordynowaniu działań wtrącając nadmiernie kodu z biegiem czasu taka koordynacja potrzebna poziomie pracy naszych zespołów wyewoluowało zapotrzebowanie moją obecną rolę powiedziałeś chwilą chcesz wypaść obiegu programista to znaczy powrót programowania twój backup plan paweł nie zakładam góry poradzę nazywałbym backup planem może prostu pewnym momencie dojdę wniosku chciałbym robić innego wrócić pełnoetatowo programowania późno nie chciałbym odpłynąć całkowicie czystego zarządzania wolę cały czas rozumieć mówią koledzy biurek dookoła wesprzeć technicznie obydwoje mieliście wcześniej doświadczenia programistyczne testerskie przydają pracy monika doświadczenie testerskie ułatwia zrozumienie problemów pomaga estymacji czasu potrzebnego dostarczenie rozwiązania zdarza krytycznych sytuacjach pomagam troubleshootingu w moim przypadku doświadczenie testerskie wiedza techniczna ułatwiają wiele znaczy osoba nietechniczna sprawdziłaby moim stanowisku paweł wiedza programowaniu pewnością przydatna część mojej pracy polega byciu pośrednikiem pomiędzy naszymi interesariuszami a programistami dane rozwiązania wdrażać dobrze rozumieć jednych drugich przekaźnikiem informacji aktywnie uczestniczyć dyskusjach czasem doradzić dorzucić swój punkt widzenia ryzyko głuchego telefonu pewno mniejsze bywa czasem małą pułapką niektórych zadaniach pojawia pokusa zrobić samodzielnie znajduję czas polegać pełnoetatowych developerach technicznych ekspertach przydaje wiedza doświadczenie zakresu szeroko pojętej inżynierii oprogramowania projektowanie rozwiązań podział zadań mniejsze określanie wymagań spełnić dobry kod zapobiec błędom proponowanie ulepszeń opowiedzieliście swojej przygodzie testowaniem programowaniem chwilę zakończyła wejściem role nie macie wrażenia testerka programista mielibyście większy wpływ produkt monika uważam każda osoba pracująca ericsson wpływ produkty czasem pośredni a czasem bezpośredni da zmierzyć tym bardziej porównać dużych projektach jakimi zajmujemy wiem testerka miałabym wpływ produkt obecnie pewno miałabym wyzwań pracując ci paweł jako programiście ciężko zaproponować czego potrafiłem samemu zrobić występowało pewne ograniczenie własną wiedzą doświadczeniem oczywiście kilka pomysłów udało wdrożyć raczej rozwiązania konkretnych problemów jedną zalet funkcji opo składać więcej propozycji rozwiązań dobra produktu wdrażać inni zasadzie umowy programistami chciałbym działało dawało efekty nie wtrącam szczegóły techniczne kod dacie radę wdrożyć skala pomysłów szersza zamyka konkretnym rozwiązaniu kto waszym zdaniem sprawdzi idealnie takiej roli jaką pełnicie roli track and flow managera operative product ownera monika w roli najlepiej poradzi osoba otwarta pełna zapału potrafiąca słuchać szybko reagować potrzeby podejmować konkretne decyzje potrafiąca słuchać zrozumieniem sprawnie odpowiadająca zadane pytania dynamiczna elokwentna pozytywnie nastawiona zmian lubiąca nowości nie mieć zaplecza technicznego widziałam osoba podobnym stanowisku nietechniczna potrafiła problemów prowadzić techniczne dyskusje podejmować właściwe decyzje paweł osoba otwarta nową wiedzę ciągłe zmiany dookoła reagująca szybko sprawnie problemy lubiąca pracę ludźmi akceptująca fakt czasem więcej rozmawiamy kodujemy choćby podstawowy background techniczny pewno potrzebny umiem wyobrazić rozmawiam czymś czym zupełnie pojęcia na pewno przyspiesza podejmowanie decyzji dlatego mojej opinii osoba zupełnie nietechniczna mogłaby poradzić stanowisku potraficie perspektywy czasu określić mogliście szybciej później zmienić stanowisko a zrobilibyście zupełnie monika wyzwania podejmowałam związane doświadczenia pozytywne negatywne doprowadziły pełnię taką a inną rolę ericsson wiem podjęłabym ryzyka związanego przejściem nową rolę podjęcia nowych zadań pewno byłabym track and flow managerem może byłabym product ownerem nadal testerem paweł na początku pracy obecnym dziale trochę przytłaczała ilość nowej wiedzy umiejętności zdobyć stanowić realne programistyczne wzmocnienie zespołu jako junior chciałem prostu programować tworzyć tysiące linijek kodu najlepiej szybko zobaczyć efekt zmian to wiedza studiów nieinformatycznych uczyło inżynierii programowania projektowania architektury a szczegółów składni poszczególnych języków mój kierownik przekonywał wcale polega praca developera perspektywy czasu widzę rację dojrzały programista poświęcić więcej czasu zastanowienie działa a efektem wielodniowej pracy bywa czasami poprawka jednej linijki kodu odpowiadając pytanie chyba mogłem zrobić wcześniej musiałem nabrać odpowiedniego doświadczenia a później mam nadzieję stało odpowiednim momencie czas pokaże co sprawia czerpiecie satysfakcję swojej roli monika nowe wyzwania ludzie którymi pracuję siła napędowa jeśli stałe znane przewidywalne równoznaczne nudą nie lubię stać miejscu do czasu zaczęłam pracę track and flow manager prawie pół zmieniło mojej pracy zaczynałam tester potem podjęłam wyzwanie bycia scrum masterem testerem jednocześnie następnie wyjechałam pół sztokholmu pracować nieznanymi ludźmi po powrocie kraju pracowałam zespole zajmującym frameworkiem testerskim jednocześnie przygotowując prowadząc szkolenia nowej platformie którą projekt przenoszony następne pół znów spędziłam sztokholmie proxy product owner zespołu zajmującego wdrażaniem continuous integration mojego projektu po powrocie krakowa nadal kierowałam zespołem członkami developerzy polski szwecji węgier czasu zmieniło urodzenia synka po powrocie macierzyńskiego oswojeniu zmianami nastały wraz przejęciem ericpola ericsson rozpoczęłam pracę obecnym stanowisku dostarcza wielu wyzwań czynienia ludźmi różnych charakterach doświadczeniach wieku narodowości strefy czasowej to ekscytujące paweł wyznaję zasadę nikogo powinno tajemnicą pracujemy pieniędzy ważny work life balance ale przecież stoi przeszkodzie praca dawała satysfakcję na obecnym stanowisku daje wszystkim praca ludźmi realny wpływ decyzje dotyczące naszych produktów zwiększone obowiązki odpowiedzialność zauważyłem trochę więcej chodzę rozmawiam zamiast siedzieć biurku aspekt zdrowotny najważniejsza stoi miejscu cały czas uczy nowych rzeczy czasami nudna monotonna praca pewnie wygodna chyba monika wolak track and flow manager ericsson magister inżynier informatyki stosowanej wydziale fizyki informatyki stosowanej agh posiada doświadczenie testerskie scrumowe związane prowadzeniem szkoleń obecnie pracuje continuous integration prywatnie tomasza mama trzyletniego mikołaja paweł miry operative product owner ericsson magister inżynier fizyki technicznej wydziale fizyki informatyki stosowanej agh działacz organizacjach studenckich programista języków skryptowych python perl bash w pracy pewien czas pracę developera rolą scrum mastera obowiązkami team leadera podejmuje dodatkowych zadań organizacyjnych w wolnym czasie dba marzenę wspiera młodzież pierwszych krokach programistycznych kolekcjonuje kasety magnetofonowe rzuca siekierami drewniane tarcze jednym wielu benefitów bycia microsofcie właściwie nieograniczony dostęp autorytetów dziedziny it masz pytanie odnośnie net idziesz kawę andersem hejlsbergiem ojców c typescript mówi kacper rzepecki group engineering manager microsoft kacper zaangażował rozwój firmy przekonał zarząd microsoftu otwarcia oddziału szanghaju twoja kariery imponująca opowiedzmy proszę szczegółowo kolei zacznijmy politechnice poznańskiej znalazłeś ogłoszenie pracę microsofcie co stanowisko przebiegał proces rekrutacji było stanowisko sdet software development engineer in test programisty zajmującego pisaniem testów a narzędzi frameworków wspierających ogólnie pojęty proces zapewniania jakości oprogramowania sam proces rekrutacji prosty wysłaniu cv dostałem zaproszenie spotkanie mojej uczelni w ciągu trzech godzin przeszedłem rozmowy trzema managerami przylecieli kopenhagi każda rozmów miała podobny schemat najpierw kilka pytań rozgrzewkę rozmowa odbywała j angielskim opowiedz opowiedz projekcie masz cv itp następnie przejście meritum rozwiązania problemu algorytmicznego a później napisanie testów pokrywających problem przez ostatnie lata przeprowadziłem dziesiątki rekrutacji prezentuję kandydatom same problemy musiałem rozwiązać do zaskakiwany nowymi rozwiązaniami jeszcze rozpoczęciem pracy odwiedziłeś stolicę danii samodzielnie szukałeś mieszkania gdy dostałem ofertę byłem dużym wrażeniem przyszło głowy moja decyzja poprzedzona kilkoma godzinami spędzonymi komputerem to znalazłem brzmiało interesująco ojczyzna carlsberga lego najszczęśliwszy kraj wszechobecność rowerów informacja stawce podatkowej przestraszyła podejmowanie decyzji lata naprawdę proste oczywiście znaczenia wsparcie moich wykładowców umożliwili półoficjalne studia zdalne dzięki czemu równolegle pierwszym rokiem pracy mogłem ukończyć studia magisterskie całość przeprowadzki bezstresowa mile zdziwiło danii wszystkie dokumenty formularze musiałem wypełnić angielsku absolutnie chętnie posługuje językiem całość formalności zamknęła jednej wizycie urzędzie zajęła minut przez pierwszy miesiąc miałem zapewnione tymczasowe zakwaterowanie hotelu natomiast poszukiwaniu mieszkania pomagała agencja relokacyjna zapewniona ms czym początku zajmowałeś microsofcie do pracuję samym produktem aplikacją typu erp microsoft dynamics ax przeniesieniu chmury została przemianowana dynamics for finance and operations jest olbrzymi system milionów linii kodu używany największe firmy zarządzania wszystkimi aspektami prowadzenia biznesu chociażby kadrami sprzedażą zaopatrzeniem logistyką finansami marketingiem produkcją itp trudno pracować takim potężnym produktem praca oprogramowaniem biznesowym trudna pierwsze wymaga wiedzy dziedziny it dobrego zrozumienia wyglądają procesy biznesowe podszewki największym wyzwaniem szokiem początku byłem stanie zrozumieć specyfikacji problemów rozwiązywaliśmy wymagały dogłębnej znajomości zagadnień zakresu logistyki księgowości ogólnie pojętego biznesu podczas dołączając microsoftu wiedziałem angielsku powiedzieć faktura po drugie kontakty b2b sprawy szły złym firma liczyć reperkusjami prawnymi wysokimi odszkodowaniami przestój biznesu dzięki standardom jakości sytuacje szczęście zdarzają jednakże odpowiedzialności jaka spoczywa niewinny błąd spowodować drugim końcu stanie cała fabryka kasy fiskalne sieci hipermarketów przestaną działać wielki koncern rozliczy podatków na początku zajmowałem testowaniem funkcjonalności obszaru supply chain management polegało głównie pisaniu scenariuszy testowych testowaniu wydajności analizie wyników a znajdowaniu luk specyfikacji były zajęcia sprawiały mnóstwo frajdy a jednocześnie doskonała droga zrozumienia wymagań naszych klientów z ilu osób składał zespół pracowałeś zmieniało początku liczył osób ostatnie lata pracowałem zarówno mniejszych większych zespołach mamy elastyczną strukturę potrafimy zmieniać skład naszych teamów każdego dnia najlepiej dopasować zadania pasji umiejętności naszych programistów największe zespoły dotąd działałem miały osób dlaczego zainteresowałeś innymi zagadnieniami programowanie jak przebiegał twój rozwój microsofcie gdy dołączyłem microsoftu uświadomiłem bycie doskonałym inżynierem pisanie kodu słuchawkach a czasy inżynierów garażu mogło zmienić branżę it odeszły lamusa dziś pracujemy systemami składają milionów linii kodu pisanymi setki programistów bardzo szybko zrozumiałem mogę najlepszym inżynierem słońcem czego będę stanie przekonać innych zespołów pomocy realizacja mojego projektu zostanie ograniczona godzinną dobą studiach współczuciem patrzyłem wszelakiego typu managerów myślę wielu upieczonych inżynierów zna uczucie przecież zgłębialiśmy lata tajniki algorytmów dziesiątków języków programowania porzucić rzecz nudnych spotkań pisania setek maili bardzo szybko podejście zmieniło zobaczyłem managerowie mierze przestali doskonałymi inżynierami dbaniem cały zespół sami biorą siebie najtrudniejsze zadania a spotkania maile najeżone technikaliami po trzech latach firmie zacząłem podążać tą drogą zaczynając pozycji scrum mastera następnie poprzez pozycję project leada kończąc pozycji managera w podnosiłeś umiejętności miękkie twarde jednym wielu benefitów bycia microsofcie właściwie nieograniczony dostęp autorytetów dziedziny it masz pytanie odnośnie net idziesz kawę andersem hejlsbergiem ojców c typescript sql sprawia ci kłopoty mamy zespół kilkuset inżynierów stworzyli sql server podstaw zastanawiasz zmierza komputerów w samym budynku pracuje kilkudziesięciu badaczy pracujących komputerami kwantowymi myślę mojego rozwoju zasługą moich kolegów koleżanek wiedzę pełnym pasjonatów zdobywa niemal osmozę poza zdobywaniem wiedzy doświadczenia pracy codziennymi zadaniami istnieje wiele inicjatyw wymierzonych inkubowanie nowych pomysłów jedną moich ulubionych laboratoria ms garage są imponujące centra rozsiane naszych oddziałach całym wyposażone sprzęt druku obrabiarki cnc wycinarki laserowe komponenty elektroniczne lutownice narzędzia wszelkiego typu drony płytki prototypowe mikroskopy długo wymieniać nie przeznaczenia biznesowego oddane pełni ręce pracowników realizować własne projekty od druku własnych otwieraczy piwa budowę kopalni bitcoinów prototypy nowych urządzeń jestem wielkim fanem hackathonu trzydniowego festynu podczas inżynier microsoftu pracować swoim projektem marzeń zachęcić innych dołączenia wiele projektów przerodziło startupy projekty oficjalnie rozwijane naszą firmę oczywiście zapewnione multum szkoleń warsztatów a wsparcie dalszej edukacji chociażby studia mba jeśli chodzi budowanie kariery korzystam pomocy mentorów relacji liderami innych organizacji związanymi moją codzienną pracą chodzi codzienne zadania przesłoniły meritum w ramach takiej relacji dyskutujemy długofalowych planach rozwoju dostanie perspektywy zewnątrz a okazja wymiany doświadczeń kontaktów całym it w microsofcie byłem dużych zmian poczynając połączenia dyscyplin testerów developerów jedną napisałeś rozmowie wywiadem jak odbywało połączenie podział testerów devów wciąż popularny wielu firmach idea całkiem słuszna wprowadzenie systemu kontroli zapewniania jakości osoby odpowiedzialne odczuwałyby konfliktu interesów pomiędzy jakością a agresywnymi deadlineami w praktyce system więcej wad zalet ekstremalnych przypadkach powodowało sde tworzyli kod czasem zapominali zaimplementowaniu architekturze umożliwiałaby przetestowanie sdet czasem zapominali programistami stoi przeszkodzie niektóre niedociągnięcia naprawiali sami inżynierowie obydwu dyscyplin wynajdywali nowo narzędzia rozwiązywania samych problemów słyszałem sytuacjach wręcz absurdalnych chociażby sytuacji kod produkcyjny testowy napisane innych językach również punktu widzenia zarządzaniem zespołem model mniej elastyczny uniwersalna dyscyplina wprowadzenie zmiany zaczęło wprowadzenia nowego tytułu unified engineer pomimo tytuł przetrwał próby czasu spełnił swoją rolę widoczny pokazania obowiązki umiejętności muszą nabyć wszyscy zarówno testerzy deweloperzy kolejne kilka tygodni wypełnione agresywnym rozpoznawaniem druga strona zaoferowania najwięcej wyniosłem prostu siadając klawiatury naszych najbardziej doświadczonych devów robiąc pair programming pisałem kod produkcyjny podczas partner pisał kod testowy po dniach obydwoje mieliśmy dobry ogląd naszych bolączek rola organizacji zmianie ograniczała wsparcia inżynierów znalezieniu odpowiedniego bilansu pomiędzy jakością a tempem dostarczania nowych funkcjonalności cała reszta potoczyła naturalny instynktownie czuł dobry ruch z perspektywy czasu uważasz dobry ruch tak jak każdą inwestycją staraliśmy przeanalizować mierzalne efekty okazało przeciągu tygodni wydajność wzrosła krótkotrwałym spadku nawzajem musieliśmy przyswoić wiedzę drugiej strony jednoczesnym wzroście jakości polepszeniu pokrycia testami po sześciu latach nikt wspomina powrocie starego modelu przez ostatni rok pracowałeś projektem otwarcia biura microsoftu szanghaju od czego zacząłeś pracę projektem pomysł pojawił mojej głowie odpowiedź doraźne problemy jakimi spotykaliśmy po pierwsze konieczność wspierania naszych klientów wszystkich strefach czasowych czasem wymagała pracy godzinach wręcz nocy oczywiście rekompensowane dodatki wypłat dodatkowe dni wolne budziło zrozumiały dyskomfort inżynierów po drugie obecność dużego centrum r d centrum finansowym azji pokazuje zaangażowanie rejonie apac już chwili prowadzimy rozmowy bliższą współpracą strategicznymi klientami regionu obecność zespołu biura microsoftu bezpośrednio współpracować warunkiem koniecznym nawiązania bliższych relacji po trzecie region apac a szczególności rynek chiński cechuje szczególnymi wymaganiami produktu erp wszechobecność płatności mobilnych integracja największymi lokalnymi platformami it typu wechat alibaba szczególne wymagania dotyczące suwerenności danych azure mooncake od czego zacząłem oczywiście rozmów najbliższymi rodziną przyjaciółmi gdy dostałem zielone polu przedstawiłem pomysł mojemu managerowi mówiłem minut czym usłyszałem to sens czego potrzebujesz jak microsoft wspierał cię działaniu twoim zdaniem przeważyło zgodził otwarcie nowego oddziału dostałem pełne wsparcie strony microsoftu wczesnym etapie wiedziałem dobry pomysł wsparcie miało głównie postać mentoringu doradztwa otwartych drzwi każdego mógłby rozjaśnić wątpliwości pomóc podjąć właściwą decyzję poczynając zarządu ms chinach działów hr całym osób prowadzących podobne projekty przeszłości personelu placówek dyplomatycznych doradcach podatkowych kończąc oczywiście dostałem wolną rękę chodzi podróże służbowe wielokrotnie odwiedzałem szanghaj zanim podjąłem ostateczną decyzję szanghaj jedynym miejscem braliśmy uwagę nigdy miałem poczucia moim zadaniem bycie adwokatem pomysłu ostatecznie musiałem rozważyć wszystkie przeciw podjąć właściwą decyzje a firma polegała głównie moim osądzie ostatecznie rozrachunek prosty ruch dobry naszych klientów użytkowników a naszych inżynierów inwestycja warta ryzyka wysiłku a wspaniałe przeżycie okazji tym lepiej ile osób zamierzacie zatrudnić kogo szukacie w chwili chciałbym zespół szanghaju urósł osób poszukujemy głównie programistów otwarte pozycje stanowiskach managerskich jeśli którejś naszych czytelniczek czytelników szanghaj brzmi ciekawa przygoda najbliższe lata zapraszam kontaktu kacper microsoft com kacper rzepecki group engineering manager microsoft absolwent wydziału informatyki politechniki poznańskiej ekspert dziedzinie aplikacji biznesowych od rozwija najbardziej złożone systemy it od tygodni mieszka szanghaju tworzy możliwości rozwoju microsoftu z maciejem aniserowiczem developerem kilkunastoletnim doświadczeniem znanym wielu interesujących inicjatyw chociażby devstyle podcast devtalk rozmawiamy ciekawym momencie niedługo rusza projekt dna droga nowoczesnego architekta maciej wydawcą pogadaliśmy samym programie zapowiada niezwykle atrakcyjnie problemach związanych rozwojem zawodowym eksperckimi stanowiskami it niektórzy zastanawiają istnieniem a chciałbym zapytać istnieje osiągnięciu magicznego miana senior developera a wyglądać w branży it problem stosunkowo szybko osiągamy magiczny sufit często wystarczy niewiele zdobyć tytuł senior developera zacząć zastanawiać dalej dalsza prowadzić bardziej miękką twardą stronę zwykło nazywać team leader architekt definicji stanowisk wiele dodatkowo obowiązki jednej drugiej pozycji przenikać to pewne warto zatrzymywać senior developerze aktywnie dbać rozwój swój swojej kariery a ktoś widzi siebie umiejętności liderskich końca interesuje architektura jednocześnie pozostać senior developerem są mógłby uznać atrakcyjne względem finansów możliwości rozwoju umiejętności liderskich nauczyć rodzi to wymaga nieco pracy sobą niestety mało wcześniej przygotowywany zrobienia ta mocno charakter pozwala poznać siebie samego stawić czoła własnym strachom nowym wyzwaniom trudne warto natomiast tematy architektoniczne niejako naturalnym kierunkiem twardego rozwoju programisty jeśli kogoś interesuje architektura czas zastanowić inwestuje karierę programisty utarł podział miękkie twarde kompetencje powiązane zawodowe nie wszyscy taką klasyfikacją zgadzają moim zdaniem taka perspektywa realnie oddaje możliwości zdobywania kolejnych umiejętności naszym rynku it co myślisz skróceniu dystansu czasowego dzielącego stanowiska juniorskie seniorskich kiedyś potrzeba kilkunastu dziś standardem staje raczej kilka podczas rekordziści wyrabiają kilkanaście miesięcy czy dobre branży samych developerów ciężko ocenić dobre złe zależy konkretnego przypadku jedna osoba zachłyśnie zacznie zbytnio pysznić inna wykorzysta okazję mądrego pokierowania dalszą karierą na pewno wyzwania należą ja pewnym etapie zastanawiałem przypadkiem ciągu pierwszej dekady swojej kariery osiągnąłem wszystkiego kolejne kilkadziesiąt powtarzaniem samych znanych schematów wspomniałeś mądrym kierowaniu swoją karierą skąd właściwie dowiedzieć robi warto kimś konsultować istnieje ogóle jakiś zbiór uniwersalnych dobrych praktyk istnieją książki napisane osoby eksplorowały różne opcje branży it dzielą swoimi doświadczeniami sam zresztą taką napisałem jednak jednego właściwego podejścia jednej właściwej zawsze zachęcam eksperymentów szukania własnej drogi to daje największą satysfakcję nie namawiam ciągłego niekontrolowanego wyniszczającego rozwoju wszystkich kierunkach według ekstremalnie ważne poznawanie słuchanie samego siebie wybór wyzwań powodujących dyskomfort zabrzmi zbyt górnolotnie zwolennikiem swoim a cudzym najwięcej uczą hartują charakter własne błędy kiedy według ciebie developer staje seniorem o lepszy juniora mida dużo zależy definicji stanowisk warto zastanowić konkretnymi obowiązkami każdym odpowiedzialnością wynikającą posiadanego doświadczenia zaufania senior developer moim zdaniem więcej programista od doświadczonej osoby wymagać twardych miękkich umiejętności kontakt klientem pokierowanie zespołem mądre kwestionowanie wymagań biznesowych udział procesie definiowania zaliczyłbym obowiązków seniora takich umiejętności nabywa latami biorąc udział wielu projektach ucząc błędach często swoich myślę sporo programistów zadawać pytanie wiadomo osiągnęło poziom seniorski czy prostu czuje ostatnio miałem ciekawą rozmowę podczas rozmówca stwierdził seniora poznasz półce książkami tytułów czysto technicznych zaczynają pojawiać pozycje psychologii komunikacji zarządzania coś senior potrafi zaobserwować inaczej podchodzi problemów jakiś czas wcześniej zauważa wzorce powtarzające wyzwania stanie zasugerować rozwiązanie problemu wyciągając wnioski doświadczenia i wszystkim pisanie kodu ostatnich elementów całego procesu niekoniecznie najważniejszy jak należy poprowadzić swoją karierę osiągnięcie stanowiska seniorskiego oznaczało końca rozwoju tak naprawdę trzy przyjęte stopnie rozwoju programisty junior mid senior zubożają postrzeganie programistycznej kariery można dochrapać stanowiska senior developera prostu biorąc udział projekcie określoną liczbę jednak możemy wpaść pułapkę zamiast doświadczenia zdobyć rok powtórzony dziesięciokrotnie warto szukać nowych wyzwań aktualnych projektach zawsze da zrobić lepiej pomóc eksplorowanie nowinek technologicznych zadbanie solidne podstawy naprawdę niewiele zmieniają przestrzeni dekad sporo mówi temat zjawiska wypalenia zawodowego starszych specjalistów it czy wasz program oprócz przekazywania solidnej dawki wiedzy merytorycznej przewiduje zapoznawanie kursantów skutecznymi technikami sprytnymi hackami zapobiec szkolenie dna droga nowoczesnego architekta skupia wiedzy technicznej zapobieganie wypaleniu zawodowemu walka zjawiskiem bardziej obszar psychologii naszych trzech mentorów posiadamy odpowiednich kwalifikacji mam planach realizację miękkiego programu doświadczonych programistów zaproszę eksperta dziedzinie rozmowa tematach wiąże szczególnie dużą odpowiedzialnością jednak najwcześniej przyszłym na skupiamy dna dba solidną techniczną nogę programistycznego rozwoju gdzie powinien szukać pomocy chętny rozwoju senior spełnia wszystkie wymagania zajmowanego stanowiska brakuje naturalnych bodźców rozwoju warto poszukać inspiracji dalszego rozwoju chociażby klasycznych lekturach inżynierii oprogramowania sięgając wstecz niejednokrotnie zgłębienie podstaw opiera cała branża daje zupełnie nową perspektywę wykonywane obowiązki otwiera całkiem nową gamę potencjalnych dróg rozwoju wiele ciekawych opcji pojawi zaczniemy kwestionować założenia przyjęte aktualnych projektach nie chodzi oczywiście wzbudzenie częstej chęci przepisania wszystkiego nowa a raczej poszukiwanie stabilnej długoterminowej drogi rozwoju zarówno naszych systemów swojego w programie dna znaleźć wiele praktycznych wskazówek dotyczących jednego drugiego aspektu ulepszenia projektów poszerzenia swoich horyzontów masz jakieś konkretne tytuły uważasz szczególnie poszerzające horyzonty bardziej autorów na pewno bertrand meyer robert c martin michael feathers martin fowler kent beck eric evans vaughn vernon czy kompleksowy plan rozwoju zawodowego dna uwzględniał indywidualne preferencje uczestników drogi rozwoju agenda dna powstała bazie wieloletnich doświadczeń konsultacyjnych naszych mentorów szydło jakuba pilimona jakuba kubryńskiego oni prowadzą własne duże projekty wspomagają radą dziesiątki innych zespołów tysiące godzin spędzonych kodzie konsultacjach salach szkoleniowych skutkują niesamowicie precyzyjną perspektywą potrzeby rozwoju polskich programistów architektów ci trzej panowie dokładnie wiedzą czego brakuje polskiemu it zaserwujemy dna na szkolenia mentorów dna niejednokrotnie zapisywać rocznym wyprzedzeniem nam chodzi efekt skali wiedzę udostępnić szerzej przy takim podejściu takim rozmachu indywidualne preferencje niemożliwe aspekt zadbamy dna zestaw merytorycznie materiałów szkoleniowych zamknięta społeczność nowoczesnych architektów tam gronie innych podobnych ambitnych specjalistów podyskutować dopytać wszelkie intrygujące kwestie wykraczające przewidzianą agendę dna jak chciałbyś zachęcać potencjalnych uczestników udziału programie dna brakującym ogniwem rozwoju polskich specjalistów it o osoby niewielkim doświadczeniem przebierać materiałach edukacyjnych seniorzy pozostają drogie szkolenia wysokiej ceny wcale prosto załapać program wystartuje wrześniu jesteśmy pewni zapotrzebowanie wiedzę ogromne w czerwcu zrealizowaliśmy przedsprzedaż podczas pokazaliśmy agendę dna zaufanie naszych mentorów wydawcy przekroczyło najśmielsze oczekiwania w ciągu zaledwie dni konta wpłynęły prawie miliony złotych czyni dna ogromnym przedsięwzięciem crowdfundingowym i branży it ogóle historii polskiego biznesu online wiemy komu przydać wasze szkolenie innej beczki kogo dla osób mało doświadczonych aktualnym etapie swojego rozwoju powinny skupiać nauce języków programowania frameworków wzorców projektowych poziomie kodu takie osoby mogłyby poczuć sfrustrowane materiałem my chcemy wypełnić lukę edukacji innym poziomie abstrakcji doświadczonych midów seniorów architektów warto zapisać darmowy cotygodniowy newsletter architektoniczny http droga dev jeśli podsyłane tematy czarna magia oznacza wcześnie dna z jakim wydatkiem liczyć potencjalny uczestnik programu czy przewidziane jakieś udogodnienia dofinansowania system ratalny cena dostępu znana wrześniu uruchomimy nabór dna program kierujemy osób dużym doświadczeniem it kwota fakturze raczej najważniejszym czynnikiem decydującym przystąpieniu bądź szkolenia dna trwało minimum tygodni a osoby zorientowane stawkach szkoleń stacjonarnych pewno pozytywnie zaskoczone nie przewidujemy płatności ratach wielu specjalistom pracodawcy wykupili dostęp korzystając oferty przedsprzedażowej we wrześniu taka możliwość czego zachęcamy więcej osób dziale przejdzie dna lepiej wytwarzanych systemów klientów sam koszt uczestnictwa programie kontekście pomijalny maciej aniserowicz emerytowany programista kilkunastoletnim doświadczeniem autor książki zawód programista kursu gita aktualnie rozwija działalność online blog devstyle podcast devtalk kanał youtube skupia dostarczaniu polskiej społeczności it najwyższej jakości materiałów edukacyjnych klasy premium wydawca dna drogi nowoczesnego architekta prywatnie miłośnik muzyki jazdy samochodem