Z Maciejem Aniserowiczem, developerem z kilkunastoletnim doświadczeniem znanym z wielu interesujących inicjatyw (jak chociażby devstyle.pl czy podcast DevTalk), rozmawiamy w ciekawym momencie. Niedługo rusza projekt DNA – Droga Nowoczesnego Architekta, którego Maciej jest wydawcą. Pogadaliśmy więc o samym programie, który zapowiada się niezwykle atrakcyjnie, ale również o problemach związanych z rozwojem zawodowym i eksperckimi stanowiskami w IT.  
Niektórzy zastanawiają się nad istnieniem życia po śmierci, a ja chciałbym zapytać, czy istnieje życie po osiągnięciu magicznego miana senior developera? A jeśli tak, to jak ono może wyglądać?
W branży IT mamy ten problem, że stosunkowo szybko osiągamy ten magiczny “sufit”. Często wystarczy bardzo niewiele lat, by zdobyć tytuł “senior developera” i zacząć zastanawiać się… co dalej?
Dalsza ścieżka może prowadzić bardziej w “miękką” albo “twardą” stronę. Zwykło się je nazywać “team leader” i “architekt”, choć definicji tych stanowisk jest bardzo wiele. Dodatkowo obowiązki jednej i drugiej pozycji mogą się przenikać.
To, co jest pewne: warto nie zatrzymywać się na “senior developerze”, lecz także wtedy aktywnie dbać o rozwój swój i swojej kariery.
A co, jeśli ktoś nie widzi u siebie umiejętności liderskich, nie do końca interesuje go architektura, ale jednocześnie nie chce pozostać “tylko” senior developerem? Są inne ścieżki, które mógłby uznać za atrakcyjne pod względem finansów i możliwości rozwoju?
Umiejętności liderskich można się nauczyć, nie każdy się z nimi rodzi. To wymaga nieco pracy nad sobą i niestety mało kto jest do tego wcześniej przygotowywany, ale “wszystko jest do zrobienia”. Ta ścieżka mocno ćwiczy charakter i pozwala dobrze poznać siebie samego, stawić czoła własnym strachom i nowym wyzwaniom. Trudne, ale warto.
Natomiast tematy architektoniczne są niejako naturalnym kierunkiem “twardego” rozwoju programisty. Jeśli kogoś nie interesuje architektura, to może czas się zastanowić, po co inwestuje swoje życie w karierę programisty.
Utarł się podział na “miękkie” i “twarde” kompetencje oraz powiązane z nimi ścieżki zawodowe. Nie wszyscy się z taką klasyfikacją zgadzają, ale moim zdaniem taka perspektywa realnie oddaje możliwości zdobywania kolejnych umiejętności na naszym rynku IT.
Co myślisz o skróceniu dystansu czasowego dzielącego stanowiska juniorskie od seniorskich? Kiedyś potrzeba było na to kilkunastu lat. Dziś standardem staje się raczej kilka lat, podczas gdy rekordziści wyrabiają się w kilkanaście miesięcy. Czy to dobre dla branży i dla samych developerów?
Ciężko ocenić, czy jest to “dobre” czy “złe”, wszystko zależy od konkretnego przypadku. Jedna osoba zachłyśnie się i zacznie zbytnio pysznić. Inna wykorzysta okazję do mądrego pokierowania dalszą karierą.
Na pewno te wyzwania nie należą do łatwych. Ja sam na pewnym etapie zastanawiałem się, czy przypadkiem w ciągu pierwszej dekady swojej kariery nie osiągnąłem już wszystkiego, i czy kolejne kilkadziesiąt lat nie będzie tylko powtarzaniem tych samych, znanych już, schematów.
Wspomniałeś o mądrym kierowaniu swoją karierą. Skąd właściwie dowiedzieć się, czy robi się to dobrze? Warto z kimś to konsultować? Istnieje w ogóle jakiś zbiór uniwersalnych dobrych praktyk?
Istnieją książki napisane przez osoby, które eksplorowały różne opcje w branży IT i dzielą się swoimi doświadczeniami. Sam zresztą taką napisałem. Jednak nie ma jednego właściwego podejścia, jednej właściwej ścieżki. Zawsze zachęcam do eksperymentów i szukania własnej drogi. To daje największą satysfakcję.
Nie namawiam także do ciągłego, niekontrolowanego i wyniszczającego rozwoju we wszystkich kierunkach. Według mnie ekstremalnie ważne jest poznawanie i słuchanie samego siebie oraz bardzo świadomy wybór wyzwań powodujących dyskomfort. Zabrzmi to może zbyt górnolotnie, ale jestem zwolennikiem życia swoim, a nie cudzym życiem. Najwięcej uczą i hartują charakter własne błędy.
Kiedy według Ciebie developer staje się seniorem? O ile musi być lepszy od juniora i mida?
Dużo zależy od definicji tych stanowisk. Warto zastanowić się nad konkretnymi obowiązkami na każdym z nich oraz nad odpowiedzialnością wynikającą z posiadanego doświadczenia i zaufania.
Senior developer to moim zdaniem więcej niż “tylko programista”. Od tak doświadczonej osoby można wymagać nie tylko twardych, ale i miękkich umiejętności. Kontakt z klientem, pokierowanie zespołem, mądre kwestionowanie wymagań biznesowych i udział w procesie ich definiowania – to wszystko zaliczyłbym do obowiązków seniora.
Takich umiejętności nabywa się latami, biorąc udział w wielu projektach i ucząc na błędach. Często swoich.
Myślę, że sporo programistów może zadawać sobie to pytanie: skąd wiadomo, że osiągnęło się poziom seniorski? Czy to się po prostu czuje?
Ostatnio miałem ciekawą rozmowę, podczas której mój rozmówca stwierdził: “Seniora poznasz po tym, że na jego półce z książkami, obok tytułów czysto technicznych, zaczynają pojawiać się pozycje z psychologii, komunikacji i zarządzania”. Coś w tym jest!
Senior potrafi zaobserwować, że inaczej podchodzi do problemów niż jeszcze jakiś czas wcześniej. Że zauważa wzorce i powtarzające się wyzwania. Że jest w stanie zasugerować rozwiązanie problemu, wyciągając wnioski z lat doświadczenia. I przede wszystkim: że pisanie kodu to jeden z ostatnich elementów całego procesu, i to nawet niekoniecznie najważniejszy.
Jak należy poprowadzić swoją karierę, aby osiągnięcie stanowiska seniorskiego nie oznaczało końca rozwoju?
Tak naprawdę trzy przyjęte stopnie rozwoju programisty, czyli junior, mid i senior, bardzo zubożają nasze postrzeganie programistycznej kariery. Można “dochrapać się” stanowiska senior developera, po prostu biorąc udział w projekcie przez określoną liczbę lat. Jednak wtedy możemy wpaść w pułapkę i zamiast 10 lat doświadczenia zdobyć jeden rok powtórzony dziesięciokrotnie.
Warto szukać nowych wyzwań nawet w aktualnych projektach. Zawsze wszystko da się zrobić jeszcze lepiej. Pomóc w tym może tak eksplorowanie nowinek technologicznych, jak również zadbanie o bardzo solidne podstawy, które tak naprawdę niewiele się zmieniają na przestrzeni dekad.
Sporo mówi się na temat zjawiska wypalenia zawodowego u starszych specjalistów IT. Czy Wasz program, oprócz przekazywania solidnej dawki wiedzy merytorycznej, przewiduje również zapoznawanie kursantów ze skutecznymi technikami czy sprytnymi hackami, które mogą temu zapobiec?
Szkolenie DNA: Droga Nowoczesnego Architekta skupia się na wiedzy technicznej. Zapobieganie wypaleniu zawodowemu czy walka z tym zjawiskiem to bardziej obszar psychologii i ani ja, ani żaden z naszych trzech Mentorów nie posiadamy odpowiednich kwalifikacji. Mam w planach realizację “miękkiego” programu dla doświadczonych programistów, ale do niego zaproszę eksperta w tej dziedzinie, bo rozmowa o takich tematach wiąże się ze szczególnie dużą odpowiedzialnością. Jednak to najwcześniej w przyszłym roku. Na razie skupiamy się na DNA, która dba o solidną “techniczną nogę” programistycznego rozwoju.
Gdzie powinien szukać pomocy chętny do rozwoju senior, jeśli spełnia wszystkie wymagania zajmowanego stanowiska i brakuje mu naturalnych bodźców do rozwoju?
Warto wtedy poszukać inspiracji do dalszego rozwoju chociażby w klasycznych lekturach o inżynierii oprogramowania, sięgając nawet o 50 lat wstecz. Niejednokrotnie zgłębienie podstaw, na których opiera się cała nasza branża, daje zupełnie nową perspektywę na wykonywane obowiązki i otwiera całkiem nową gamę potencjalnych dróg rozwoju.
Wiele ciekawych opcji pojawi się, jeśli zaczniemy kwestionować założenia przyjęte w aktualnych projektach. Nie chodzi oczywiście o wzbudzenie tak częstej chęci “przepisania wszystkiego od nowa”, a raczej o poszukiwanie stabilnej i długoterminowej drogi rozwoju zarówno naszych systemów, jak i swojego.
W Programie DNA będzie można znaleźć bardzo wiele praktycznych wskazówek dotyczących i jednego, i drugiego aspektu: ulepszenia projektów i poszerzenia swoich horyzontów.
Masz jakieś konkretne tytuły, które uważasz za szczególnie poszerzające horyzonty?
Bardziej autorów. Na pewno Bertrand Meyer, Robert C. Martin, Michael Feathers, Martin Fowler, Kent Beck, Eric Evans, Vaughn Vernon…
Czy kompleksowy plan rozwoju zawodowego w DNA będzie uwzględniał indywidualne preferencje uczestników co do drogi rozwoju?
Agenda DNA powstała na bazie wieloletnich doświadczeń konsultacyjnych naszych Mentorów: Łukasza Szydło, Jakuba Pilimona i Jakuba Kubryńskiego. Oni nie tylko prowadzą własne duże projekty, ale także wspomagają radą dziesiątki innych zespołów. Tysiące godzin spędzonych w kodzie, na konsultacjach i w salach szkoleniowych skutkują niesamowicie precyzyjną perspektywą na potrzeby rozwoju polskich programistów i architektów. Ci trzej panowie dokładnie wiedzą, czego brakuje polskiemu IT i właśnie to zaserwujemy w DNA.
Na szkolenia Mentorów DNA trzeba się niejednokrotnie zapisywać nawet z rocznym wyprzedzeniem. Nam chodzi o efekt skali, by tę wiedzę udostępnić szerzej. Przy takim podejściu i takim rozmachu Indywidualne preferencje nie są niemożliwe, ale o ten aspekt również zadbamy. DNA to nie tylko zestaw świetnych merytorycznie materiałów szkoleniowych, ale także zamknięta społeczność Nowoczesnych Architektów. Tam, w gronie innych podobnych sobie ambitnych specjalistów, będzie można podyskutować i dopytać o wszelkie intrygujące kwestie, także wykraczające poza przewidzianą agendę DNA.
Jak chciałbyś zachęcać potencjalnych uczestników do udziału w programie?
DNA jest brakującym ogniwem w rozwoju polskich specjalistów IT. O ile osoby z niewielkim lub średnim doświadczeniem mogą przebierać w materiałach edukacyjnych, to już seniorzy nie mają tak łatwo. Pozostają im bardzo drogie szkolenia, na które mimo wysokiej ceny wcale nie jest prosto się załapać.
Program wystartuje we wrześniu, ale już teraz jesteśmy pewni, że zapotrzebowanie na tę wiedzę jest ogromne. W czerwcu zrealizowaliśmy przedsprzedaż, podczas której pokazaliśmy jedynie agendę DNA. Zaufanie do naszych Mentorów oraz do mnie – jako wydawcy – przekroczyło nasze najśmielsze oczekiwania. W ciągu zaledwie 8 dni na nasze konta wpłynęły prawie 2 miliony złotych, co czyni DNA ogromnym przedsięwzięciem crowdfundingowym. I to nie tylko w branży IT, ale w ogóle w historii polskiego biznesu online.
Wiemy już, komu może przydać się Wasze szkolenie, to teraz z innej beczki: dla kogo ono nie jest?
Dla osób mało doświadczonych, które na aktualnym etapie swojego rozwoju powinny skupiać się na nauce języków programowania, frameworków i wzorców projektowych na poziomie kodu. Takie osoby mogłyby poczuć się sfrustrowane materiałem.
My chcemy wypełnić lukę w edukacji na innym poziomie abstrakcji, dla doświadczonych midów/seniorów/architektów.
Warto zapisać się na nasz darmowy cotygodniowy newsletter architektoniczny na http://droga.dev. Jeśli podsyłane tam tematy to czarna magia, to oznacza, że jest jeszcze za wcześnie na DNA.
Z jakim wydatkiem musi się liczyć potencjalny uczestnik programu? Czy są przewidziane jakieś udogodnienia, np. dofinansowania czy system ratalny?
Cena dostępu będzie znana we wrześniu, kiedy uruchomimy nabór do DNA. Program kierujemy do osób z dużym doświadczeniem w IT, więc sama kwota na fakturze raczej nie będzie najważniejszym czynnikiem decydującym o przystąpieniu bądź nie do szkolenia. DNA będzie trwało przez minimum 18 tygodni, a osoby zorientowane w stawkach szkoleń stacjonarnych na pewno będą pozytywnie zaskoczone.
Nie przewidujemy płatności w ratach, ale już teraz wielu specjalistom pracodawcy wykupili dostęp, korzystając z oferty przedsprzedażowej. We wrześniu także będzie taka możliwość, do czego bardzo zachęcamy, bo im więcej osób w dziale przejdzie DNA, tym lepiej dla wytwarzanych systemów i ich klientów. Sam koszt uczestnictwa w programie będzie w tym kontekście pomijalny.
Maciej Aniserowicz. “Emerytowany” programista z kilkunastoletnim doświadczeniem. Autor książki “Zawód: Programista” i kursu Gita. Aktualnie rozwija działalność online: blog devstyle.pl, podcast DevTalk, kanał na YouTube. Skupia się na dostarczaniu polskiej społeczności IT najwyższej jakości materiałów edukacyjnych klasy premium. Wydawca DNA: Drogi Nowoczesnego Architekta. Prywatnie miłośnik muzyki i jazdy samochodem.